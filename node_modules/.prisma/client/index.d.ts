
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model Tracker
 * 
 */
export type Tracker = $Result.DefaultSelection<Prisma.$TrackerPayload>
/**
 * Model Overview
 * 
 */
export type Overview = $Result.DefaultSelection<Prisma.$OverviewPayload>
/**
 * Model HealthMonitoring
 * 
 */
export type HealthMonitoring = $Result.DefaultSelection<Prisma.$HealthMonitoringPayload>
/**
 * Model HealthExpected
 * 
 */
export type HealthExpected = $Result.DefaultSelection<Prisma.$HealthExpectedPayload>
/**
 * Model Otp
 * 
 */
export type Otp = $Result.DefaultSelection<Prisma.$OtpPayload>
/**
 * Model emailOtp
 * 
 */
export type emailOtp = $Result.DefaultSelection<Prisma.$emailOtpPayload>
/**
 * Model BookedAppointment
 * 
 */
export type BookedAppointment = $Result.DefaultSelection<Prisma.$BookedAppointmentPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model SeenMessage
 * 
 */
export type SeenMessage = $Result.DefaultSelection<Prisma.$SeenMessagePayload>
/**
 * Model Conversation
 * 
 */
export type Conversation = $Result.DefaultSelection<Prisma.$ConversationPayload>
/**
 * Model ConversationParticipant
 * 
 */
export type ConversationParticipant = $Result.DefaultSelection<Prisma.$ConversationParticipantPayload>
/**
 * Model doctor_availability_details
 * 
 */
export type doctor_availability_details = $Result.DefaultSelection<Prisma.$doctor_availability_detailsPayload>
/**
 * Model doctor_licenses
 * 
 */
export type doctor_licenses = $Result.DefaultSelection<Prisma.$doctor_licensesPayload>
/**
 * Model doctor_profiles
 * 
 */
export type doctor_profiles = $Result.DefaultSelection<Prisma.$doctor_profilesPayload>
/**
 * Model reviews
 * 
 */
export type reviews = $Result.DefaultSelection<Prisma.$reviewsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  DOCTOR: 'DOCTOR',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ConversationType: {
  PRIVATE: 'PRIVATE',
  COMMUNITY: 'COMMUNITY',
  ADMIN_SUPPORT: 'ADMIN_SUPPORT'
};

export type ConversationType = (typeof ConversationType)[keyof typeof ConversationType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ConversationType = $Enums.ConversationType

export const ConversationType: typeof $Enums.ConversationType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs>;

  /**
   * `prisma.tracker`: Exposes CRUD operations for the **Tracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trackers
    * const trackers = await prisma.tracker.findMany()
    * ```
    */
  get tracker(): Prisma.TrackerDelegate<ExtArgs>;

  /**
   * `prisma.overview`: Exposes CRUD operations for the **Overview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Overviews
    * const overviews = await prisma.overview.findMany()
    * ```
    */
  get overview(): Prisma.OverviewDelegate<ExtArgs>;

  /**
   * `prisma.healthMonitoring`: Exposes CRUD operations for the **HealthMonitoring** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthMonitorings
    * const healthMonitorings = await prisma.healthMonitoring.findMany()
    * ```
    */
  get healthMonitoring(): Prisma.HealthMonitoringDelegate<ExtArgs>;

  /**
   * `prisma.healthExpected`: Exposes CRUD operations for the **HealthExpected** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthExpecteds
    * const healthExpecteds = await prisma.healthExpected.findMany()
    * ```
    */
  get healthExpected(): Prisma.HealthExpectedDelegate<ExtArgs>;

  /**
   * `prisma.otp`: Exposes CRUD operations for the **Otp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Otps
    * const otps = await prisma.otp.findMany()
    * ```
    */
  get otp(): Prisma.OtpDelegate<ExtArgs>;

  /**
   * `prisma.emailOtp`: Exposes CRUD operations for the **emailOtp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailOtps
    * const emailOtps = await prisma.emailOtp.findMany()
    * ```
    */
  get emailOtp(): Prisma.emailOtpDelegate<ExtArgs>;

  /**
   * `prisma.bookedAppointment`: Exposes CRUD operations for the **BookedAppointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookedAppointments
    * const bookedAppointments = await prisma.bookedAppointment.findMany()
    * ```
    */
  get bookedAppointment(): Prisma.BookedAppointmentDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.seenMessage`: Exposes CRUD operations for the **SeenMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeenMessages
    * const seenMessages = await prisma.seenMessage.findMany()
    * ```
    */
  get seenMessage(): Prisma.SeenMessageDelegate<ExtArgs>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs>;

  /**
   * `prisma.conversationParticipant`: Exposes CRUD operations for the **ConversationParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationParticipants
    * const conversationParticipants = await prisma.conversationParticipant.findMany()
    * ```
    */
  get conversationParticipant(): Prisma.ConversationParticipantDelegate<ExtArgs>;

  /**
   * `prisma.doctor_availability_details`: Exposes CRUD operations for the **doctor_availability_details** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctor_availability_details
    * const doctor_availability_details = await prisma.doctor_availability_details.findMany()
    * ```
    */
  get doctor_availability_details(): Prisma.doctor_availability_detailsDelegate<ExtArgs>;

  /**
   * `prisma.doctor_licenses`: Exposes CRUD operations for the **doctor_licenses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctor_licenses
    * const doctor_licenses = await prisma.doctor_licenses.findMany()
    * ```
    */
  get doctor_licenses(): Prisma.doctor_licensesDelegate<ExtArgs>;

  /**
   * `prisma.doctor_profiles`: Exposes CRUD operations for the **doctor_profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctor_profiles
    * const doctor_profiles = await prisma.doctor_profiles.findMany()
    * ```
    */
  get doctor_profiles(): Prisma.doctor_profilesDelegate<ExtArgs>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.reviewsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    VerificationToken: 'VerificationToken',
    PasswordReset: 'PasswordReset',
    Tracker: 'Tracker',
    Overview: 'Overview',
    HealthMonitoring: 'HealthMonitoring',
    HealthExpected: 'HealthExpected',
    Otp: 'Otp',
    emailOtp: 'emailOtp',
    BookedAppointment: 'BookedAppointment',
    Message: 'Message',
    SeenMessage: 'SeenMessage',
    Conversation: 'Conversation',
    ConversationParticipant: 'ConversationParticipant',
    doctor_availability_details: 'doctor_availability_details',
    doctor_licenses: 'doctor_licenses',
    doctor_profiles: 'doctor_profiles',
    reviews: 'reviews'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "account" | "verificationToken" | "passwordReset" | "tracker" | "overview" | "healthMonitoring" | "healthExpected" | "otp" | "emailOtp" | "bookedAppointment" | "message" | "seenMessage" | "conversation" | "conversationParticipant" | "doctor_availability_details" | "doctor_licenses" | "doctor_profiles" | "reviews"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      Tracker: {
        payload: Prisma.$TrackerPayload<ExtArgs>
        fields: Prisma.TrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>
          }
          findFirst: {
            args: Prisma.TrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>
          }
          findMany: {
            args: Prisma.TrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>[]
          }
          create: {
            args: Prisma.TrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>
          }
          createMany: {
            args: Prisma.TrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>[]
          }
          delete: {
            args: Prisma.TrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>
          }
          update: {
            args: Prisma.TrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>
          }
          deleteMany: {
            args: Prisma.TrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackerPayload>
          }
          aggregate: {
            args: Prisma.TrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTracker>
          }
          groupBy: {
            args: Prisma.TrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrackerCountArgs<ExtArgs>
            result: $Utils.Optional<TrackerCountAggregateOutputType> | number
          }
        }
      }
      Overview: {
        payload: Prisma.$OverviewPayload<ExtArgs>
        fields: Prisma.OverviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OverviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OverviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>
          }
          findFirst: {
            args: Prisma.OverviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OverviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>
          }
          findMany: {
            args: Prisma.OverviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>[]
          }
          create: {
            args: Prisma.OverviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>
          }
          createMany: {
            args: Prisma.OverviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OverviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>[]
          }
          delete: {
            args: Prisma.OverviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>
          }
          update: {
            args: Prisma.OverviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>
          }
          deleteMany: {
            args: Prisma.OverviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OverviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OverviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverviewPayload>
          }
          aggregate: {
            args: Prisma.OverviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOverview>
          }
          groupBy: {
            args: Prisma.OverviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<OverviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.OverviewCountArgs<ExtArgs>
            result: $Utils.Optional<OverviewCountAggregateOutputType> | number
          }
        }
      }
      HealthMonitoring: {
        payload: Prisma.$HealthMonitoringPayload<ExtArgs>
        fields: Prisma.HealthMonitoringFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HealthMonitoringFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HealthMonitoringFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>
          }
          findFirst: {
            args: Prisma.HealthMonitoringFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HealthMonitoringFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>
          }
          findMany: {
            args: Prisma.HealthMonitoringFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>[]
          }
          create: {
            args: Prisma.HealthMonitoringCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>
          }
          createMany: {
            args: Prisma.HealthMonitoringCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HealthMonitoringCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>[]
          }
          delete: {
            args: Prisma.HealthMonitoringDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>
          }
          update: {
            args: Prisma.HealthMonitoringUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>
          }
          deleteMany: {
            args: Prisma.HealthMonitoringDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HealthMonitoringUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HealthMonitoringUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthMonitoringPayload>
          }
          aggregate: {
            args: Prisma.HealthMonitoringAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthMonitoring>
          }
          groupBy: {
            args: Prisma.HealthMonitoringGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthMonitoringGroupByOutputType>[]
          }
          count: {
            args: Prisma.HealthMonitoringCountArgs<ExtArgs>
            result: $Utils.Optional<HealthMonitoringCountAggregateOutputType> | number
          }
        }
      }
      HealthExpected: {
        payload: Prisma.$HealthExpectedPayload<ExtArgs>
        fields: Prisma.HealthExpectedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HealthExpectedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HealthExpectedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>
          }
          findFirst: {
            args: Prisma.HealthExpectedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HealthExpectedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>
          }
          findMany: {
            args: Prisma.HealthExpectedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>[]
          }
          create: {
            args: Prisma.HealthExpectedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>
          }
          createMany: {
            args: Prisma.HealthExpectedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HealthExpectedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>[]
          }
          delete: {
            args: Prisma.HealthExpectedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>
          }
          update: {
            args: Prisma.HealthExpectedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>
          }
          deleteMany: {
            args: Prisma.HealthExpectedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HealthExpectedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HealthExpectedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthExpectedPayload>
          }
          aggregate: {
            args: Prisma.HealthExpectedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthExpected>
          }
          groupBy: {
            args: Prisma.HealthExpectedGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthExpectedGroupByOutputType>[]
          }
          count: {
            args: Prisma.HealthExpectedCountArgs<ExtArgs>
            result: $Utils.Optional<HealthExpectedCountAggregateOutputType> | number
          }
        }
      }
      Otp: {
        payload: Prisma.$OtpPayload<ExtArgs>
        fields: Prisma.OtpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findFirst: {
            args: Prisma.OtpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findMany: {
            args: Prisma.OtpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          create: {
            args: Prisma.OtpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          createMany: {
            args: Prisma.OtpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          delete: {
            args: Prisma.OtpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          update: {
            args: Prisma.OtpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          deleteMany: {
            args: Prisma.OtpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OtpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          aggregate: {
            args: Prisma.OtpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtp>
          }
          groupBy: {
            args: Prisma.OtpGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpCountArgs<ExtArgs>
            result: $Utils.Optional<OtpCountAggregateOutputType> | number
          }
        }
      }
      emailOtp: {
        payload: Prisma.$emailOtpPayload<ExtArgs>
        fields: Prisma.emailOtpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.emailOtpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.emailOtpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>
          }
          findFirst: {
            args: Prisma.emailOtpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.emailOtpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>
          }
          findMany: {
            args: Prisma.emailOtpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>[]
          }
          create: {
            args: Prisma.emailOtpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>
          }
          createMany: {
            args: Prisma.emailOtpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.emailOtpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>[]
          }
          delete: {
            args: Prisma.emailOtpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>
          }
          update: {
            args: Prisma.emailOtpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>
          }
          deleteMany: {
            args: Prisma.emailOtpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.emailOtpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.emailOtpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$emailOtpPayload>
          }
          aggregate: {
            args: Prisma.EmailOtpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailOtp>
          }
          groupBy: {
            args: Prisma.emailOtpGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailOtpGroupByOutputType>[]
          }
          count: {
            args: Prisma.emailOtpCountArgs<ExtArgs>
            result: $Utils.Optional<EmailOtpCountAggregateOutputType> | number
          }
        }
      }
      BookedAppointment: {
        payload: Prisma.$BookedAppointmentPayload<ExtArgs>
        fields: Prisma.BookedAppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookedAppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookedAppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>
          }
          findFirst: {
            args: Prisma.BookedAppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookedAppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>
          }
          findMany: {
            args: Prisma.BookedAppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>[]
          }
          create: {
            args: Prisma.BookedAppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>
          }
          createMany: {
            args: Prisma.BookedAppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookedAppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>[]
          }
          delete: {
            args: Prisma.BookedAppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>
          }
          update: {
            args: Prisma.BookedAppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>
          }
          deleteMany: {
            args: Prisma.BookedAppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookedAppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookedAppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookedAppointmentPayload>
          }
          aggregate: {
            args: Prisma.BookedAppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookedAppointment>
          }
          groupBy: {
            args: Prisma.BookedAppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookedAppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookedAppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<BookedAppointmentCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      SeenMessage: {
        payload: Prisma.$SeenMessagePayload<ExtArgs>
        fields: Prisma.SeenMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeenMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeenMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>
          }
          findFirst: {
            args: Prisma.SeenMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeenMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>
          }
          findMany: {
            args: Prisma.SeenMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>[]
          }
          create: {
            args: Prisma.SeenMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>
          }
          createMany: {
            args: Prisma.SeenMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeenMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>[]
          }
          delete: {
            args: Prisma.SeenMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>
          }
          update: {
            args: Prisma.SeenMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>
          }
          deleteMany: {
            args: Prisma.SeenMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeenMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeenMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeenMessagePayload>
          }
          aggregate: {
            args: Prisma.SeenMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeenMessage>
          }
          groupBy: {
            args: Prisma.SeenMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeenMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeenMessageCountArgs<ExtArgs>
            result: $Utils.Optional<SeenMessageCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: Prisma.$ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          createMany: {
            args: Prisma.ConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConversationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      ConversationParticipant: {
        payload: Prisma.$ConversationParticipantPayload<ExtArgs>
        fields: Prisma.ConversationParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>
          }
          findFirst: {
            args: Prisma.ConversationParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>
          }
          findMany: {
            args: Prisma.ConversationParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>[]
          }
          create: {
            args: Prisma.ConversationParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>
          }
          createMany: {
            args: Prisma.ConversationParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConversationParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>[]
          }
          delete: {
            args: Prisma.ConversationParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>
          }
          update: {
            args: Prisma.ConversationParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>
          }
          deleteMany: {
            args: Prisma.ConversationParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationParticipantPayload>
          }
          aggregate: {
            args: Prisma.ConversationParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversationParticipant>
          }
          groupBy: {
            args: Prisma.ConversationParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationParticipantCountAggregateOutputType> | number
          }
        }
      }
      doctor_availability_details: {
        payload: Prisma.$doctor_availability_detailsPayload<ExtArgs>
        fields: Prisma.doctor_availability_detailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctor_availability_detailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctor_availability_detailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>
          }
          findFirst: {
            args: Prisma.doctor_availability_detailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctor_availability_detailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>
          }
          findMany: {
            args: Prisma.doctor_availability_detailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>[]
          }
          create: {
            args: Prisma.doctor_availability_detailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>
          }
          createMany: {
            args: Prisma.doctor_availability_detailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.doctor_availability_detailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>[]
          }
          delete: {
            args: Prisma.doctor_availability_detailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>
          }
          update: {
            args: Prisma.doctor_availability_detailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>
          }
          deleteMany: {
            args: Prisma.doctor_availability_detailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.doctor_availability_detailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.doctor_availability_detailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_availability_detailsPayload>
          }
          aggregate: {
            args: Prisma.Doctor_availability_detailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor_availability_details>
          }
          groupBy: {
            args: Prisma.doctor_availability_detailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Doctor_availability_detailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctor_availability_detailsCountArgs<ExtArgs>
            result: $Utils.Optional<Doctor_availability_detailsCountAggregateOutputType> | number
          }
        }
      }
      doctor_licenses: {
        payload: Prisma.$doctor_licensesPayload<ExtArgs>
        fields: Prisma.doctor_licensesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctor_licensesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctor_licensesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>
          }
          findFirst: {
            args: Prisma.doctor_licensesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctor_licensesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>
          }
          findMany: {
            args: Prisma.doctor_licensesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>[]
          }
          create: {
            args: Prisma.doctor_licensesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>
          }
          createMany: {
            args: Prisma.doctor_licensesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.doctor_licensesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>[]
          }
          delete: {
            args: Prisma.doctor_licensesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>
          }
          update: {
            args: Prisma.doctor_licensesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>
          }
          deleteMany: {
            args: Prisma.doctor_licensesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.doctor_licensesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.doctor_licensesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_licensesPayload>
          }
          aggregate: {
            args: Prisma.Doctor_licensesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor_licenses>
          }
          groupBy: {
            args: Prisma.doctor_licensesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Doctor_licensesGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctor_licensesCountArgs<ExtArgs>
            result: $Utils.Optional<Doctor_licensesCountAggregateOutputType> | number
          }
        }
      }
      doctor_profiles: {
        payload: Prisma.$doctor_profilesPayload<ExtArgs>
        fields: Prisma.doctor_profilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctor_profilesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctor_profilesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>
          }
          findFirst: {
            args: Prisma.doctor_profilesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctor_profilesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>
          }
          findMany: {
            args: Prisma.doctor_profilesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>[]
          }
          create: {
            args: Prisma.doctor_profilesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>
          }
          createMany: {
            args: Prisma.doctor_profilesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.doctor_profilesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>[]
          }
          delete: {
            args: Prisma.doctor_profilesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>
          }
          update: {
            args: Prisma.doctor_profilesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>
          }
          deleteMany: {
            args: Prisma.doctor_profilesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.doctor_profilesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.doctor_profilesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctor_profilesPayload>
          }
          aggregate: {
            args: Prisma.Doctor_profilesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor_profiles>
          }
          groupBy: {
            args: Prisma.doctor_profilesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Doctor_profilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctor_profilesCountArgs<ExtArgs>
            result: $Utils.Optional<Doctor_profilesCountAggregateOutputType> | number
          }
        }
      }
      reviews: {
        payload: Prisma.$reviewsPayload<ExtArgs>
        fields: Prisma.reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          findFirst: {
            args: Prisma.reviewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          findMany: {
            args: Prisma.reviewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>[]
          }
          create: {
            args: Prisma.reviewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          createMany: {
            args: Prisma.reviewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.reviewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>[]
          }
          delete: {
            args: Prisma.reviewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          update: {
            args: Prisma.reviewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          deleteMany: {
            args: Prisma.reviewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reviewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reviewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          aggregate: {
            args: Prisma.ReviewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviews>
          }
          groupBy: {
            args: Prisma.reviewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewsCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    participants: number
    messages: number
    accounts: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | UserCountOutputTypeCountParticipantsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    seenBy: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seenBy?: boolean | MessageCountOutputTypeCountSeenByArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountSeenByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeenMessageWhereInput
  }


  /**
   * Count Type ConversationCountOutputType
   */

  export type ConversationCountOutputType = {
    participants: number
    messages: number
  }

  export type ConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ConversationCountOutputTypeCountParticipantsArgs
    messages?: boolean | ConversationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     */
    select?: ConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationParticipantWhereInput
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    phone: string | null
    numberVerified: boolean | null
    image: string | null
    about: string | null
    emailVerified: Date | null
    socket_id: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    phone: string | null
    numberVerified: boolean | null
    image: string | null
    about: string | null
    emailVerified: Date | null
    socket_id: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    phone: number
    numberVerified: number
    image: number
    about: number
    emailVerified: number
    socket_id: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    phone?: true
    numberVerified?: true
    image?: true
    about?: true
    emailVerified?: true
    socket_id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    phone?: true
    numberVerified?: true
    image?: true
    about?: true
    emailVerified?: true
    socket_id?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    phone?: true
    numberVerified?: true
    image?: true
    about?: true
    emailVerified?: true
    socket_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole
    phone: string | null
    numberVerified: boolean
    image: string | null
    about: string | null
    emailVerified: Date | null
    socket_id: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    numberVerified?: boolean
    image?: boolean
    about?: boolean
    emailVerified?: boolean
    socket_id?: boolean
    participants?: boolean | User$participantsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    doctor_availability_details?: boolean | User$doctor_availability_detailsArgs<ExtArgs>
    doctor_licenses?: boolean | User$doctor_licensesArgs<ExtArgs>
    doctor_profiles?: boolean | User$doctor_profilesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    numberVerified?: boolean
    image?: boolean
    about?: boolean
    emailVerified?: boolean
    socket_id?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    numberVerified?: boolean
    image?: boolean
    about?: boolean
    emailVerified?: boolean
    socket_id?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | User$participantsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    doctor_availability_details?: boolean | User$doctor_availability_detailsArgs<ExtArgs>
    doctor_licenses?: boolean | User$doctor_licensesArgs<ExtArgs>
    doctor_profiles?: boolean | User$doctor_profilesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      participants: Prisma.$ConversationParticipantPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      doctor_availability_details: Prisma.$doctor_availability_detailsPayload<ExtArgs> | null
      doctor_licenses: Prisma.$doctor_licensesPayload<ExtArgs> | null
      doctor_profiles: Prisma.$doctor_profilesPayload<ExtArgs> | null
      reviews: Prisma.$reviewsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      password: string | null
      role: $Enums.UserRole
      phone: string | null
      numberVerified: boolean
      image: string | null
      about: string | null
      emailVerified: Date | null
      socket_id: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends User$participantsArgs<ExtArgs> = {}>(args?: Subset<T, User$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    doctor_availability_details<T extends User$doctor_availability_detailsArgs<ExtArgs> = {}>(args?: Subset<T, User$doctor_availability_detailsArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    doctor_licenses<T extends User$doctor_licensesArgs<ExtArgs> = {}>(args?: Subset<T, User$doctor_licensesArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    doctor_profiles<T extends User$doctor_profilesArgs<ExtArgs> = {}>(args?: Subset<T, User$doctor_profilesArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly phone: FieldRef<"User", 'String'>
    readonly numberVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly about: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly socket_id: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.participants
   */
  export type User$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    where?: ConversationParticipantWhereInput
    orderBy?: ConversationParticipantOrderByWithRelationInput | ConversationParticipantOrderByWithRelationInput[]
    cursor?: ConversationParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationParticipantScalarFieldEnum | ConversationParticipantScalarFieldEnum[]
  }

  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.doctor_availability_details
   */
  export type User$doctor_availability_detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    where?: doctor_availability_detailsWhereInput
  }

  /**
   * User.doctor_licenses
   */
  export type User$doctor_licensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    where?: doctor_licensesWhereInput
  }

  /**
   * User.doctor_profiles
   */
  export type User$doctor_profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    where?: doctor_profilesWhereInput
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly id: FieldRef<"VerificationToken", 'String'>
    readonly email: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    _all: number
  }


  export type PasswordResetMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }

  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetFindUniqueArgs>(args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PasswordReset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetFindFirstArgs>(args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetFindManyArgs>(args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
     */
    create<T extends PasswordResetCreateArgs>(args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PasswordResets.
     * @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetCreateManyArgs>(args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResets and returns the data saved in the database.
     * @param {PasswordResetCreateManyAndReturnArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResets and only return the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetDeleteArgs>(args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetUpdateArgs>(args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetDeleteManyArgs>(args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetUpdateManyArgs>(args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetUpsertArgs>(args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordReset model
   */ 
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'String'>
    readonly email: FieldRef<"PasswordReset", 'String'>
    readonly token: FieldRef<"PasswordReset", 'String'>
    readonly expires: FieldRef<"PasswordReset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }

  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset createManyAndReturn
   */
  export type PasswordResetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
  }

  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }

  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
  }

  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
  }


  /**
   * Model Tracker
   */

  export type AggregateTracker = {
    _count: TrackerCountAggregateOutputType | null
    _min: TrackerMinAggregateOutputType | null
    _max: TrackerMaxAggregateOutputType | null
  }

  export type TrackerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrackerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrackerCountAggregateOutputType = {
    id: number
    userId: number
    activity: number
    sleep: number
    wellness: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrackerMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrackerMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrackerCountAggregateInputType = {
    id?: true
    userId?: true
    activity?: true
    sleep?: true
    wellness?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tracker to aggregate.
     */
    where?: TrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trackers to fetch.
     */
    orderBy?: TrackerOrderByWithRelationInput | TrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trackers
    **/
    _count?: true | TrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackerMaxAggregateInputType
  }

  export type GetTrackerAggregateType<T extends TrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTracker[P]>
      : GetScalarType<T[P], AggregateTracker[P]>
  }




  export type TrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackerWhereInput
    orderBy?: TrackerOrderByWithAggregationInput | TrackerOrderByWithAggregationInput[]
    by: TrackerScalarFieldEnum[] | TrackerScalarFieldEnum
    having?: TrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackerCountAggregateInputType | true
    _min?: TrackerMinAggregateInputType
    _max?: TrackerMaxAggregateInputType
  }

  export type TrackerGroupByOutputType = {
    id: string
    userId: string
    activity: JsonValue
    sleep: JsonValue
    wellness: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: TrackerCountAggregateOutputType | null
    _min: TrackerMinAggregateOutputType | null
    _max: TrackerMaxAggregateOutputType | null
  }

  type GetTrackerGroupByPayload<T extends TrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackerGroupByOutputType[P]>
            : GetScalarType<T[P], TrackerGroupByOutputType[P]>
        }
      >
    >


  export type TrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activity?: boolean
    sleep?: boolean
    wellness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tracker"]>

  export type TrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activity?: boolean
    sleep?: boolean
    wellness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tracker"]>

  export type TrackerSelectScalar = {
    id?: boolean
    userId?: boolean
    activity?: boolean
    sleep?: boolean
    wellness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $TrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tracker"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      activity: Prisma.JsonValue
      sleep: Prisma.JsonValue
      wellness: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tracker"]>
    composites: {}
  }

  type TrackerGetPayload<S extends boolean | null | undefined | TrackerDefaultArgs> = $Result.GetResult<Prisma.$TrackerPayload, S>

  type TrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrackerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrackerCountAggregateInputType | true
    }

  export interface TrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tracker'], meta: { name: 'Tracker' } }
    /**
     * Find zero or one Tracker that matches the filter.
     * @param {TrackerFindUniqueArgs} args - Arguments to find a Tracker
     * @example
     * // Get one Tracker
     * const tracker = await prisma.tracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrackerFindUniqueArgs>(args: SelectSubset<T, TrackerFindUniqueArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tracker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrackerFindUniqueOrThrowArgs} args - Arguments to find a Tracker
     * @example
     * // Get one Tracker
     * const tracker = await prisma.tracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, TrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerFindFirstArgs} args - Arguments to find a Tracker
     * @example
     * // Get one Tracker
     * const tracker = await prisma.tracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrackerFindFirstArgs>(args?: SelectSubset<T, TrackerFindFirstArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerFindFirstOrThrowArgs} args - Arguments to find a Tracker
     * @example
     * // Get one Tracker
     * const tracker = await prisma.tracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, TrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trackers
     * const trackers = await prisma.tracker.findMany()
     * 
     * // Get first 10 Trackers
     * const trackers = await prisma.tracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackerWithIdOnly = await prisma.tracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrackerFindManyArgs>(args?: SelectSubset<T, TrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tracker.
     * @param {TrackerCreateArgs} args - Arguments to create a Tracker.
     * @example
     * // Create one Tracker
     * const Tracker = await prisma.tracker.create({
     *   data: {
     *     // ... data to create a Tracker
     *   }
     * })
     * 
     */
    create<T extends TrackerCreateArgs>(args: SelectSubset<T, TrackerCreateArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trackers.
     * @param {TrackerCreateManyArgs} args - Arguments to create many Trackers.
     * @example
     * // Create many Trackers
     * const tracker = await prisma.tracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrackerCreateManyArgs>(args?: SelectSubset<T, TrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trackers and returns the data saved in the database.
     * @param {TrackerCreateManyAndReturnArgs} args - Arguments to create many Trackers.
     * @example
     * // Create many Trackers
     * const tracker = await prisma.tracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trackers and only return the `id`
     * const trackerWithIdOnly = await prisma.tracker.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, TrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tracker.
     * @param {TrackerDeleteArgs} args - Arguments to delete one Tracker.
     * @example
     * // Delete one Tracker
     * const Tracker = await prisma.tracker.delete({
     *   where: {
     *     // ... filter to delete one Tracker
     *   }
     * })
     * 
     */
    delete<T extends TrackerDeleteArgs>(args: SelectSubset<T, TrackerDeleteArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tracker.
     * @param {TrackerUpdateArgs} args - Arguments to update one Tracker.
     * @example
     * // Update one Tracker
     * const tracker = await prisma.tracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrackerUpdateArgs>(args: SelectSubset<T, TrackerUpdateArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trackers.
     * @param {TrackerDeleteManyArgs} args - Arguments to filter Trackers to delete.
     * @example
     * // Delete a few Trackers
     * const { count } = await prisma.tracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrackerDeleteManyArgs>(args?: SelectSubset<T, TrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trackers
     * const tracker = await prisma.tracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrackerUpdateManyArgs>(args: SelectSubset<T, TrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tracker.
     * @param {TrackerUpsertArgs} args - Arguments to update or create a Tracker.
     * @example
     * // Update or create a Tracker
     * const tracker = await prisma.tracker.upsert({
     *   create: {
     *     // ... data to create a Tracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tracker we want to update
     *   }
     * })
     */
    upsert<T extends TrackerUpsertArgs>(args: SelectSubset<T, TrackerUpsertArgs<ExtArgs>>): Prisma__TrackerClient<$Result.GetResult<Prisma.$TrackerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerCountArgs} args - Arguments to filter Trackers to count.
     * @example
     * // Count the number of Trackers
     * const count = await prisma.tracker.count({
     *   where: {
     *     // ... the filter for the Trackers we want to count
     *   }
     * })
    **/
    count<T extends TrackerCountArgs>(
      args?: Subset<T, TrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackerAggregateArgs>(args: Subset<T, TrackerAggregateArgs>): Prisma.PrismaPromise<GetTrackerAggregateType<T>>

    /**
     * Group by Tracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrackerGroupByArgs['orderBy'] }
        : { orderBy?: TrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tracker model
   */
  readonly fields: TrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tracker model
   */ 
  interface TrackerFieldRefs {
    readonly id: FieldRef<"Tracker", 'String'>
    readonly userId: FieldRef<"Tracker", 'String'>
    readonly activity: FieldRef<"Tracker", 'Json'>
    readonly sleep: FieldRef<"Tracker", 'Json'>
    readonly wellness: FieldRef<"Tracker", 'Json'>
    readonly createdAt: FieldRef<"Tracker", 'DateTime'>
    readonly updatedAt: FieldRef<"Tracker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tracker findUnique
   */
  export type TrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * Filter, which Tracker to fetch.
     */
    where: TrackerWhereUniqueInput
  }

  /**
   * Tracker findUniqueOrThrow
   */
  export type TrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * Filter, which Tracker to fetch.
     */
    where: TrackerWhereUniqueInput
  }

  /**
   * Tracker findFirst
   */
  export type TrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * Filter, which Tracker to fetch.
     */
    where?: TrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trackers to fetch.
     */
    orderBy?: TrackerOrderByWithRelationInput | TrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trackers.
     */
    cursor?: TrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trackers.
     */
    distinct?: TrackerScalarFieldEnum | TrackerScalarFieldEnum[]
  }

  /**
   * Tracker findFirstOrThrow
   */
  export type TrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * Filter, which Tracker to fetch.
     */
    where?: TrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trackers to fetch.
     */
    orderBy?: TrackerOrderByWithRelationInput | TrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trackers.
     */
    cursor?: TrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trackers.
     */
    distinct?: TrackerScalarFieldEnum | TrackerScalarFieldEnum[]
  }

  /**
   * Tracker findMany
   */
  export type TrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * Filter, which Trackers to fetch.
     */
    where?: TrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trackers to fetch.
     */
    orderBy?: TrackerOrderByWithRelationInput | TrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trackers.
     */
    cursor?: TrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trackers.
     */
    skip?: number
    distinct?: TrackerScalarFieldEnum | TrackerScalarFieldEnum[]
  }

  /**
   * Tracker create
   */
  export type TrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * The data needed to create a Tracker.
     */
    data: XOR<TrackerCreateInput, TrackerUncheckedCreateInput>
  }

  /**
   * Tracker createMany
   */
  export type TrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trackers.
     */
    data: TrackerCreateManyInput | TrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tracker createManyAndReturn
   */
  export type TrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Trackers.
     */
    data: TrackerCreateManyInput | TrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tracker update
   */
  export type TrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * The data needed to update a Tracker.
     */
    data: XOR<TrackerUpdateInput, TrackerUncheckedUpdateInput>
    /**
     * Choose, which Tracker to update.
     */
    where: TrackerWhereUniqueInput
  }

  /**
   * Tracker updateMany
   */
  export type TrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trackers.
     */
    data: XOR<TrackerUpdateManyMutationInput, TrackerUncheckedUpdateManyInput>
    /**
     * Filter which Trackers to update
     */
    where?: TrackerWhereInput
  }

  /**
   * Tracker upsert
   */
  export type TrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * The filter to search for the Tracker to update in case it exists.
     */
    where: TrackerWhereUniqueInput
    /**
     * In case the Tracker found by the `where` argument doesn't exist, create a new Tracker with this data.
     */
    create: XOR<TrackerCreateInput, TrackerUncheckedCreateInput>
    /**
     * In case the Tracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrackerUpdateInput, TrackerUncheckedUpdateInput>
  }

  /**
   * Tracker delete
   */
  export type TrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
    /**
     * Filter which Tracker to delete.
     */
    where: TrackerWhereUniqueInput
  }

  /**
   * Tracker deleteMany
   */
  export type TrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trackers to delete
     */
    where?: TrackerWhereInput
  }

  /**
   * Tracker without action
   */
  export type TrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tracker
     */
    select?: TrackerSelect<ExtArgs> | null
  }


  /**
   * Model Overview
   */

  export type AggregateOverview = {
    _count: OverviewCountAggregateOutputType | null
    _min: OverviewMinAggregateOutputType | null
    _max: OverviewMaxAggregateOutputType | null
  }

  export type OverviewMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type OverviewMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type OverviewCountAggregateOutputType = {
    id: number
    userId: number
    report: number
    _all: number
  }


  export type OverviewMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OverviewMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OverviewCountAggregateInputType = {
    id?: true
    userId?: true
    report?: true
    _all?: true
  }

  export type OverviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Overview to aggregate.
     */
    where?: OverviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Overviews to fetch.
     */
    orderBy?: OverviewOrderByWithRelationInput | OverviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OverviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Overviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Overviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Overviews
    **/
    _count?: true | OverviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OverviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OverviewMaxAggregateInputType
  }

  export type GetOverviewAggregateType<T extends OverviewAggregateArgs> = {
        [P in keyof T & keyof AggregateOverview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOverview[P]>
      : GetScalarType<T[P], AggregateOverview[P]>
  }




  export type OverviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OverviewWhereInput
    orderBy?: OverviewOrderByWithAggregationInput | OverviewOrderByWithAggregationInput[]
    by: OverviewScalarFieldEnum[] | OverviewScalarFieldEnum
    having?: OverviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OverviewCountAggregateInputType | true
    _min?: OverviewMinAggregateInputType
    _max?: OverviewMaxAggregateInputType
  }

  export type OverviewGroupByOutputType = {
    id: string
    userId: string
    report: JsonValue[]
    _count: OverviewCountAggregateOutputType | null
    _min: OverviewMinAggregateOutputType | null
    _max: OverviewMaxAggregateOutputType | null
  }

  type GetOverviewGroupByPayload<T extends OverviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OverviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OverviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OverviewGroupByOutputType[P]>
            : GetScalarType<T[P], OverviewGroupByOutputType[P]>
        }
      >
    >


  export type OverviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    report?: boolean
  }, ExtArgs["result"]["overview"]>

  export type OverviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    report?: boolean
  }, ExtArgs["result"]["overview"]>

  export type OverviewSelectScalar = {
    id?: boolean
    userId?: boolean
    report?: boolean
  }


  export type $OverviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Overview"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      report: Prisma.JsonValue[]
    }, ExtArgs["result"]["overview"]>
    composites: {}
  }

  type OverviewGetPayload<S extends boolean | null | undefined | OverviewDefaultArgs> = $Result.GetResult<Prisma.$OverviewPayload, S>

  type OverviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OverviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OverviewCountAggregateInputType | true
    }

  export interface OverviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Overview'], meta: { name: 'Overview' } }
    /**
     * Find zero or one Overview that matches the filter.
     * @param {OverviewFindUniqueArgs} args - Arguments to find a Overview
     * @example
     * // Get one Overview
     * const overview = await prisma.overview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OverviewFindUniqueArgs>(args: SelectSubset<T, OverviewFindUniqueArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Overview that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OverviewFindUniqueOrThrowArgs} args - Arguments to find a Overview
     * @example
     * // Get one Overview
     * const overview = await prisma.overview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OverviewFindUniqueOrThrowArgs>(args: SelectSubset<T, OverviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Overview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewFindFirstArgs} args - Arguments to find a Overview
     * @example
     * // Get one Overview
     * const overview = await prisma.overview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OverviewFindFirstArgs>(args?: SelectSubset<T, OverviewFindFirstArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Overview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewFindFirstOrThrowArgs} args - Arguments to find a Overview
     * @example
     * // Get one Overview
     * const overview = await prisma.overview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OverviewFindFirstOrThrowArgs>(args?: SelectSubset<T, OverviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Overviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Overviews
     * const overviews = await prisma.overview.findMany()
     * 
     * // Get first 10 Overviews
     * const overviews = await prisma.overview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const overviewWithIdOnly = await prisma.overview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OverviewFindManyArgs>(args?: SelectSubset<T, OverviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Overview.
     * @param {OverviewCreateArgs} args - Arguments to create a Overview.
     * @example
     * // Create one Overview
     * const Overview = await prisma.overview.create({
     *   data: {
     *     // ... data to create a Overview
     *   }
     * })
     * 
     */
    create<T extends OverviewCreateArgs>(args: SelectSubset<T, OverviewCreateArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Overviews.
     * @param {OverviewCreateManyArgs} args - Arguments to create many Overviews.
     * @example
     * // Create many Overviews
     * const overview = await prisma.overview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OverviewCreateManyArgs>(args?: SelectSubset<T, OverviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Overviews and returns the data saved in the database.
     * @param {OverviewCreateManyAndReturnArgs} args - Arguments to create many Overviews.
     * @example
     * // Create many Overviews
     * const overview = await prisma.overview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Overviews and only return the `id`
     * const overviewWithIdOnly = await prisma.overview.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OverviewCreateManyAndReturnArgs>(args?: SelectSubset<T, OverviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Overview.
     * @param {OverviewDeleteArgs} args - Arguments to delete one Overview.
     * @example
     * // Delete one Overview
     * const Overview = await prisma.overview.delete({
     *   where: {
     *     // ... filter to delete one Overview
     *   }
     * })
     * 
     */
    delete<T extends OverviewDeleteArgs>(args: SelectSubset<T, OverviewDeleteArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Overview.
     * @param {OverviewUpdateArgs} args - Arguments to update one Overview.
     * @example
     * // Update one Overview
     * const overview = await prisma.overview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OverviewUpdateArgs>(args: SelectSubset<T, OverviewUpdateArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Overviews.
     * @param {OverviewDeleteManyArgs} args - Arguments to filter Overviews to delete.
     * @example
     * // Delete a few Overviews
     * const { count } = await prisma.overview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OverviewDeleteManyArgs>(args?: SelectSubset<T, OverviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Overviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Overviews
     * const overview = await prisma.overview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OverviewUpdateManyArgs>(args: SelectSubset<T, OverviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Overview.
     * @param {OverviewUpsertArgs} args - Arguments to update or create a Overview.
     * @example
     * // Update or create a Overview
     * const overview = await prisma.overview.upsert({
     *   create: {
     *     // ... data to create a Overview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Overview we want to update
     *   }
     * })
     */
    upsert<T extends OverviewUpsertArgs>(args: SelectSubset<T, OverviewUpsertArgs<ExtArgs>>): Prisma__OverviewClient<$Result.GetResult<Prisma.$OverviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Overviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewCountArgs} args - Arguments to filter Overviews to count.
     * @example
     * // Count the number of Overviews
     * const count = await prisma.overview.count({
     *   where: {
     *     // ... the filter for the Overviews we want to count
     *   }
     * })
    **/
    count<T extends OverviewCountArgs>(
      args?: Subset<T, OverviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OverviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Overview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OverviewAggregateArgs>(args: Subset<T, OverviewAggregateArgs>): Prisma.PrismaPromise<GetOverviewAggregateType<T>>

    /**
     * Group by Overview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OverviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OverviewGroupByArgs['orderBy'] }
        : { orderBy?: OverviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OverviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOverviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Overview model
   */
  readonly fields: OverviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Overview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OverviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Overview model
   */ 
  interface OverviewFieldRefs {
    readonly id: FieldRef<"Overview", 'String'>
    readonly userId: FieldRef<"Overview", 'String'>
    readonly report: FieldRef<"Overview", 'Json[]'>
  }
    

  // Custom InputTypes
  /**
   * Overview findUnique
   */
  export type OverviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * Filter, which Overview to fetch.
     */
    where: OverviewWhereUniqueInput
  }

  /**
   * Overview findUniqueOrThrow
   */
  export type OverviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * Filter, which Overview to fetch.
     */
    where: OverviewWhereUniqueInput
  }

  /**
   * Overview findFirst
   */
  export type OverviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * Filter, which Overview to fetch.
     */
    where?: OverviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Overviews to fetch.
     */
    orderBy?: OverviewOrderByWithRelationInput | OverviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Overviews.
     */
    cursor?: OverviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Overviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Overviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Overviews.
     */
    distinct?: OverviewScalarFieldEnum | OverviewScalarFieldEnum[]
  }

  /**
   * Overview findFirstOrThrow
   */
  export type OverviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * Filter, which Overview to fetch.
     */
    where?: OverviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Overviews to fetch.
     */
    orderBy?: OverviewOrderByWithRelationInput | OverviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Overviews.
     */
    cursor?: OverviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Overviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Overviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Overviews.
     */
    distinct?: OverviewScalarFieldEnum | OverviewScalarFieldEnum[]
  }

  /**
   * Overview findMany
   */
  export type OverviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * Filter, which Overviews to fetch.
     */
    where?: OverviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Overviews to fetch.
     */
    orderBy?: OverviewOrderByWithRelationInput | OverviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Overviews.
     */
    cursor?: OverviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Overviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Overviews.
     */
    skip?: number
    distinct?: OverviewScalarFieldEnum | OverviewScalarFieldEnum[]
  }

  /**
   * Overview create
   */
  export type OverviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * The data needed to create a Overview.
     */
    data: XOR<OverviewCreateInput, OverviewUncheckedCreateInput>
  }

  /**
   * Overview createMany
   */
  export type OverviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Overviews.
     */
    data: OverviewCreateManyInput | OverviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Overview createManyAndReturn
   */
  export type OverviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Overviews.
     */
    data: OverviewCreateManyInput | OverviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Overview update
   */
  export type OverviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * The data needed to update a Overview.
     */
    data: XOR<OverviewUpdateInput, OverviewUncheckedUpdateInput>
    /**
     * Choose, which Overview to update.
     */
    where: OverviewWhereUniqueInput
  }

  /**
   * Overview updateMany
   */
  export type OverviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Overviews.
     */
    data: XOR<OverviewUpdateManyMutationInput, OverviewUncheckedUpdateManyInput>
    /**
     * Filter which Overviews to update
     */
    where?: OverviewWhereInput
  }

  /**
   * Overview upsert
   */
  export type OverviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * The filter to search for the Overview to update in case it exists.
     */
    where: OverviewWhereUniqueInput
    /**
     * In case the Overview found by the `where` argument doesn't exist, create a new Overview with this data.
     */
    create: XOR<OverviewCreateInput, OverviewUncheckedCreateInput>
    /**
     * In case the Overview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OverviewUpdateInput, OverviewUncheckedUpdateInput>
  }

  /**
   * Overview delete
   */
  export type OverviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
    /**
     * Filter which Overview to delete.
     */
    where: OverviewWhereUniqueInput
  }

  /**
   * Overview deleteMany
   */
  export type OverviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Overviews to delete
     */
    where?: OverviewWhereInput
  }

  /**
   * Overview without action
   */
  export type OverviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Overview
     */
    select?: OverviewSelect<ExtArgs> | null
  }


  /**
   * Model HealthMonitoring
   */

  export type AggregateHealthMonitoring = {
    _count: HealthMonitoringCountAggregateOutputType | null
    _min: HealthMonitoringMinAggregateOutputType | null
    _max: HealthMonitoringMaxAggregateOutputType | null
  }

  export type HealthMonitoringMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HealthMonitoringMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HealthMonitoringCountAggregateOutputType = {
    id: number
    userId: number
    monthly_monitoring: number
    weekly_monitoring: number
    daily_monitoring: number
    _all: number
  }


  export type HealthMonitoringMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HealthMonitoringMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HealthMonitoringCountAggregateInputType = {
    id?: true
    userId?: true
    monthly_monitoring?: true
    weekly_monitoring?: true
    daily_monitoring?: true
    _all?: true
  }

  export type HealthMonitoringAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthMonitoring to aggregate.
     */
    where?: HealthMonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthMonitorings to fetch.
     */
    orderBy?: HealthMonitoringOrderByWithRelationInput | HealthMonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HealthMonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthMonitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthMonitorings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthMonitorings
    **/
    _count?: true | HealthMonitoringCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthMonitoringMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthMonitoringMaxAggregateInputType
  }

  export type GetHealthMonitoringAggregateType<T extends HealthMonitoringAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthMonitoring]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthMonitoring[P]>
      : GetScalarType<T[P], AggregateHealthMonitoring[P]>
  }




  export type HealthMonitoringGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthMonitoringWhereInput
    orderBy?: HealthMonitoringOrderByWithAggregationInput | HealthMonitoringOrderByWithAggregationInput[]
    by: HealthMonitoringScalarFieldEnum[] | HealthMonitoringScalarFieldEnum
    having?: HealthMonitoringScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthMonitoringCountAggregateInputType | true
    _min?: HealthMonitoringMinAggregateInputType
    _max?: HealthMonitoringMaxAggregateInputType
  }

  export type HealthMonitoringGroupByOutputType = {
    id: string
    userId: string
    monthly_monitoring: JsonValue
    weekly_monitoring: JsonValue
    daily_monitoring: JsonValue
    _count: HealthMonitoringCountAggregateOutputType | null
    _min: HealthMonitoringMinAggregateOutputType | null
    _max: HealthMonitoringMaxAggregateOutputType | null
  }

  type GetHealthMonitoringGroupByPayload<T extends HealthMonitoringGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthMonitoringGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthMonitoringGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthMonitoringGroupByOutputType[P]>
            : GetScalarType<T[P], HealthMonitoringGroupByOutputType[P]>
        }
      >
    >


  export type HealthMonitoringSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    monthly_monitoring?: boolean
    weekly_monitoring?: boolean
    daily_monitoring?: boolean
  }, ExtArgs["result"]["healthMonitoring"]>

  export type HealthMonitoringSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    monthly_monitoring?: boolean
    weekly_monitoring?: boolean
    daily_monitoring?: boolean
  }, ExtArgs["result"]["healthMonitoring"]>

  export type HealthMonitoringSelectScalar = {
    id?: boolean
    userId?: boolean
    monthly_monitoring?: boolean
    weekly_monitoring?: boolean
    daily_monitoring?: boolean
  }


  export type $HealthMonitoringPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HealthMonitoring"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      monthly_monitoring: Prisma.JsonValue
      weekly_monitoring: Prisma.JsonValue
      daily_monitoring: Prisma.JsonValue
    }, ExtArgs["result"]["healthMonitoring"]>
    composites: {}
  }

  type HealthMonitoringGetPayload<S extends boolean | null | undefined | HealthMonitoringDefaultArgs> = $Result.GetResult<Prisma.$HealthMonitoringPayload, S>

  type HealthMonitoringCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HealthMonitoringFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HealthMonitoringCountAggregateInputType | true
    }

  export interface HealthMonitoringDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthMonitoring'], meta: { name: 'HealthMonitoring' } }
    /**
     * Find zero or one HealthMonitoring that matches the filter.
     * @param {HealthMonitoringFindUniqueArgs} args - Arguments to find a HealthMonitoring
     * @example
     * // Get one HealthMonitoring
     * const healthMonitoring = await prisma.healthMonitoring.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HealthMonitoringFindUniqueArgs>(args: SelectSubset<T, HealthMonitoringFindUniqueArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HealthMonitoring that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HealthMonitoringFindUniqueOrThrowArgs} args - Arguments to find a HealthMonitoring
     * @example
     * // Get one HealthMonitoring
     * const healthMonitoring = await prisma.healthMonitoring.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HealthMonitoringFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthMonitoringFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HealthMonitoring that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringFindFirstArgs} args - Arguments to find a HealthMonitoring
     * @example
     * // Get one HealthMonitoring
     * const healthMonitoring = await prisma.healthMonitoring.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HealthMonitoringFindFirstArgs>(args?: SelectSubset<T, HealthMonitoringFindFirstArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HealthMonitoring that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringFindFirstOrThrowArgs} args - Arguments to find a HealthMonitoring
     * @example
     * // Get one HealthMonitoring
     * const healthMonitoring = await prisma.healthMonitoring.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HealthMonitoringFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthMonitoringFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HealthMonitorings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthMonitorings
     * const healthMonitorings = await prisma.healthMonitoring.findMany()
     * 
     * // Get first 10 HealthMonitorings
     * const healthMonitorings = await prisma.healthMonitoring.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const healthMonitoringWithIdOnly = await prisma.healthMonitoring.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HealthMonitoringFindManyArgs>(args?: SelectSubset<T, HealthMonitoringFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HealthMonitoring.
     * @param {HealthMonitoringCreateArgs} args - Arguments to create a HealthMonitoring.
     * @example
     * // Create one HealthMonitoring
     * const HealthMonitoring = await prisma.healthMonitoring.create({
     *   data: {
     *     // ... data to create a HealthMonitoring
     *   }
     * })
     * 
     */
    create<T extends HealthMonitoringCreateArgs>(args: SelectSubset<T, HealthMonitoringCreateArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HealthMonitorings.
     * @param {HealthMonitoringCreateManyArgs} args - Arguments to create many HealthMonitorings.
     * @example
     * // Create many HealthMonitorings
     * const healthMonitoring = await prisma.healthMonitoring.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HealthMonitoringCreateManyArgs>(args?: SelectSubset<T, HealthMonitoringCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HealthMonitorings and returns the data saved in the database.
     * @param {HealthMonitoringCreateManyAndReturnArgs} args - Arguments to create many HealthMonitorings.
     * @example
     * // Create many HealthMonitorings
     * const healthMonitoring = await prisma.healthMonitoring.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HealthMonitorings and only return the `id`
     * const healthMonitoringWithIdOnly = await prisma.healthMonitoring.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HealthMonitoringCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthMonitoringCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HealthMonitoring.
     * @param {HealthMonitoringDeleteArgs} args - Arguments to delete one HealthMonitoring.
     * @example
     * // Delete one HealthMonitoring
     * const HealthMonitoring = await prisma.healthMonitoring.delete({
     *   where: {
     *     // ... filter to delete one HealthMonitoring
     *   }
     * })
     * 
     */
    delete<T extends HealthMonitoringDeleteArgs>(args: SelectSubset<T, HealthMonitoringDeleteArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HealthMonitoring.
     * @param {HealthMonitoringUpdateArgs} args - Arguments to update one HealthMonitoring.
     * @example
     * // Update one HealthMonitoring
     * const healthMonitoring = await prisma.healthMonitoring.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HealthMonitoringUpdateArgs>(args: SelectSubset<T, HealthMonitoringUpdateArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HealthMonitorings.
     * @param {HealthMonitoringDeleteManyArgs} args - Arguments to filter HealthMonitorings to delete.
     * @example
     * // Delete a few HealthMonitorings
     * const { count } = await prisma.healthMonitoring.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HealthMonitoringDeleteManyArgs>(args?: SelectSubset<T, HealthMonitoringDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthMonitorings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthMonitorings
     * const healthMonitoring = await prisma.healthMonitoring.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HealthMonitoringUpdateManyArgs>(args: SelectSubset<T, HealthMonitoringUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HealthMonitoring.
     * @param {HealthMonitoringUpsertArgs} args - Arguments to update or create a HealthMonitoring.
     * @example
     * // Update or create a HealthMonitoring
     * const healthMonitoring = await prisma.healthMonitoring.upsert({
     *   create: {
     *     // ... data to create a HealthMonitoring
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthMonitoring we want to update
     *   }
     * })
     */
    upsert<T extends HealthMonitoringUpsertArgs>(args: SelectSubset<T, HealthMonitoringUpsertArgs<ExtArgs>>): Prisma__HealthMonitoringClient<$Result.GetResult<Prisma.$HealthMonitoringPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HealthMonitorings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringCountArgs} args - Arguments to filter HealthMonitorings to count.
     * @example
     * // Count the number of HealthMonitorings
     * const count = await prisma.healthMonitoring.count({
     *   where: {
     *     // ... the filter for the HealthMonitorings we want to count
     *   }
     * })
    **/
    count<T extends HealthMonitoringCountArgs>(
      args?: Subset<T, HealthMonitoringCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthMonitoringCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthMonitoring.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthMonitoringAggregateArgs>(args: Subset<T, HealthMonitoringAggregateArgs>): Prisma.PrismaPromise<GetHealthMonitoringAggregateType<T>>

    /**
     * Group by HealthMonitoring.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthMonitoringGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthMonitoringGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthMonitoringGroupByArgs['orderBy'] }
        : { orderBy?: HealthMonitoringGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthMonitoringGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthMonitoringGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HealthMonitoring model
   */
  readonly fields: HealthMonitoringFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthMonitoring.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HealthMonitoringClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HealthMonitoring model
   */ 
  interface HealthMonitoringFieldRefs {
    readonly id: FieldRef<"HealthMonitoring", 'String'>
    readonly userId: FieldRef<"HealthMonitoring", 'String'>
    readonly monthly_monitoring: FieldRef<"HealthMonitoring", 'Json'>
    readonly weekly_monitoring: FieldRef<"HealthMonitoring", 'Json'>
    readonly daily_monitoring: FieldRef<"HealthMonitoring", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * HealthMonitoring findUnique
   */
  export type HealthMonitoringFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * Filter, which HealthMonitoring to fetch.
     */
    where: HealthMonitoringWhereUniqueInput
  }

  /**
   * HealthMonitoring findUniqueOrThrow
   */
  export type HealthMonitoringFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * Filter, which HealthMonitoring to fetch.
     */
    where: HealthMonitoringWhereUniqueInput
  }

  /**
   * HealthMonitoring findFirst
   */
  export type HealthMonitoringFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * Filter, which HealthMonitoring to fetch.
     */
    where?: HealthMonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthMonitorings to fetch.
     */
    orderBy?: HealthMonitoringOrderByWithRelationInput | HealthMonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthMonitorings.
     */
    cursor?: HealthMonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthMonitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthMonitorings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthMonitorings.
     */
    distinct?: HealthMonitoringScalarFieldEnum | HealthMonitoringScalarFieldEnum[]
  }

  /**
   * HealthMonitoring findFirstOrThrow
   */
  export type HealthMonitoringFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * Filter, which HealthMonitoring to fetch.
     */
    where?: HealthMonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthMonitorings to fetch.
     */
    orderBy?: HealthMonitoringOrderByWithRelationInput | HealthMonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthMonitorings.
     */
    cursor?: HealthMonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthMonitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthMonitorings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthMonitorings.
     */
    distinct?: HealthMonitoringScalarFieldEnum | HealthMonitoringScalarFieldEnum[]
  }

  /**
   * HealthMonitoring findMany
   */
  export type HealthMonitoringFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * Filter, which HealthMonitorings to fetch.
     */
    where?: HealthMonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthMonitorings to fetch.
     */
    orderBy?: HealthMonitoringOrderByWithRelationInput | HealthMonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthMonitorings.
     */
    cursor?: HealthMonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthMonitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthMonitorings.
     */
    skip?: number
    distinct?: HealthMonitoringScalarFieldEnum | HealthMonitoringScalarFieldEnum[]
  }

  /**
   * HealthMonitoring create
   */
  export type HealthMonitoringCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * The data needed to create a HealthMonitoring.
     */
    data: XOR<HealthMonitoringCreateInput, HealthMonitoringUncheckedCreateInput>
  }

  /**
   * HealthMonitoring createMany
   */
  export type HealthMonitoringCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HealthMonitorings.
     */
    data: HealthMonitoringCreateManyInput | HealthMonitoringCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthMonitoring createManyAndReturn
   */
  export type HealthMonitoringCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HealthMonitorings.
     */
    data: HealthMonitoringCreateManyInput | HealthMonitoringCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthMonitoring update
   */
  export type HealthMonitoringUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * The data needed to update a HealthMonitoring.
     */
    data: XOR<HealthMonitoringUpdateInput, HealthMonitoringUncheckedUpdateInput>
    /**
     * Choose, which HealthMonitoring to update.
     */
    where: HealthMonitoringWhereUniqueInput
  }

  /**
   * HealthMonitoring updateMany
   */
  export type HealthMonitoringUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HealthMonitorings.
     */
    data: XOR<HealthMonitoringUpdateManyMutationInput, HealthMonitoringUncheckedUpdateManyInput>
    /**
     * Filter which HealthMonitorings to update
     */
    where?: HealthMonitoringWhereInput
  }

  /**
   * HealthMonitoring upsert
   */
  export type HealthMonitoringUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * The filter to search for the HealthMonitoring to update in case it exists.
     */
    where: HealthMonitoringWhereUniqueInput
    /**
     * In case the HealthMonitoring found by the `where` argument doesn't exist, create a new HealthMonitoring with this data.
     */
    create: XOR<HealthMonitoringCreateInput, HealthMonitoringUncheckedCreateInput>
    /**
     * In case the HealthMonitoring was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HealthMonitoringUpdateInput, HealthMonitoringUncheckedUpdateInput>
  }

  /**
   * HealthMonitoring delete
   */
  export type HealthMonitoringDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
    /**
     * Filter which HealthMonitoring to delete.
     */
    where: HealthMonitoringWhereUniqueInput
  }

  /**
   * HealthMonitoring deleteMany
   */
  export type HealthMonitoringDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthMonitorings to delete
     */
    where?: HealthMonitoringWhereInput
  }

  /**
   * HealthMonitoring without action
   */
  export type HealthMonitoringDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthMonitoring
     */
    select?: HealthMonitoringSelect<ExtArgs> | null
  }


  /**
   * Model HealthExpected
   */

  export type AggregateHealthExpected = {
    _count: HealthExpectedCountAggregateOutputType | null
    _min: HealthExpectedMinAggregateOutputType | null
    _max: HealthExpectedMaxAggregateOutputType | null
  }

  export type HealthExpectedMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HealthExpectedMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HealthExpectedCountAggregateOutputType = {
    id: number
    userId: number
    report: number
    _all: number
  }


  export type HealthExpectedMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HealthExpectedMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HealthExpectedCountAggregateInputType = {
    id?: true
    userId?: true
    report?: true
    _all?: true
  }

  export type HealthExpectedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthExpected to aggregate.
     */
    where?: HealthExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthExpecteds to fetch.
     */
    orderBy?: HealthExpectedOrderByWithRelationInput | HealthExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HealthExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthExpecteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthExpecteds
    **/
    _count?: true | HealthExpectedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthExpectedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthExpectedMaxAggregateInputType
  }

  export type GetHealthExpectedAggregateType<T extends HealthExpectedAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthExpected]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthExpected[P]>
      : GetScalarType<T[P], AggregateHealthExpected[P]>
  }




  export type HealthExpectedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthExpectedWhereInput
    orderBy?: HealthExpectedOrderByWithAggregationInput | HealthExpectedOrderByWithAggregationInput[]
    by: HealthExpectedScalarFieldEnum[] | HealthExpectedScalarFieldEnum
    having?: HealthExpectedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthExpectedCountAggregateInputType | true
    _min?: HealthExpectedMinAggregateInputType
    _max?: HealthExpectedMaxAggregateInputType
  }

  export type HealthExpectedGroupByOutputType = {
    id: string
    userId: string
    report: JsonValue[]
    _count: HealthExpectedCountAggregateOutputType | null
    _min: HealthExpectedMinAggregateOutputType | null
    _max: HealthExpectedMaxAggregateOutputType | null
  }

  type GetHealthExpectedGroupByPayload<T extends HealthExpectedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthExpectedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthExpectedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthExpectedGroupByOutputType[P]>
            : GetScalarType<T[P], HealthExpectedGroupByOutputType[P]>
        }
      >
    >


  export type HealthExpectedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    report?: boolean
  }, ExtArgs["result"]["healthExpected"]>

  export type HealthExpectedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    report?: boolean
  }, ExtArgs["result"]["healthExpected"]>

  export type HealthExpectedSelectScalar = {
    id?: boolean
    userId?: boolean
    report?: boolean
  }


  export type $HealthExpectedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HealthExpected"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      report: Prisma.JsonValue[]
    }, ExtArgs["result"]["healthExpected"]>
    composites: {}
  }

  type HealthExpectedGetPayload<S extends boolean | null | undefined | HealthExpectedDefaultArgs> = $Result.GetResult<Prisma.$HealthExpectedPayload, S>

  type HealthExpectedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HealthExpectedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HealthExpectedCountAggregateInputType | true
    }

  export interface HealthExpectedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthExpected'], meta: { name: 'HealthExpected' } }
    /**
     * Find zero or one HealthExpected that matches the filter.
     * @param {HealthExpectedFindUniqueArgs} args - Arguments to find a HealthExpected
     * @example
     * // Get one HealthExpected
     * const healthExpected = await prisma.healthExpected.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HealthExpectedFindUniqueArgs>(args: SelectSubset<T, HealthExpectedFindUniqueArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HealthExpected that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HealthExpectedFindUniqueOrThrowArgs} args - Arguments to find a HealthExpected
     * @example
     * // Get one HealthExpected
     * const healthExpected = await prisma.healthExpected.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HealthExpectedFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthExpectedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HealthExpected that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedFindFirstArgs} args - Arguments to find a HealthExpected
     * @example
     * // Get one HealthExpected
     * const healthExpected = await prisma.healthExpected.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HealthExpectedFindFirstArgs>(args?: SelectSubset<T, HealthExpectedFindFirstArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HealthExpected that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedFindFirstOrThrowArgs} args - Arguments to find a HealthExpected
     * @example
     * // Get one HealthExpected
     * const healthExpected = await prisma.healthExpected.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HealthExpectedFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthExpectedFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HealthExpecteds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthExpecteds
     * const healthExpecteds = await prisma.healthExpected.findMany()
     * 
     * // Get first 10 HealthExpecteds
     * const healthExpecteds = await prisma.healthExpected.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const healthExpectedWithIdOnly = await prisma.healthExpected.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HealthExpectedFindManyArgs>(args?: SelectSubset<T, HealthExpectedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HealthExpected.
     * @param {HealthExpectedCreateArgs} args - Arguments to create a HealthExpected.
     * @example
     * // Create one HealthExpected
     * const HealthExpected = await prisma.healthExpected.create({
     *   data: {
     *     // ... data to create a HealthExpected
     *   }
     * })
     * 
     */
    create<T extends HealthExpectedCreateArgs>(args: SelectSubset<T, HealthExpectedCreateArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HealthExpecteds.
     * @param {HealthExpectedCreateManyArgs} args - Arguments to create many HealthExpecteds.
     * @example
     * // Create many HealthExpecteds
     * const healthExpected = await prisma.healthExpected.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HealthExpectedCreateManyArgs>(args?: SelectSubset<T, HealthExpectedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HealthExpecteds and returns the data saved in the database.
     * @param {HealthExpectedCreateManyAndReturnArgs} args - Arguments to create many HealthExpecteds.
     * @example
     * // Create many HealthExpecteds
     * const healthExpected = await prisma.healthExpected.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HealthExpecteds and only return the `id`
     * const healthExpectedWithIdOnly = await prisma.healthExpected.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HealthExpectedCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthExpectedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HealthExpected.
     * @param {HealthExpectedDeleteArgs} args - Arguments to delete one HealthExpected.
     * @example
     * // Delete one HealthExpected
     * const HealthExpected = await prisma.healthExpected.delete({
     *   where: {
     *     // ... filter to delete one HealthExpected
     *   }
     * })
     * 
     */
    delete<T extends HealthExpectedDeleteArgs>(args: SelectSubset<T, HealthExpectedDeleteArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HealthExpected.
     * @param {HealthExpectedUpdateArgs} args - Arguments to update one HealthExpected.
     * @example
     * // Update one HealthExpected
     * const healthExpected = await prisma.healthExpected.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HealthExpectedUpdateArgs>(args: SelectSubset<T, HealthExpectedUpdateArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HealthExpecteds.
     * @param {HealthExpectedDeleteManyArgs} args - Arguments to filter HealthExpecteds to delete.
     * @example
     * // Delete a few HealthExpecteds
     * const { count } = await prisma.healthExpected.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HealthExpectedDeleteManyArgs>(args?: SelectSubset<T, HealthExpectedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthExpecteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthExpecteds
     * const healthExpected = await prisma.healthExpected.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HealthExpectedUpdateManyArgs>(args: SelectSubset<T, HealthExpectedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HealthExpected.
     * @param {HealthExpectedUpsertArgs} args - Arguments to update or create a HealthExpected.
     * @example
     * // Update or create a HealthExpected
     * const healthExpected = await prisma.healthExpected.upsert({
     *   create: {
     *     // ... data to create a HealthExpected
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthExpected we want to update
     *   }
     * })
     */
    upsert<T extends HealthExpectedUpsertArgs>(args: SelectSubset<T, HealthExpectedUpsertArgs<ExtArgs>>): Prisma__HealthExpectedClient<$Result.GetResult<Prisma.$HealthExpectedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HealthExpecteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedCountArgs} args - Arguments to filter HealthExpecteds to count.
     * @example
     * // Count the number of HealthExpecteds
     * const count = await prisma.healthExpected.count({
     *   where: {
     *     // ... the filter for the HealthExpecteds we want to count
     *   }
     * })
    **/
    count<T extends HealthExpectedCountArgs>(
      args?: Subset<T, HealthExpectedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthExpectedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthExpected.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthExpectedAggregateArgs>(args: Subset<T, HealthExpectedAggregateArgs>): Prisma.PrismaPromise<GetHealthExpectedAggregateType<T>>

    /**
     * Group by HealthExpected.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthExpectedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthExpectedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthExpectedGroupByArgs['orderBy'] }
        : { orderBy?: HealthExpectedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthExpectedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthExpectedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HealthExpected model
   */
  readonly fields: HealthExpectedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthExpected.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HealthExpectedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HealthExpected model
   */ 
  interface HealthExpectedFieldRefs {
    readonly id: FieldRef<"HealthExpected", 'String'>
    readonly userId: FieldRef<"HealthExpected", 'String'>
    readonly report: FieldRef<"HealthExpected", 'Json[]'>
  }
    

  // Custom InputTypes
  /**
   * HealthExpected findUnique
   */
  export type HealthExpectedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * Filter, which HealthExpected to fetch.
     */
    where: HealthExpectedWhereUniqueInput
  }

  /**
   * HealthExpected findUniqueOrThrow
   */
  export type HealthExpectedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * Filter, which HealthExpected to fetch.
     */
    where: HealthExpectedWhereUniqueInput
  }

  /**
   * HealthExpected findFirst
   */
  export type HealthExpectedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * Filter, which HealthExpected to fetch.
     */
    where?: HealthExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthExpecteds to fetch.
     */
    orderBy?: HealthExpectedOrderByWithRelationInput | HealthExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthExpecteds.
     */
    cursor?: HealthExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthExpecteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthExpecteds.
     */
    distinct?: HealthExpectedScalarFieldEnum | HealthExpectedScalarFieldEnum[]
  }

  /**
   * HealthExpected findFirstOrThrow
   */
  export type HealthExpectedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * Filter, which HealthExpected to fetch.
     */
    where?: HealthExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthExpecteds to fetch.
     */
    orderBy?: HealthExpectedOrderByWithRelationInput | HealthExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthExpecteds.
     */
    cursor?: HealthExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthExpecteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthExpecteds.
     */
    distinct?: HealthExpectedScalarFieldEnum | HealthExpectedScalarFieldEnum[]
  }

  /**
   * HealthExpected findMany
   */
  export type HealthExpectedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * Filter, which HealthExpecteds to fetch.
     */
    where?: HealthExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthExpecteds to fetch.
     */
    orderBy?: HealthExpectedOrderByWithRelationInput | HealthExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthExpecteds.
     */
    cursor?: HealthExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthExpecteds.
     */
    skip?: number
    distinct?: HealthExpectedScalarFieldEnum | HealthExpectedScalarFieldEnum[]
  }

  /**
   * HealthExpected create
   */
  export type HealthExpectedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * The data needed to create a HealthExpected.
     */
    data: XOR<HealthExpectedCreateInput, HealthExpectedUncheckedCreateInput>
  }

  /**
   * HealthExpected createMany
   */
  export type HealthExpectedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HealthExpecteds.
     */
    data: HealthExpectedCreateManyInput | HealthExpectedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthExpected createManyAndReturn
   */
  export type HealthExpectedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HealthExpecteds.
     */
    data: HealthExpectedCreateManyInput | HealthExpectedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthExpected update
   */
  export type HealthExpectedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * The data needed to update a HealthExpected.
     */
    data: XOR<HealthExpectedUpdateInput, HealthExpectedUncheckedUpdateInput>
    /**
     * Choose, which HealthExpected to update.
     */
    where: HealthExpectedWhereUniqueInput
  }

  /**
   * HealthExpected updateMany
   */
  export type HealthExpectedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HealthExpecteds.
     */
    data: XOR<HealthExpectedUpdateManyMutationInput, HealthExpectedUncheckedUpdateManyInput>
    /**
     * Filter which HealthExpecteds to update
     */
    where?: HealthExpectedWhereInput
  }

  /**
   * HealthExpected upsert
   */
  export type HealthExpectedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * The filter to search for the HealthExpected to update in case it exists.
     */
    where: HealthExpectedWhereUniqueInput
    /**
     * In case the HealthExpected found by the `where` argument doesn't exist, create a new HealthExpected with this data.
     */
    create: XOR<HealthExpectedCreateInput, HealthExpectedUncheckedCreateInput>
    /**
     * In case the HealthExpected was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HealthExpectedUpdateInput, HealthExpectedUncheckedUpdateInput>
  }

  /**
   * HealthExpected delete
   */
  export type HealthExpectedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
    /**
     * Filter which HealthExpected to delete.
     */
    where: HealthExpectedWhereUniqueInput
  }

  /**
   * HealthExpected deleteMany
   */
  export type HealthExpectedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthExpecteds to delete
     */
    where?: HealthExpectedWhereInput
  }

  /**
   * HealthExpected without action
   */
  export type HealthExpectedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthExpected
     */
    select?: HealthExpectedSelect<ExtArgs> | null
  }


  /**
   * Model Otp
   */

  export type AggregateOtp = {
    _count: OtpCountAggregateOutputType | null
    _avg: OtpAvgAggregateOutputType | null
    _sum: OtpSumAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  export type OtpAvgAggregateOutputType = {
    id: number | null
  }

  export type OtpSumAggregateOutputType = {
    id: number | null
  }

  export type OtpMinAggregateOutputType = {
    id: number | null
    phone: string | null
    otp: string | null
    expiry: Date | null
  }

  export type OtpMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    otp: string | null
    expiry: Date | null
  }

  export type OtpCountAggregateOutputType = {
    id: number
    phone: number
    otp: number
    expiry: number
    _all: number
  }


  export type OtpAvgAggregateInputType = {
    id?: true
  }

  export type OtpSumAggregateInputType = {
    id?: true
  }

  export type OtpMinAggregateInputType = {
    id?: true
    phone?: true
    otp?: true
    expiry?: true
  }

  export type OtpMaxAggregateInputType = {
    id?: true
    phone?: true
    otp?: true
    expiry?: true
  }

  export type OtpCountAggregateInputType = {
    id?: true
    phone?: true
    otp?: true
    expiry?: true
    _all?: true
  }

  export type OtpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otp to aggregate.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Otps
    **/
    _count?: true | OtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OtpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OtpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpMaxAggregateInputType
  }

  export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
        [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtp[P]>
      : GetScalarType<T[P], AggregateOtp[P]>
  }




  export type OtpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpWhereInput
    orderBy?: OtpOrderByWithAggregationInput | OtpOrderByWithAggregationInput[]
    by: OtpScalarFieldEnum[] | OtpScalarFieldEnum
    having?: OtpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCountAggregateInputType | true
    _avg?: OtpAvgAggregateInputType
    _sum?: OtpSumAggregateInputType
    _min?: OtpMinAggregateInputType
    _max?: OtpMaxAggregateInputType
  }

  export type OtpGroupByOutputType = {
    id: number
    phone: string
    otp: string
    expiry: Date
    _count: OtpCountAggregateOutputType | null
    _avg: OtpAvgAggregateOutputType | null
    _sum: OtpSumAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpGroupByOutputType[P]>
            : GetScalarType<T[P], OtpGroupByOutputType[P]>
        }
      >
    >


  export type OtpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    otp?: boolean
    expiry?: boolean
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    otp?: boolean
    expiry?: boolean
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectScalar = {
    id?: boolean
    phone?: boolean
    otp?: boolean
    expiry?: boolean
  }


  export type $OtpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Otp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      phone: string
      otp: string
      expiry: Date
    }, ExtArgs["result"]["otp"]>
    composites: {}
  }

  type OtpGetPayload<S extends boolean | null | undefined | OtpDefaultArgs> = $Result.GetResult<Prisma.$OtpPayload, S>

  type OtpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OtpFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OtpCountAggregateInputType | true
    }

  export interface OtpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Otp'], meta: { name: 'Otp' } }
    /**
     * Find zero or one Otp that matches the filter.
     * @param {OtpFindUniqueArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpFindUniqueArgs>(args: SelectSubset<T, OtpFindUniqueArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Otp that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OtpFindUniqueOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Otp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpFindFirstArgs>(args?: SelectSubset<T, OtpFindFirstArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Otp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Otps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Otps
     * const otps = await prisma.otp.findMany()
     * 
     * // Get first 10 Otps
     * const otps = await prisma.otp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpWithIdOnly = await prisma.otp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpFindManyArgs>(args?: SelectSubset<T, OtpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Otp.
     * @param {OtpCreateArgs} args - Arguments to create a Otp.
     * @example
     * // Create one Otp
     * const Otp = await prisma.otp.create({
     *   data: {
     *     // ... data to create a Otp
     *   }
     * })
     * 
     */
    create<T extends OtpCreateArgs>(args: SelectSubset<T, OtpCreateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Otps.
     * @param {OtpCreateManyArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpCreateManyArgs>(args?: SelectSubset<T, OtpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Otps and returns the data saved in the database.
     * @param {OtpCreateManyAndReturnArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Otps and only return the `id`
     * const otpWithIdOnly = await prisma.otp.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtpCreateManyAndReturnArgs>(args?: SelectSubset<T, OtpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Otp.
     * @param {OtpDeleteArgs} args - Arguments to delete one Otp.
     * @example
     * // Delete one Otp
     * const Otp = await prisma.otp.delete({
     *   where: {
     *     // ... filter to delete one Otp
     *   }
     * })
     * 
     */
    delete<T extends OtpDeleteArgs>(args: SelectSubset<T, OtpDeleteArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Otp.
     * @param {OtpUpdateArgs} args - Arguments to update one Otp.
     * @example
     * // Update one Otp
     * const otp = await prisma.otp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpUpdateArgs>(args: SelectSubset<T, OtpUpdateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Otps.
     * @param {OtpDeleteManyArgs} args - Arguments to filter Otps to delete.
     * @example
     * // Delete a few Otps
     * const { count } = await prisma.otp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpDeleteManyArgs>(args?: SelectSubset<T, OtpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpUpdateManyArgs>(args: SelectSubset<T, OtpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Otp.
     * @param {OtpUpsertArgs} args - Arguments to update or create a Otp.
     * @example
     * // Update or create a Otp
     * const otp = await prisma.otp.upsert({
     *   create: {
     *     // ... data to create a Otp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Otp we want to update
     *   }
     * })
     */
    upsert<T extends OtpUpsertArgs>(args: SelectSubset<T, OtpUpsertArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCountArgs} args - Arguments to filter Otps to count.
     * @example
     * // Count the number of Otps
     * const count = await prisma.otp.count({
     *   where: {
     *     // ... the filter for the Otps we want to count
     *   }
     * })
    **/
    count<T extends OtpCountArgs>(
      args?: Subset<T, OtpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpAggregateArgs>(args: Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

    /**
     * Group by Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpGroupByArgs['orderBy'] }
        : { orderBy?: OtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Otp model
   */
  readonly fields: OtpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Otp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Otp model
   */ 
  interface OtpFieldRefs {
    readonly id: FieldRef<"Otp", 'Int'>
    readonly phone: FieldRef<"Otp", 'String'>
    readonly otp: FieldRef<"Otp", 'String'>
    readonly expiry: FieldRef<"Otp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Otp findUnique
   */
  export type OtpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findUniqueOrThrow
   */
  export type OtpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findFirst
   */
  export type OtpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findFirstOrThrow
   */
  export type OtpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findMany
   */
  export type OtpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Filter, which Otps to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp create
   */
  export type OtpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * The data needed to create a Otp.
     */
    data: XOR<OtpCreateInput, OtpUncheckedCreateInput>
  }

  /**
   * Otp createMany
   */
  export type OtpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Otp createManyAndReturn
   */
  export type OtpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Otp update
   */
  export type OtpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * The data needed to update a Otp.
     */
    data: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
    /**
     * Choose, which Otp to update.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp updateMany
   */
  export type OtpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
  }

  /**
   * Otp upsert
   */
  export type OtpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * The filter to search for the Otp to update in case it exists.
     */
    where: OtpWhereUniqueInput
    /**
     * In case the Otp found by the `where` argument doesn't exist, create a new Otp with this data.
     */
    create: XOR<OtpCreateInput, OtpUncheckedCreateInput>
    /**
     * In case the Otp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
  }

  /**
   * Otp delete
   */
  export type OtpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Filter which Otp to delete.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp deleteMany
   */
  export type OtpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otps to delete
     */
    where?: OtpWhereInput
  }

  /**
   * Otp without action
   */
  export type OtpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
  }


  /**
   * Model emailOtp
   */

  export type AggregateEmailOtp = {
    _count: EmailOtpCountAggregateOutputType | null
    _avg: EmailOtpAvgAggregateOutputType | null
    _sum: EmailOtpSumAggregateOutputType | null
    _min: EmailOtpMinAggregateOutputType | null
    _max: EmailOtpMaxAggregateOutputType | null
  }

  export type EmailOtpAvgAggregateOutputType = {
    id: number | null
  }

  export type EmailOtpSumAggregateOutputType = {
    id: number | null
  }

  export type EmailOtpMinAggregateOutputType = {
    id: number | null
    email: string | null
    otp: string | null
    expiry: Date | null
  }

  export type EmailOtpMaxAggregateOutputType = {
    id: number | null
    email: string | null
    otp: string | null
    expiry: Date | null
  }

  export type EmailOtpCountAggregateOutputType = {
    id: number
    email: number
    otp: number
    expiry: number
    _all: number
  }


  export type EmailOtpAvgAggregateInputType = {
    id?: true
  }

  export type EmailOtpSumAggregateInputType = {
    id?: true
  }

  export type EmailOtpMinAggregateInputType = {
    id?: true
    email?: true
    otp?: true
    expiry?: true
  }

  export type EmailOtpMaxAggregateInputType = {
    id?: true
    email?: true
    otp?: true
    expiry?: true
  }

  export type EmailOtpCountAggregateInputType = {
    id?: true
    email?: true
    otp?: true
    expiry?: true
    _all?: true
  }

  export type EmailOtpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which emailOtp to aggregate.
     */
    where?: emailOtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of emailOtps to fetch.
     */
    orderBy?: emailOtpOrderByWithRelationInput | emailOtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: emailOtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` emailOtps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` emailOtps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned emailOtps
    **/
    _count?: true | EmailOtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailOtpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailOtpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailOtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailOtpMaxAggregateInputType
  }

  export type GetEmailOtpAggregateType<T extends EmailOtpAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailOtp[P]>
      : GetScalarType<T[P], AggregateEmailOtp[P]>
  }




  export type emailOtpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: emailOtpWhereInput
    orderBy?: emailOtpOrderByWithAggregationInput | emailOtpOrderByWithAggregationInput[]
    by: EmailOtpScalarFieldEnum[] | EmailOtpScalarFieldEnum
    having?: emailOtpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailOtpCountAggregateInputType | true
    _avg?: EmailOtpAvgAggregateInputType
    _sum?: EmailOtpSumAggregateInputType
    _min?: EmailOtpMinAggregateInputType
    _max?: EmailOtpMaxAggregateInputType
  }

  export type EmailOtpGroupByOutputType = {
    id: number
    email: string
    otp: string
    expiry: Date
    _count: EmailOtpCountAggregateOutputType | null
    _avg: EmailOtpAvgAggregateOutputType | null
    _sum: EmailOtpSumAggregateOutputType | null
    _min: EmailOtpMinAggregateOutputType | null
    _max: EmailOtpMaxAggregateOutputType | null
  }

  type GetEmailOtpGroupByPayload<T extends emailOtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailOtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailOtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailOtpGroupByOutputType[P]>
            : GetScalarType<T[P], EmailOtpGroupByOutputType[P]>
        }
      >
    >


  export type emailOtpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    otp?: boolean
    expiry?: boolean
  }, ExtArgs["result"]["emailOtp"]>

  export type emailOtpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    otp?: boolean
    expiry?: boolean
  }, ExtArgs["result"]["emailOtp"]>

  export type emailOtpSelectScalar = {
    id?: boolean
    email?: boolean
    otp?: boolean
    expiry?: boolean
  }


  export type $emailOtpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "emailOtp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      otp: string
      expiry: Date
    }, ExtArgs["result"]["emailOtp"]>
    composites: {}
  }

  type emailOtpGetPayload<S extends boolean | null | undefined | emailOtpDefaultArgs> = $Result.GetResult<Prisma.$emailOtpPayload, S>

  type emailOtpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<emailOtpFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmailOtpCountAggregateInputType | true
    }

  export interface emailOtpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['emailOtp'], meta: { name: 'emailOtp' } }
    /**
     * Find zero or one EmailOtp that matches the filter.
     * @param {emailOtpFindUniqueArgs} args - Arguments to find a EmailOtp
     * @example
     * // Get one EmailOtp
     * const emailOtp = await prisma.emailOtp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends emailOtpFindUniqueArgs>(args: SelectSubset<T, emailOtpFindUniqueArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmailOtp that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {emailOtpFindUniqueOrThrowArgs} args - Arguments to find a EmailOtp
     * @example
     * // Get one EmailOtp
     * const emailOtp = await prisma.emailOtp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends emailOtpFindUniqueOrThrowArgs>(args: SelectSubset<T, emailOtpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmailOtp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {emailOtpFindFirstArgs} args - Arguments to find a EmailOtp
     * @example
     * // Get one EmailOtp
     * const emailOtp = await prisma.emailOtp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends emailOtpFindFirstArgs>(args?: SelectSubset<T, emailOtpFindFirstArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmailOtp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {emailOtpFindFirstOrThrowArgs} args - Arguments to find a EmailOtp
     * @example
     * // Get one EmailOtp
     * const emailOtp = await prisma.emailOtp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends emailOtpFindFirstOrThrowArgs>(args?: SelectSubset<T, emailOtpFindFirstOrThrowArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmailOtps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {emailOtpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailOtps
     * const emailOtps = await prisma.emailOtp.findMany()
     * 
     * // Get first 10 EmailOtps
     * const emailOtps = await prisma.emailOtp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailOtpWithIdOnly = await prisma.emailOtp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends emailOtpFindManyArgs>(args?: SelectSubset<T, emailOtpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmailOtp.
     * @param {emailOtpCreateArgs} args - Arguments to create a EmailOtp.
     * @example
     * // Create one EmailOtp
     * const EmailOtp = await prisma.emailOtp.create({
     *   data: {
     *     // ... data to create a EmailOtp
     *   }
     * })
     * 
     */
    create<T extends emailOtpCreateArgs>(args: SelectSubset<T, emailOtpCreateArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmailOtps.
     * @param {emailOtpCreateManyArgs} args - Arguments to create many EmailOtps.
     * @example
     * // Create many EmailOtps
     * const emailOtp = await prisma.emailOtp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends emailOtpCreateManyArgs>(args?: SelectSubset<T, emailOtpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailOtps and returns the data saved in the database.
     * @param {emailOtpCreateManyAndReturnArgs} args - Arguments to create many EmailOtps.
     * @example
     * // Create many EmailOtps
     * const emailOtp = await prisma.emailOtp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailOtps and only return the `id`
     * const emailOtpWithIdOnly = await prisma.emailOtp.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends emailOtpCreateManyAndReturnArgs>(args?: SelectSubset<T, emailOtpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmailOtp.
     * @param {emailOtpDeleteArgs} args - Arguments to delete one EmailOtp.
     * @example
     * // Delete one EmailOtp
     * const EmailOtp = await prisma.emailOtp.delete({
     *   where: {
     *     // ... filter to delete one EmailOtp
     *   }
     * })
     * 
     */
    delete<T extends emailOtpDeleteArgs>(args: SelectSubset<T, emailOtpDeleteArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmailOtp.
     * @param {emailOtpUpdateArgs} args - Arguments to update one EmailOtp.
     * @example
     * // Update one EmailOtp
     * const emailOtp = await prisma.emailOtp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends emailOtpUpdateArgs>(args: SelectSubset<T, emailOtpUpdateArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmailOtps.
     * @param {emailOtpDeleteManyArgs} args - Arguments to filter EmailOtps to delete.
     * @example
     * // Delete a few EmailOtps
     * const { count } = await prisma.emailOtp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends emailOtpDeleteManyArgs>(args?: SelectSubset<T, emailOtpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailOtps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {emailOtpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailOtps
     * const emailOtp = await prisma.emailOtp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends emailOtpUpdateManyArgs>(args: SelectSubset<T, emailOtpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailOtp.
     * @param {emailOtpUpsertArgs} args - Arguments to update or create a EmailOtp.
     * @example
     * // Update or create a EmailOtp
     * const emailOtp = await prisma.emailOtp.upsert({
     *   create: {
     *     // ... data to create a EmailOtp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailOtp we want to update
     *   }
     * })
     */
    upsert<T extends emailOtpUpsertArgs>(args: SelectSubset<T, emailOtpUpsertArgs<ExtArgs>>): Prisma__emailOtpClient<$Result.GetResult<Prisma.$emailOtpPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmailOtps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {emailOtpCountArgs} args - Arguments to filter EmailOtps to count.
     * @example
     * // Count the number of EmailOtps
     * const count = await prisma.emailOtp.count({
     *   where: {
     *     // ... the filter for the EmailOtps we want to count
     *   }
     * })
    **/
    count<T extends emailOtpCountArgs>(
      args?: Subset<T, emailOtpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailOtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailOtp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailOtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailOtpAggregateArgs>(args: Subset<T, EmailOtpAggregateArgs>): Prisma.PrismaPromise<GetEmailOtpAggregateType<T>>

    /**
     * Group by EmailOtp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {emailOtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends emailOtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: emailOtpGroupByArgs['orderBy'] }
        : { orderBy?: emailOtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, emailOtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the emailOtp model
   */
  readonly fields: emailOtpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for emailOtp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__emailOtpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the emailOtp model
   */ 
  interface emailOtpFieldRefs {
    readonly id: FieldRef<"emailOtp", 'Int'>
    readonly email: FieldRef<"emailOtp", 'String'>
    readonly otp: FieldRef<"emailOtp", 'String'>
    readonly expiry: FieldRef<"emailOtp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * emailOtp findUnique
   */
  export type emailOtpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * Filter, which emailOtp to fetch.
     */
    where: emailOtpWhereUniqueInput
  }

  /**
   * emailOtp findUniqueOrThrow
   */
  export type emailOtpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * Filter, which emailOtp to fetch.
     */
    where: emailOtpWhereUniqueInput
  }

  /**
   * emailOtp findFirst
   */
  export type emailOtpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * Filter, which emailOtp to fetch.
     */
    where?: emailOtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of emailOtps to fetch.
     */
    orderBy?: emailOtpOrderByWithRelationInput | emailOtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for emailOtps.
     */
    cursor?: emailOtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` emailOtps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` emailOtps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of emailOtps.
     */
    distinct?: EmailOtpScalarFieldEnum | EmailOtpScalarFieldEnum[]
  }

  /**
   * emailOtp findFirstOrThrow
   */
  export type emailOtpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * Filter, which emailOtp to fetch.
     */
    where?: emailOtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of emailOtps to fetch.
     */
    orderBy?: emailOtpOrderByWithRelationInput | emailOtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for emailOtps.
     */
    cursor?: emailOtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` emailOtps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` emailOtps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of emailOtps.
     */
    distinct?: EmailOtpScalarFieldEnum | EmailOtpScalarFieldEnum[]
  }

  /**
   * emailOtp findMany
   */
  export type emailOtpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * Filter, which emailOtps to fetch.
     */
    where?: emailOtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of emailOtps to fetch.
     */
    orderBy?: emailOtpOrderByWithRelationInput | emailOtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing emailOtps.
     */
    cursor?: emailOtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` emailOtps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` emailOtps.
     */
    skip?: number
    distinct?: EmailOtpScalarFieldEnum | EmailOtpScalarFieldEnum[]
  }

  /**
   * emailOtp create
   */
  export type emailOtpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * The data needed to create a emailOtp.
     */
    data: XOR<emailOtpCreateInput, emailOtpUncheckedCreateInput>
  }

  /**
   * emailOtp createMany
   */
  export type emailOtpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many emailOtps.
     */
    data: emailOtpCreateManyInput | emailOtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * emailOtp createManyAndReturn
   */
  export type emailOtpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many emailOtps.
     */
    data: emailOtpCreateManyInput | emailOtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * emailOtp update
   */
  export type emailOtpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * The data needed to update a emailOtp.
     */
    data: XOR<emailOtpUpdateInput, emailOtpUncheckedUpdateInput>
    /**
     * Choose, which emailOtp to update.
     */
    where: emailOtpWhereUniqueInput
  }

  /**
   * emailOtp updateMany
   */
  export type emailOtpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update emailOtps.
     */
    data: XOR<emailOtpUpdateManyMutationInput, emailOtpUncheckedUpdateManyInput>
    /**
     * Filter which emailOtps to update
     */
    where?: emailOtpWhereInput
  }

  /**
   * emailOtp upsert
   */
  export type emailOtpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * The filter to search for the emailOtp to update in case it exists.
     */
    where: emailOtpWhereUniqueInput
    /**
     * In case the emailOtp found by the `where` argument doesn't exist, create a new emailOtp with this data.
     */
    create: XOR<emailOtpCreateInput, emailOtpUncheckedCreateInput>
    /**
     * In case the emailOtp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<emailOtpUpdateInput, emailOtpUncheckedUpdateInput>
  }

  /**
   * emailOtp delete
   */
  export type emailOtpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
    /**
     * Filter which emailOtp to delete.
     */
    where: emailOtpWhereUniqueInput
  }

  /**
   * emailOtp deleteMany
   */
  export type emailOtpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which emailOtps to delete
     */
    where?: emailOtpWhereInput
  }

  /**
   * emailOtp without action
   */
  export type emailOtpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the emailOtp
     */
    select?: emailOtpSelect<ExtArgs> | null
  }


  /**
   * Model BookedAppointment
   */

  export type AggregateBookedAppointment = {
    _count: BookedAppointmentCountAggregateOutputType | null
    _avg: BookedAppointmentAvgAggregateOutputType | null
    _sum: BookedAppointmentSumAggregateOutputType | null
    _min: BookedAppointmentMinAggregateOutputType | null
    _max: BookedAppointmentMaxAggregateOutputType | null
  }

  export type BookedAppointmentAvgAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type BookedAppointmentSumAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type BookedAppointmentMinAggregateOutputType = {
    id: number | null
    userId: string | null
    doctor_id: string | null
    time: string | null
    date: Date | null
    doctorName: string | null
    purpose: string | null
    reschedule: string | null
    reviewed: string | null
    status: string | null
    mode: string | null
    age: number | null
    name: string | null
    gender: string | null
  }

  export type BookedAppointmentMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    doctor_id: string | null
    time: string | null
    date: Date | null
    doctorName: string | null
    purpose: string | null
    reschedule: string | null
    reviewed: string | null
    status: string | null
    mode: string | null
    age: number | null
    name: string | null
    gender: string | null
  }

  export type BookedAppointmentCountAggregateOutputType = {
    id: number
    userId: number
    doctor_id: number
    time: number
    date: number
    doctorName: number
    purpose: number
    reschedule: number
    reviewed: number
    status: number
    mode: number
    age: number
    name: number
    gender: number
    _all: number
  }


  export type BookedAppointmentAvgAggregateInputType = {
    id?: true
    age?: true
  }

  export type BookedAppointmentSumAggregateInputType = {
    id?: true
    age?: true
  }

  export type BookedAppointmentMinAggregateInputType = {
    id?: true
    userId?: true
    doctor_id?: true
    time?: true
    date?: true
    doctorName?: true
    purpose?: true
    reschedule?: true
    reviewed?: true
    status?: true
    mode?: true
    age?: true
    name?: true
    gender?: true
  }

  export type BookedAppointmentMaxAggregateInputType = {
    id?: true
    userId?: true
    doctor_id?: true
    time?: true
    date?: true
    doctorName?: true
    purpose?: true
    reschedule?: true
    reviewed?: true
    status?: true
    mode?: true
    age?: true
    name?: true
    gender?: true
  }

  export type BookedAppointmentCountAggregateInputType = {
    id?: true
    userId?: true
    doctor_id?: true
    time?: true
    date?: true
    doctorName?: true
    purpose?: true
    reschedule?: true
    reviewed?: true
    status?: true
    mode?: true
    age?: true
    name?: true
    gender?: true
    _all?: true
  }

  export type BookedAppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookedAppointment to aggregate.
     */
    where?: BookedAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookedAppointments to fetch.
     */
    orderBy?: BookedAppointmentOrderByWithRelationInput | BookedAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookedAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookedAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookedAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookedAppointments
    **/
    _count?: true | BookedAppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookedAppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookedAppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookedAppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookedAppointmentMaxAggregateInputType
  }

  export type GetBookedAppointmentAggregateType<T extends BookedAppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateBookedAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookedAppointment[P]>
      : GetScalarType<T[P], AggregateBookedAppointment[P]>
  }




  export type BookedAppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookedAppointmentWhereInput
    orderBy?: BookedAppointmentOrderByWithAggregationInput | BookedAppointmentOrderByWithAggregationInput[]
    by: BookedAppointmentScalarFieldEnum[] | BookedAppointmentScalarFieldEnum
    having?: BookedAppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookedAppointmentCountAggregateInputType | true
    _avg?: BookedAppointmentAvgAggregateInputType
    _sum?: BookedAppointmentSumAggregateInputType
    _min?: BookedAppointmentMinAggregateInputType
    _max?: BookedAppointmentMaxAggregateInputType
  }

  export type BookedAppointmentGroupByOutputType = {
    id: number
    userId: string
    doctor_id: string
    time: string
    date: Date
    doctorName: string
    purpose: string
    reschedule: string
    reviewed: string
    status: string
    mode: string
    age: number
    name: string
    gender: string
    _count: BookedAppointmentCountAggregateOutputType | null
    _avg: BookedAppointmentAvgAggregateOutputType | null
    _sum: BookedAppointmentSumAggregateOutputType | null
    _min: BookedAppointmentMinAggregateOutputType | null
    _max: BookedAppointmentMaxAggregateOutputType | null
  }

  type GetBookedAppointmentGroupByPayload<T extends BookedAppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookedAppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookedAppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookedAppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], BookedAppointmentGroupByOutputType[P]>
        }
      >
    >


  export type BookedAppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    doctor_id?: boolean
    time?: boolean
    date?: boolean
    doctorName?: boolean
    purpose?: boolean
    reschedule?: boolean
    reviewed?: boolean
    status?: boolean
    mode?: boolean
    age?: boolean
    name?: boolean
    gender?: boolean
  }, ExtArgs["result"]["bookedAppointment"]>

  export type BookedAppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    doctor_id?: boolean
    time?: boolean
    date?: boolean
    doctorName?: boolean
    purpose?: boolean
    reschedule?: boolean
    reviewed?: boolean
    status?: boolean
    mode?: boolean
    age?: boolean
    name?: boolean
    gender?: boolean
  }, ExtArgs["result"]["bookedAppointment"]>

  export type BookedAppointmentSelectScalar = {
    id?: boolean
    userId?: boolean
    doctor_id?: boolean
    time?: boolean
    date?: boolean
    doctorName?: boolean
    purpose?: boolean
    reschedule?: boolean
    reviewed?: boolean
    status?: boolean
    mode?: boolean
    age?: boolean
    name?: boolean
    gender?: boolean
  }


  export type $BookedAppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookedAppointment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      doctor_id: string
      time: string
      date: Date
      doctorName: string
      purpose: string
      reschedule: string
      reviewed: string
      status: string
      mode: string
      age: number
      name: string
      gender: string
    }, ExtArgs["result"]["bookedAppointment"]>
    composites: {}
  }

  type BookedAppointmentGetPayload<S extends boolean | null | undefined | BookedAppointmentDefaultArgs> = $Result.GetResult<Prisma.$BookedAppointmentPayload, S>

  type BookedAppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookedAppointmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookedAppointmentCountAggregateInputType | true
    }

  export interface BookedAppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookedAppointment'], meta: { name: 'BookedAppointment' } }
    /**
     * Find zero or one BookedAppointment that matches the filter.
     * @param {BookedAppointmentFindUniqueArgs} args - Arguments to find a BookedAppointment
     * @example
     * // Get one BookedAppointment
     * const bookedAppointment = await prisma.bookedAppointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookedAppointmentFindUniqueArgs>(args: SelectSubset<T, BookedAppointmentFindUniqueArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BookedAppointment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookedAppointmentFindUniqueOrThrowArgs} args - Arguments to find a BookedAppointment
     * @example
     * // Get one BookedAppointment
     * const bookedAppointment = await prisma.bookedAppointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookedAppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, BookedAppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BookedAppointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentFindFirstArgs} args - Arguments to find a BookedAppointment
     * @example
     * // Get one BookedAppointment
     * const bookedAppointment = await prisma.bookedAppointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookedAppointmentFindFirstArgs>(args?: SelectSubset<T, BookedAppointmentFindFirstArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BookedAppointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentFindFirstOrThrowArgs} args - Arguments to find a BookedAppointment
     * @example
     * // Get one BookedAppointment
     * const bookedAppointment = await prisma.bookedAppointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookedAppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, BookedAppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BookedAppointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookedAppointments
     * const bookedAppointments = await prisma.bookedAppointment.findMany()
     * 
     * // Get first 10 BookedAppointments
     * const bookedAppointments = await prisma.bookedAppointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookedAppointmentWithIdOnly = await prisma.bookedAppointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookedAppointmentFindManyArgs>(args?: SelectSubset<T, BookedAppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BookedAppointment.
     * @param {BookedAppointmentCreateArgs} args - Arguments to create a BookedAppointment.
     * @example
     * // Create one BookedAppointment
     * const BookedAppointment = await prisma.bookedAppointment.create({
     *   data: {
     *     // ... data to create a BookedAppointment
     *   }
     * })
     * 
     */
    create<T extends BookedAppointmentCreateArgs>(args: SelectSubset<T, BookedAppointmentCreateArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BookedAppointments.
     * @param {BookedAppointmentCreateManyArgs} args - Arguments to create many BookedAppointments.
     * @example
     * // Create many BookedAppointments
     * const bookedAppointment = await prisma.bookedAppointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookedAppointmentCreateManyArgs>(args?: SelectSubset<T, BookedAppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookedAppointments and returns the data saved in the database.
     * @param {BookedAppointmentCreateManyAndReturnArgs} args - Arguments to create many BookedAppointments.
     * @example
     * // Create many BookedAppointments
     * const bookedAppointment = await prisma.bookedAppointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookedAppointments and only return the `id`
     * const bookedAppointmentWithIdOnly = await prisma.bookedAppointment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookedAppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, BookedAppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BookedAppointment.
     * @param {BookedAppointmentDeleteArgs} args - Arguments to delete one BookedAppointment.
     * @example
     * // Delete one BookedAppointment
     * const BookedAppointment = await prisma.bookedAppointment.delete({
     *   where: {
     *     // ... filter to delete one BookedAppointment
     *   }
     * })
     * 
     */
    delete<T extends BookedAppointmentDeleteArgs>(args: SelectSubset<T, BookedAppointmentDeleteArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BookedAppointment.
     * @param {BookedAppointmentUpdateArgs} args - Arguments to update one BookedAppointment.
     * @example
     * // Update one BookedAppointment
     * const bookedAppointment = await prisma.bookedAppointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookedAppointmentUpdateArgs>(args: SelectSubset<T, BookedAppointmentUpdateArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BookedAppointments.
     * @param {BookedAppointmentDeleteManyArgs} args - Arguments to filter BookedAppointments to delete.
     * @example
     * // Delete a few BookedAppointments
     * const { count } = await prisma.bookedAppointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookedAppointmentDeleteManyArgs>(args?: SelectSubset<T, BookedAppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookedAppointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookedAppointments
     * const bookedAppointment = await prisma.bookedAppointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookedAppointmentUpdateManyArgs>(args: SelectSubset<T, BookedAppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookedAppointment.
     * @param {BookedAppointmentUpsertArgs} args - Arguments to update or create a BookedAppointment.
     * @example
     * // Update or create a BookedAppointment
     * const bookedAppointment = await prisma.bookedAppointment.upsert({
     *   create: {
     *     // ... data to create a BookedAppointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookedAppointment we want to update
     *   }
     * })
     */
    upsert<T extends BookedAppointmentUpsertArgs>(args: SelectSubset<T, BookedAppointmentUpsertArgs<ExtArgs>>): Prisma__BookedAppointmentClient<$Result.GetResult<Prisma.$BookedAppointmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BookedAppointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentCountArgs} args - Arguments to filter BookedAppointments to count.
     * @example
     * // Count the number of BookedAppointments
     * const count = await prisma.bookedAppointment.count({
     *   where: {
     *     // ... the filter for the BookedAppointments we want to count
     *   }
     * })
    **/
    count<T extends BookedAppointmentCountArgs>(
      args?: Subset<T, BookedAppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookedAppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookedAppointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookedAppointmentAggregateArgs>(args: Subset<T, BookedAppointmentAggregateArgs>): Prisma.PrismaPromise<GetBookedAppointmentAggregateType<T>>

    /**
     * Group by BookedAppointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookedAppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookedAppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookedAppointmentGroupByArgs['orderBy'] }
        : { orderBy?: BookedAppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookedAppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookedAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookedAppointment model
   */
  readonly fields: BookedAppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookedAppointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookedAppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookedAppointment model
   */ 
  interface BookedAppointmentFieldRefs {
    readonly id: FieldRef<"BookedAppointment", 'Int'>
    readonly userId: FieldRef<"BookedAppointment", 'String'>
    readonly doctor_id: FieldRef<"BookedAppointment", 'String'>
    readonly time: FieldRef<"BookedAppointment", 'String'>
    readonly date: FieldRef<"BookedAppointment", 'DateTime'>
    readonly doctorName: FieldRef<"BookedAppointment", 'String'>
    readonly purpose: FieldRef<"BookedAppointment", 'String'>
    readonly reschedule: FieldRef<"BookedAppointment", 'String'>
    readonly reviewed: FieldRef<"BookedAppointment", 'String'>
    readonly status: FieldRef<"BookedAppointment", 'String'>
    readonly mode: FieldRef<"BookedAppointment", 'String'>
    readonly age: FieldRef<"BookedAppointment", 'Float'>
    readonly name: FieldRef<"BookedAppointment", 'String'>
    readonly gender: FieldRef<"BookedAppointment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BookedAppointment findUnique
   */
  export type BookedAppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * Filter, which BookedAppointment to fetch.
     */
    where: BookedAppointmentWhereUniqueInput
  }

  /**
   * BookedAppointment findUniqueOrThrow
   */
  export type BookedAppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * Filter, which BookedAppointment to fetch.
     */
    where: BookedAppointmentWhereUniqueInput
  }

  /**
   * BookedAppointment findFirst
   */
  export type BookedAppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * Filter, which BookedAppointment to fetch.
     */
    where?: BookedAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookedAppointments to fetch.
     */
    orderBy?: BookedAppointmentOrderByWithRelationInput | BookedAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookedAppointments.
     */
    cursor?: BookedAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookedAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookedAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookedAppointments.
     */
    distinct?: BookedAppointmentScalarFieldEnum | BookedAppointmentScalarFieldEnum[]
  }

  /**
   * BookedAppointment findFirstOrThrow
   */
  export type BookedAppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * Filter, which BookedAppointment to fetch.
     */
    where?: BookedAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookedAppointments to fetch.
     */
    orderBy?: BookedAppointmentOrderByWithRelationInput | BookedAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookedAppointments.
     */
    cursor?: BookedAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookedAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookedAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookedAppointments.
     */
    distinct?: BookedAppointmentScalarFieldEnum | BookedAppointmentScalarFieldEnum[]
  }

  /**
   * BookedAppointment findMany
   */
  export type BookedAppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * Filter, which BookedAppointments to fetch.
     */
    where?: BookedAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookedAppointments to fetch.
     */
    orderBy?: BookedAppointmentOrderByWithRelationInput | BookedAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookedAppointments.
     */
    cursor?: BookedAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookedAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookedAppointments.
     */
    skip?: number
    distinct?: BookedAppointmentScalarFieldEnum | BookedAppointmentScalarFieldEnum[]
  }

  /**
   * BookedAppointment create
   */
  export type BookedAppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * The data needed to create a BookedAppointment.
     */
    data: XOR<BookedAppointmentCreateInput, BookedAppointmentUncheckedCreateInput>
  }

  /**
   * BookedAppointment createMany
   */
  export type BookedAppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookedAppointments.
     */
    data: BookedAppointmentCreateManyInput | BookedAppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookedAppointment createManyAndReturn
   */
  export type BookedAppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BookedAppointments.
     */
    data: BookedAppointmentCreateManyInput | BookedAppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookedAppointment update
   */
  export type BookedAppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * The data needed to update a BookedAppointment.
     */
    data: XOR<BookedAppointmentUpdateInput, BookedAppointmentUncheckedUpdateInput>
    /**
     * Choose, which BookedAppointment to update.
     */
    where: BookedAppointmentWhereUniqueInput
  }

  /**
   * BookedAppointment updateMany
   */
  export type BookedAppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookedAppointments.
     */
    data: XOR<BookedAppointmentUpdateManyMutationInput, BookedAppointmentUncheckedUpdateManyInput>
    /**
     * Filter which BookedAppointments to update
     */
    where?: BookedAppointmentWhereInput
  }

  /**
   * BookedAppointment upsert
   */
  export type BookedAppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * The filter to search for the BookedAppointment to update in case it exists.
     */
    where: BookedAppointmentWhereUniqueInput
    /**
     * In case the BookedAppointment found by the `where` argument doesn't exist, create a new BookedAppointment with this data.
     */
    create: XOR<BookedAppointmentCreateInput, BookedAppointmentUncheckedCreateInput>
    /**
     * In case the BookedAppointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookedAppointmentUpdateInput, BookedAppointmentUncheckedUpdateInput>
  }

  /**
   * BookedAppointment delete
   */
  export type BookedAppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
    /**
     * Filter which BookedAppointment to delete.
     */
    where: BookedAppointmentWhereUniqueInput
  }

  /**
   * BookedAppointment deleteMany
   */
  export type BookedAppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookedAppointments to delete
     */
    where?: BookedAppointmentWhereInput
  }

  /**
   * BookedAppointment without action
   */
  export type BookedAppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookedAppointment
     */
    select?: BookedAppointmentSelect<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    content: string | null
    senderId: string | null
    conversationId: string | null
    createdAt: Date | null
    fileName: string | null
    filePath: string | null
    fileType: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    content: string | null
    senderId: string | null
    conversationId: string | null
    createdAt: Date | null
    fileName: string | null
    filePath: string | null
    fileType: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    senderId: number
    conversationId: number
    createdAt: number
    fileName: number
    filePath: number
    fileType: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    senderId?: true
    conversationId?: true
    createdAt?: true
    fileName?: true
    filePath?: true
    fileType?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    senderId?: true
    conversationId?: true
    createdAt?: true
    fileName?: true
    filePath?: true
    fileType?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    senderId?: true
    conversationId?: true
    createdAt?: true
    fileName?: true
    filePath?: true
    fileType?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    content: string
    senderId: string
    conversationId: string
    createdAt: Date
    fileName: string | null
    filePath: string | null
    fileType: string | null
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    senderId?: boolean
    conversationId?: boolean
    createdAt?: boolean
    fileName?: boolean
    filePath?: boolean
    fileType?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    seenBy?: boolean | Message$seenByArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    senderId?: boolean
    conversationId?: boolean
    createdAt?: boolean
    fileName?: boolean
    filePath?: boolean
    fileType?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    senderId?: boolean
    conversationId?: boolean
    createdAt?: boolean
    fileName?: boolean
    filePath?: boolean
    fileType?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    seenBy?: boolean | Message$seenByArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      conversation: Prisma.$ConversationPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
      seenBy: Prisma.$SeenMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      senderId: string
      conversationId: string
      createdAt: Date
      fileName: string | null
      filePath: string | null
      fileType: string | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    seenBy<T extends Message$seenByArgs<ExtArgs> = {}>(args?: Subset<T, Message$seenByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly conversationId: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly fileName: FieldRef<"Message", 'String'>
    readonly filePath: FieldRef<"Message", 'String'>
    readonly fileType: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.seenBy
   */
  export type Message$seenByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    where?: SeenMessageWhereInput
    orderBy?: SeenMessageOrderByWithRelationInput | SeenMessageOrderByWithRelationInput[]
    cursor?: SeenMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeenMessageScalarFieldEnum | SeenMessageScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model SeenMessage
   */

  export type AggregateSeenMessage = {
    _count: SeenMessageCountAggregateOutputType | null
    _avg: SeenMessageAvgAggregateOutputType | null
    _sum: SeenMessageSumAggregateOutputType | null
    _min: SeenMessageMinAggregateOutputType | null
    _max: SeenMessageMaxAggregateOutputType | null
  }

  export type SeenMessageAvgAggregateOutputType = {
    id: number | null
    messageId: number | null
  }

  export type SeenMessageSumAggregateOutputType = {
    id: number | null
    messageId: number | null
  }

  export type SeenMessageMinAggregateOutputType = {
    id: number | null
    messageId: number | null
    userId: string | null
    seenAt: Date | null
  }

  export type SeenMessageMaxAggregateOutputType = {
    id: number | null
    messageId: number | null
    userId: string | null
    seenAt: Date | null
  }

  export type SeenMessageCountAggregateOutputType = {
    id: number
    messageId: number
    userId: number
    seenAt: number
    _all: number
  }


  export type SeenMessageAvgAggregateInputType = {
    id?: true
    messageId?: true
  }

  export type SeenMessageSumAggregateInputType = {
    id?: true
    messageId?: true
  }

  export type SeenMessageMinAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    seenAt?: true
  }

  export type SeenMessageMaxAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    seenAt?: true
  }

  export type SeenMessageCountAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    seenAt?: true
    _all?: true
  }

  export type SeenMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeenMessage to aggregate.
     */
    where?: SeenMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeenMessages to fetch.
     */
    orderBy?: SeenMessageOrderByWithRelationInput | SeenMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeenMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeenMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeenMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeenMessages
    **/
    _count?: true | SeenMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeenMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeenMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeenMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeenMessageMaxAggregateInputType
  }

  export type GetSeenMessageAggregateType<T extends SeenMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateSeenMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeenMessage[P]>
      : GetScalarType<T[P], AggregateSeenMessage[P]>
  }




  export type SeenMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeenMessageWhereInput
    orderBy?: SeenMessageOrderByWithAggregationInput | SeenMessageOrderByWithAggregationInput[]
    by: SeenMessageScalarFieldEnum[] | SeenMessageScalarFieldEnum
    having?: SeenMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeenMessageCountAggregateInputType | true
    _avg?: SeenMessageAvgAggregateInputType
    _sum?: SeenMessageSumAggregateInputType
    _min?: SeenMessageMinAggregateInputType
    _max?: SeenMessageMaxAggregateInputType
  }

  export type SeenMessageGroupByOutputType = {
    id: number
    messageId: number
    userId: string
    seenAt: Date
    _count: SeenMessageCountAggregateOutputType | null
    _avg: SeenMessageAvgAggregateOutputType | null
    _sum: SeenMessageSumAggregateOutputType | null
    _min: SeenMessageMinAggregateOutputType | null
    _max: SeenMessageMaxAggregateOutputType | null
  }

  type GetSeenMessageGroupByPayload<T extends SeenMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeenMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeenMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeenMessageGroupByOutputType[P]>
            : GetScalarType<T[P], SeenMessageGroupByOutputType[P]>
        }
      >
    >


  export type SeenMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    seenAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seenMessage"]>

  export type SeenMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    seenAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seenMessage"]>

  export type SeenMessageSelectScalar = {
    id?: boolean
    messageId?: boolean
    userId?: boolean
    seenAt?: boolean
  }

  export type SeenMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type SeenMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $SeenMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeenMessage"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      messageId: number
      userId: string
      seenAt: Date
    }, ExtArgs["result"]["seenMessage"]>
    composites: {}
  }

  type SeenMessageGetPayload<S extends boolean | null | undefined | SeenMessageDefaultArgs> = $Result.GetResult<Prisma.$SeenMessagePayload, S>

  type SeenMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeenMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeenMessageCountAggregateInputType | true
    }

  export interface SeenMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeenMessage'], meta: { name: 'SeenMessage' } }
    /**
     * Find zero or one SeenMessage that matches the filter.
     * @param {SeenMessageFindUniqueArgs} args - Arguments to find a SeenMessage
     * @example
     * // Get one SeenMessage
     * const seenMessage = await prisma.seenMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeenMessageFindUniqueArgs>(args: SelectSubset<T, SeenMessageFindUniqueArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeenMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeenMessageFindUniqueOrThrowArgs} args - Arguments to find a SeenMessage
     * @example
     * // Get one SeenMessage
     * const seenMessage = await prisma.seenMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeenMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, SeenMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeenMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageFindFirstArgs} args - Arguments to find a SeenMessage
     * @example
     * // Get one SeenMessage
     * const seenMessage = await prisma.seenMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeenMessageFindFirstArgs>(args?: SelectSubset<T, SeenMessageFindFirstArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeenMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageFindFirstOrThrowArgs} args - Arguments to find a SeenMessage
     * @example
     * // Get one SeenMessage
     * const seenMessage = await prisma.seenMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeenMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, SeenMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeenMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeenMessages
     * const seenMessages = await prisma.seenMessage.findMany()
     * 
     * // Get first 10 SeenMessages
     * const seenMessages = await prisma.seenMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seenMessageWithIdOnly = await prisma.seenMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeenMessageFindManyArgs>(args?: SelectSubset<T, SeenMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeenMessage.
     * @param {SeenMessageCreateArgs} args - Arguments to create a SeenMessage.
     * @example
     * // Create one SeenMessage
     * const SeenMessage = await prisma.seenMessage.create({
     *   data: {
     *     // ... data to create a SeenMessage
     *   }
     * })
     * 
     */
    create<T extends SeenMessageCreateArgs>(args: SelectSubset<T, SeenMessageCreateArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeenMessages.
     * @param {SeenMessageCreateManyArgs} args - Arguments to create many SeenMessages.
     * @example
     * // Create many SeenMessages
     * const seenMessage = await prisma.seenMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeenMessageCreateManyArgs>(args?: SelectSubset<T, SeenMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeenMessages and returns the data saved in the database.
     * @param {SeenMessageCreateManyAndReturnArgs} args - Arguments to create many SeenMessages.
     * @example
     * // Create many SeenMessages
     * const seenMessage = await prisma.seenMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeenMessages and only return the `id`
     * const seenMessageWithIdOnly = await prisma.seenMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeenMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, SeenMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeenMessage.
     * @param {SeenMessageDeleteArgs} args - Arguments to delete one SeenMessage.
     * @example
     * // Delete one SeenMessage
     * const SeenMessage = await prisma.seenMessage.delete({
     *   where: {
     *     // ... filter to delete one SeenMessage
     *   }
     * })
     * 
     */
    delete<T extends SeenMessageDeleteArgs>(args: SelectSubset<T, SeenMessageDeleteArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeenMessage.
     * @param {SeenMessageUpdateArgs} args - Arguments to update one SeenMessage.
     * @example
     * // Update one SeenMessage
     * const seenMessage = await prisma.seenMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeenMessageUpdateArgs>(args: SelectSubset<T, SeenMessageUpdateArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeenMessages.
     * @param {SeenMessageDeleteManyArgs} args - Arguments to filter SeenMessages to delete.
     * @example
     * // Delete a few SeenMessages
     * const { count } = await prisma.seenMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeenMessageDeleteManyArgs>(args?: SelectSubset<T, SeenMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeenMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeenMessages
     * const seenMessage = await prisma.seenMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeenMessageUpdateManyArgs>(args: SelectSubset<T, SeenMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeenMessage.
     * @param {SeenMessageUpsertArgs} args - Arguments to update or create a SeenMessage.
     * @example
     * // Update or create a SeenMessage
     * const seenMessage = await prisma.seenMessage.upsert({
     *   create: {
     *     // ... data to create a SeenMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeenMessage we want to update
     *   }
     * })
     */
    upsert<T extends SeenMessageUpsertArgs>(args: SelectSubset<T, SeenMessageUpsertArgs<ExtArgs>>): Prisma__SeenMessageClient<$Result.GetResult<Prisma.$SeenMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeenMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageCountArgs} args - Arguments to filter SeenMessages to count.
     * @example
     * // Count the number of SeenMessages
     * const count = await prisma.seenMessage.count({
     *   where: {
     *     // ... the filter for the SeenMessages we want to count
     *   }
     * })
    **/
    count<T extends SeenMessageCountArgs>(
      args?: Subset<T, SeenMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeenMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeenMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeenMessageAggregateArgs>(args: Subset<T, SeenMessageAggregateArgs>): Prisma.PrismaPromise<GetSeenMessageAggregateType<T>>

    /**
     * Group by SeenMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeenMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeenMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeenMessageGroupByArgs['orderBy'] }
        : { orderBy?: SeenMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeenMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeenMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeenMessage model
   */
  readonly fields: SeenMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeenMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeenMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeenMessage model
   */ 
  interface SeenMessageFieldRefs {
    readonly id: FieldRef<"SeenMessage", 'Int'>
    readonly messageId: FieldRef<"SeenMessage", 'Int'>
    readonly userId: FieldRef<"SeenMessage", 'String'>
    readonly seenAt: FieldRef<"SeenMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeenMessage findUnique
   */
  export type SeenMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * Filter, which SeenMessage to fetch.
     */
    where: SeenMessageWhereUniqueInput
  }

  /**
   * SeenMessage findUniqueOrThrow
   */
  export type SeenMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * Filter, which SeenMessage to fetch.
     */
    where: SeenMessageWhereUniqueInput
  }

  /**
   * SeenMessage findFirst
   */
  export type SeenMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * Filter, which SeenMessage to fetch.
     */
    where?: SeenMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeenMessages to fetch.
     */
    orderBy?: SeenMessageOrderByWithRelationInput | SeenMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeenMessages.
     */
    cursor?: SeenMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeenMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeenMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeenMessages.
     */
    distinct?: SeenMessageScalarFieldEnum | SeenMessageScalarFieldEnum[]
  }

  /**
   * SeenMessage findFirstOrThrow
   */
  export type SeenMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * Filter, which SeenMessage to fetch.
     */
    where?: SeenMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeenMessages to fetch.
     */
    orderBy?: SeenMessageOrderByWithRelationInput | SeenMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeenMessages.
     */
    cursor?: SeenMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeenMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeenMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeenMessages.
     */
    distinct?: SeenMessageScalarFieldEnum | SeenMessageScalarFieldEnum[]
  }

  /**
   * SeenMessage findMany
   */
  export type SeenMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * Filter, which SeenMessages to fetch.
     */
    where?: SeenMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeenMessages to fetch.
     */
    orderBy?: SeenMessageOrderByWithRelationInput | SeenMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeenMessages.
     */
    cursor?: SeenMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeenMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeenMessages.
     */
    skip?: number
    distinct?: SeenMessageScalarFieldEnum | SeenMessageScalarFieldEnum[]
  }

  /**
   * SeenMessage create
   */
  export type SeenMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a SeenMessage.
     */
    data: XOR<SeenMessageCreateInput, SeenMessageUncheckedCreateInput>
  }

  /**
   * SeenMessage createMany
   */
  export type SeenMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeenMessages.
     */
    data: SeenMessageCreateManyInput | SeenMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeenMessage createManyAndReturn
   */
  export type SeenMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeenMessages.
     */
    data: SeenMessageCreateManyInput | SeenMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeenMessage update
   */
  export type SeenMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a SeenMessage.
     */
    data: XOR<SeenMessageUpdateInput, SeenMessageUncheckedUpdateInput>
    /**
     * Choose, which SeenMessage to update.
     */
    where: SeenMessageWhereUniqueInput
  }

  /**
   * SeenMessage updateMany
   */
  export type SeenMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeenMessages.
     */
    data: XOR<SeenMessageUpdateManyMutationInput, SeenMessageUncheckedUpdateManyInput>
    /**
     * Filter which SeenMessages to update
     */
    where?: SeenMessageWhereInput
  }

  /**
   * SeenMessage upsert
   */
  export type SeenMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the SeenMessage to update in case it exists.
     */
    where: SeenMessageWhereUniqueInput
    /**
     * In case the SeenMessage found by the `where` argument doesn't exist, create a new SeenMessage with this data.
     */
    create: XOR<SeenMessageCreateInput, SeenMessageUncheckedCreateInput>
    /**
     * In case the SeenMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeenMessageUpdateInput, SeenMessageUncheckedUpdateInput>
  }

  /**
   * SeenMessage delete
   */
  export type SeenMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
    /**
     * Filter which SeenMessage to delete.
     */
    where: SeenMessageWhereUniqueInput
  }

  /**
   * SeenMessage deleteMany
   */
  export type SeenMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeenMessages to delete
     */
    where?: SeenMessageWhereInput
  }

  /**
   * SeenMessage without action
   */
  export type SeenMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeenMessage
     */
    select?: SeenMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeenMessageInclude<ExtArgs> | null
  }


  /**
   * Model Conversation
   */

  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    type: $Enums.ConversationType | null
    communityName: string | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    type: $Enums.ConversationType | null
    communityName: string | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    createdAt: number
    type: number
    communityName: number
    _all: number
  }


  export type ConversationMinAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    communityName?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    communityName?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    communityName?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }

  export type ConversationGroupByOutputType = {
    id: string
    createdAt: Date
    type: $Enums.ConversationType
    communityName: string | null
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    type?: boolean
    communityName?: boolean
    participants?: boolean | Conversation$participantsArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    type?: boolean
    communityName?: boolean
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    type?: boolean
    communityName?: boolean
  }

  export type ConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Conversation$participantsArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConversationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conversation"
    objects: {
      participants: Prisma.$ConversationParticipantPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      type: $Enums.ConversationType
      communityName: string | null
    }, ExtArgs["result"]["conversation"]>
    composites: {}
  }

  type ConversationGetPayload<S extends boolean | null | undefined | ConversationDefaultArgs> = $Result.GetResult<Prisma.$ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationFindUniqueArgs>(args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Conversation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationFindFirstArgs>(args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationFindManyArgs>(args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
     */
    create<T extends ConversationCreateArgs>(args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Conversations.
     * @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationCreateManyArgs>(args?: SelectSubset<T, ConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conversations and returns the data saved in the database.
     * @param {ConversationCreateManyAndReturnArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conversations and only return the `id`
     * const conversationWithIdOnly = await prisma.conversation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConversationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConversationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
     */
    delete<T extends ConversationDeleteArgs>(args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationUpdateArgs>(args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationDeleteManyArgs>(args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationUpdateManyArgs>(args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
     */
    upsert<T extends ConversationUpsertArgs>(args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends Conversation$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends Conversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conversation model
   */ 
  interface ConversationFieldRefs {
    readonly id: FieldRef<"Conversation", 'String'>
    readonly createdAt: FieldRef<"Conversation", 'DateTime'>
    readonly type: FieldRef<"Conversation", 'ConversationType'>
    readonly communityName: FieldRef<"Conversation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data?: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }

  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conversation createManyAndReturn
   */
  export type ConversationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }

  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation.participants
   */
  export type Conversation$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    where?: ConversationParticipantWhereInput
    orderBy?: ConversationParticipantOrderByWithRelationInput | ConversationParticipantOrderByWithRelationInput[]
    cursor?: ConversationParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationParticipantScalarFieldEnum | ConversationParticipantScalarFieldEnum[]
  }

  /**
   * Conversation.messages
   */
  export type Conversation$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Conversation without action
   */
  export type ConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
  }


  /**
   * Model ConversationParticipant
   */

  export type AggregateConversationParticipant = {
    _count: ConversationParticipantCountAggregateOutputType | null
    _avg: ConversationParticipantAvgAggregateOutputType | null
    _sum: ConversationParticipantSumAggregateOutputType | null
    _min: ConversationParticipantMinAggregateOutputType | null
    _max: ConversationParticipantMaxAggregateOutputType | null
  }

  export type ConversationParticipantAvgAggregateOutputType = {
    id: number | null
    unreadCount: number | null
  }

  export type ConversationParticipantSumAggregateOutputType = {
    id: number | null
    unreadCount: number | null
  }

  export type ConversationParticipantMinAggregateOutputType = {
    id: number | null
    conversationId: string | null
    userId: string | null
    joinedAt: Date | null
    unreadCount: number | null
  }

  export type ConversationParticipantMaxAggregateOutputType = {
    id: number | null
    conversationId: string | null
    userId: string | null
    joinedAt: Date | null
    unreadCount: number | null
  }

  export type ConversationParticipantCountAggregateOutputType = {
    id: number
    conversationId: number
    userId: number
    joinedAt: number
    unreadCount: number
    _all: number
  }


  export type ConversationParticipantAvgAggregateInputType = {
    id?: true
    unreadCount?: true
  }

  export type ConversationParticipantSumAggregateInputType = {
    id?: true
    unreadCount?: true
  }

  export type ConversationParticipantMinAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    joinedAt?: true
    unreadCount?: true
  }

  export type ConversationParticipantMaxAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    joinedAt?: true
    unreadCount?: true
  }

  export type ConversationParticipantCountAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    joinedAt?: true
    unreadCount?: true
    _all?: true
  }

  export type ConversationParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationParticipant to aggregate.
     */
    where?: ConversationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationParticipants to fetch.
     */
    orderBy?: ConversationParticipantOrderByWithRelationInput | ConversationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConversationParticipants
    **/
    _count?: true | ConversationParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationParticipantMaxAggregateInputType
  }

  export type GetConversationParticipantAggregateType<T extends ConversationParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateConversationParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversationParticipant[P]>
      : GetScalarType<T[P], AggregateConversationParticipant[P]>
  }




  export type ConversationParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationParticipantWhereInput
    orderBy?: ConversationParticipantOrderByWithAggregationInput | ConversationParticipantOrderByWithAggregationInput[]
    by: ConversationParticipantScalarFieldEnum[] | ConversationParticipantScalarFieldEnum
    having?: ConversationParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationParticipantCountAggregateInputType | true
    _avg?: ConversationParticipantAvgAggregateInputType
    _sum?: ConversationParticipantSumAggregateInputType
    _min?: ConversationParticipantMinAggregateInputType
    _max?: ConversationParticipantMaxAggregateInputType
  }

  export type ConversationParticipantGroupByOutputType = {
    id: number
    conversationId: string
    userId: string
    joinedAt: Date
    unreadCount: number
    _count: ConversationParticipantCountAggregateOutputType | null
    _avg: ConversationParticipantAvgAggregateOutputType | null
    _sum: ConversationParticipantSumAggregateOutputType | null
    _min: ConversationParticipantMinAggregateOutputType | null
    _max: ConversationParticipantMaxAggregateOutputType | null
  }

  type GetConversationParticipantGroupByPayload<T extends ConversationParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ConversationParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    joinedAt?: boolean
    unreadCount?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversationParticipant"]>

  export type ConversationParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    joinedAt?: boolean
    unreadCount?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversationParticipant"]>

  export type ConversationParticipantSelectScalar = {
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    joinedAt?: boolean
    unreadCount?: boolean
  }

  export type ConversationParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ConversationParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ConversationParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConversationParticipant"
    objects: {
      conversation: Prisma.$ConversationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      conversationId: string
      userId: string
      joinedAt: Date
      unreadCount: number
    }, ExtArgs["result"]["conversationParticipant"]>
    composites: {}
  }

  type ConversationParticipantGetPayload<S extends boolean | null | undefined | ConversationParticipantDefaultArgs> = $Result.GetResult<Prisma.$ConversationParticipantPayload, S>

  type ConversationParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationParticipantCountAggregateInputType | true
    }

  export interface ConversationParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationParticipant'], meta: { name: 'ConversationParticipant' } }
    /**
     * Find zero or one ConversationParticipant that matches the filter.
     * @param {ConversationParticipantFindUniqueArgs} args - Arguments to find a ConversationParticipant
     * @example
     * // Get one ConversationParticipant
     * const conversationParticipant = await prisma.conversationParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationParticipantFindUniqueArgs>(args: SelectSubset<T, ConversationParticipantFindUniqueArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConversationParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationParticipantFindUniqueOrThrowArgs} args - Arguments to find a ConversationParticipant
     * @example
     * // Get one ConversationParticipant
     * const conversationParticipant = await prisma.conversationParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConversationParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantFindFirstArgs} args - Arguments to find a ConversationParticipant
     * @example
     * // Get one ConversationParticipant
     * const conversationParticipant = await prisma.conversationParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationParticipantFindFirstArgs>(args?: SelectSubset<T, ConversationParticipantFindFirstArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConversationParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantFindFirstOrThrowArgs} args - Arguments to find a ConversationParticipant
     * @example
     * // Get one ConversationParticipant
     * const conversationParticipant = await prisma.conversationParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConversationParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConversationParticipants
     * const conversationParticipants = await prisma.conversationParticipant.findMany()
     * 
     * // Get first 10 ConversationParticipants
     * const conversationParticipants = await prisma.conversationParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationParticipantWithIdOnly = await prisma.conversationParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationParticipantFindManyArgs>(args?: SelectSubset<T, ConversationParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConversationParticipant.
     * @param {ConversationParticipantCreateArgs} args - Arguments to create a ConversationParticipant.
     * @example
     * // Create one ConversationParticipant
     * const ConversationParticipant = await prisma.conversationParticipant.create({
     *   data: {
     *     // ... data to create a ConversationParticipant
     *   }
     * })
     * 
     */
    create<T extends ConversationParticipantCreateArgs>(args: SelectSubset<T, ConversationParticipantCreateArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConversationParticipants.
     * @param {ConversationParticipantCreateManyArgs} args - Arguments to create many ConversationParticipants.
     * @example
     * // Create many ConversationParticipants
     * const conversationParticipant = await prisma.conversationParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationParticipantCreateManyArgs>(args?: SelectSubset<T, ConversationParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConversationParticipants and returns the data saved in the database.
     * @param {ConversationParticipantCreateManyAndReturnArgs} args - Arguments to create many ConversationParticipants.
     * @example
     * // Create many ConversationParticipants
     * const conversationParticipant = await prisma.conversationParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConversationParticipants and only return the `id`
     * const conversationParticipantWithIdOnly = await prisma.conversationParticipant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConversationParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, ConversationParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConversationParticipant.
     * @param {ConversationParticipantDeleteArgs} args - Arguments to delete one ConversationParticipant.
     * @example
     * // Delete one ConversationParticipant
     * const ConversationParticipant = await prisma.conversationParticipant.delete({
     *   where: {
     *     // ... filter to delete one ConversationParticipant
     *   }
     * })
     * 
     */
    delete<T extends ConversationParticipantDeleteArgs>(args: SelectSubset<T, ConversationParticipantDeleteArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConversationParticipant.
     * @param {ConversationParticipantUpdateArgs} args - Arguments to update one ConversationParticipant.
     * @example
     * // Update one ConversationParticipant
     * const conversationParticipant = await prisma.conversationParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationParticipantUpdateArgs>(args: SelectSubset<T, ConversationParticipantUpdateArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConversationParticipants.
     * @param {ConversationParticipantDeleteManyArgs} args - Arguments to filter ConversationParticipants to delete.
     * @example
     * // Delete a few ConversationParticipants
     * const { count } = await prisma.conversationParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationParticipantDeleteManyArgs>(args?: SelectSubset<T, ConversationParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConversationParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConversationParticipants
     * const conversationParticipant = await prisma.conversationParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationParticipantUpdateManyArgs>(args: SelectSubset<T, ConversationParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConversationParticipant.
     * @param {ConversationParticipantUpsertArgs} args - Arguments to update or create a ConversationParticipant.
     * @example
     * // Update or create a ConversationParticipant
     * const conversationParticipant = await prisma.conversationParticipant.upsert({
     *   create: {
     *     // ... data to create a ConversationParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConversationParticipant we want to update
     *   }
     * })
     */
    upsert<T extends ConversationParticipantUpsertArgs>(args: SelectSubset<T, ConversationParticipantUpsertArgs<ExtArgs>>): Prisma__ConversationParticipantClient<$Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConversationParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantCountArgs} args - Arguments to filter ConversationParticipants to count.
     * @example
     * // Count the number of ConversationParticipants
     * const count = await prisma.conversationParticipant.count({
     *   where: {
     *     // ... the filter for the ConversationParticipants we want to count
     *   }
     * })
    **/
    count<T extends ConversationParticipantCountArgs>(
      args?: Subset<T, ConversationParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConversationParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationParticipantAggregateArgs>(args: Subset<T, ConversationParticipantAggregateArgs>): Prisma.PrismaPromise<GetConversationParticipantAggregateType<T>>

    /**
     * Group by ConversationParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ConversationParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConversationParticipant model
   */
  readonly fields: ConversationParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConversationParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConversationParticipant model
   */ 
  interface ConversationParticipantFieldRefs {
    readonly id: FieldRef<"ConversationParticipant", 'Int'>
    readonly conversationId: FieldRef<"ConversationParticipant", 'String'>
    readonly userId: FieldRef<"ConversationParticipant", 'String'>
    readonly joinedAt: FieldRef<"ConversationParticipant", 'DateTime'>
    readonly unreadCount: FieldRef<"ConversationParticipant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ConversationParticipant findUnique
   */
  export type ConversationParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ConversationParticipant to fetch.
     */
    where: ConversationParticipantWhereUniqueInput
  }

  /**
   * ConversationParticipant findUniqueOrThrow
   */
  export type ConversationParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ConversationParticipant to fetch.
     */
    where: ConversationParticipantWhereUniqueInput
  }

  /**
   * ConversationParticipant findFirst
   */
  export type ConversationParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ConversationParticipant to fetch.
     */
    where?: ConversationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationParticipants to fetch.
     */
    orderBy?: ConversationParticipantOrderByWithRelationInput | ConversationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationParticipants.
     */
    cursor?: ConversationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationParticipants.
     */
    distinct?: ConversationParticipantScalarFieldEnum | ConversationParticipantScalarFieldEnum[]
  }

  /**
   * ConversationParticipant findFirstOrThrow
   */
  export type ConversationParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ConversationParticipant to fetch.
     */
    where?: ConversationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationParticipants to fetch.
     */
    orderBy?: ConversationParticipantOrderByWithRelationInput | ConversationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationParticipants.
     */
    cursor?: ConversationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationParticipants.
     */
    distinct?: ConversationParticipantScalarFieldEnum | ConversationParticipantScalarFieldEnum[]
  }

  /**
   * ConversationParticipant findMany
   */
  export type ConversationParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ConversationParticipants to fetch.
     */
    where?: ConversationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationParticipants to fetch.
     */
    orderBy?: ConversationParticipantOrderByWithRelationInput | ConversationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConversationParticipants.
     */
    cursor?: ConversationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationParticipants.
     */
    skip?: number
    distinct?: ConversationParticipantScalarFieldEnum | ConversationParticipantScalarFieldEnum[]
  }

  /**
   * ConversationParticipant create
   */
  export type ConversationParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a ConversationParticipant.
     */
    data: XOR<ConversationParticipantCreateInput, ConversationParticipantUncheckedCreateInput>
  }

  /**
   * ConversationParticipant createMany
   */
  export type ConversationParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConversationParticipants.
     */
    data: ConversationParticipantCreateManyInput | ConversationParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConversationParticipant createManyAndReturn
   */
  export type ConversationParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConversationParticipants.
     */
    data: ConversationParticipantCreateManyInput | ConversationParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConversationParticipant update
   */
  export type ConversationParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a ConversationParticipant.
     */
    data: XOR<ConversationParticipantUpdateInput, ConversationParticipantUncheckedUpdateInput>
    /**
     * Choose, which ConversationParticipant to update.
     */
    where: ConversationParticipantWhereUniqueInput
  }

  /**
   * ConversationParticipant updateMany
   */
  export type ConversationParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConversationParticipants.
     */
    data: XOR<ConversationParticipantUpdateManyMutationInput, ConversationParticipantUncheckedUpdateManyInput>
    /**
     * Filter which ConversationParticipants to update
     */
    where?: ConversationParticipantWhereInput
  }

  /**
   * ConversationParticipant upsert
   */
  export type ConversationParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the ConversationParticipant to update in case it exists.
     */
    where: ConversationParticipantWhereUniqueInput
    /**
     * In case the ConversationParticipant found by the `where` argument doesn't exist, create a new ConversationParticipant with this data.
     */
    create: XOR<ConversationParticipantCreateInput, ConversationParticipantUncheckedCreateInput>
    /**
     * In case the ConversationParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationParticipantUpdateInput, ConversationParticipantUncheckedUpdateInput>
  }

  /**
   * ConversationParticipant delete
   */
  export type ConversationParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
    /**
     * Filter which ConversationParticipant to delete.
     */
    where: ConversationParticipantWhereUniqueInput
  }

  /**
   * ConversationParticipant deleteMany
   */
  export type ConversationParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationParticipants to delete
     */
    where?: ConversationParticipantWhereInput
  }

  /**
   * ConversationParticipant without action
   */
  export type ConversationParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationParticipant
     */
    select?: ConversationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationParticipantInclude<ExtArgs> | null
  }


  /**
   * Model doctor_availability_details
   */

  export type AggregateDoctor_availability_details = {
    _count: Doctor_availability_detailsCountAggregateOutputType | null
    _avg: Doctor_availability_detailsAvgAggregateOutputType | null
    _sum: Doctor_availability_detailsSumAggregateOutputType | null
    _min: Doctor_availability_detailsMinAggregateOutputType | null
    _max: Doctor_availability_detailsMaxAggregateOutputType | null
  }

  export type Doctor_availability_detailsAvgAggregateOutputType = {
    id: number | null
  }

  export type Doctor_availability_detailsSumAggregateOutputType = {
    id: number | null
  }

  export type Doctor_availability_detailsMinAggregateOutputType = {
    id: number | null
    userId: string | null
    sessionFees: string | null
    sessionLength: string | null
    availableTimeFrom: string | null
  }

  export type Doctor_availability_detailsMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    sessionFees: string | null
    sessionLength: string | null
    availableTimeFrom: string | null
  }

  export type Doctor_availability_detailsCountAggregateOutputType = {
    id: number
    userId: number
    sessionFees: number
    sessionLength: number
    languages: number
    availableDays: number
    availableTimeFrom: number
    availableTimeSlot: number
    _all: number
  }


  export type Doctor_availability_detailsAvgAggregateInputType = {
    id?: true
  }

  export type Doctor_availability_detailsSumAggregateInputType = {
    id?: true
  }

  export type Doctor_availability_detailsMinAggregateInputType = {
    id?: true
    userId?: true
    sessionFees?: true
    sessionLength?: true
    availableTimeFrom?: true
  }

  export type Doctor_availability_detailsMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionFees?: true
    sessionLength?: true
    availableTimeFrom?: true
  }

  export type Doctor_availability_detailsCountAggregateInputType = {
    id?: true
    userId?: true
    sessionFees?: true
    sessionLength?: true
    languages?: true
    availableDays?: true
    availableTimeFrom?: true
    availableTimeSlot?: true
    _all?: true
  }

  export type Doctor_availability_detailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_availability_details to aggregate.
     */
    where?: doctor_availability_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_availability_details to fetch.
     */
    orderBy?: doctor_availability_detailsOrderByWithRelationInput | doctor_availability_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctor_availability_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_availability_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_availability_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctor_availability_details
    **/
    _count?: true | Doctor_availability_detailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Doctor_availability_detailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Doctor_availability_detailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Doctor_availability_detailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Doctor_availability_detailsMaxAggregateInputType
  }

  export type GetDoctor_availability_detailsAggregateType<T extends Doctor_availability_detailsAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor_availability_details]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor_availability_details[P]>
      : GetScalarType<T[P], AggregateDoctor_availability_details[P]>
  }




  export type doctor_availability_detailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctor_availability_detailsWhereInput
    orderBy?: doctor_availability_detailsOrderByWithAggregationInput | doctor_availability_detailsOrderByWithAggregationInput[]
    by: Doctor_availability_detailsScalarFieldEnum[] | Doctor_availability_detailsScalarFieldEnum
    having?: doctor_availability_detailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Doctor_availability_detailsCountAggregateInputType | true
    _avg?: Doctor_availability_detailsAvgAggregateInputType
    _sum?: Doctor_availability_detailsSumAggregateInputType
    _min?: Doctor_availability_detailsMinAggregateInputType
    _max?: Doctor_availability_detailsMaxAggregateInputType
  }

  export type Doctor_availability_detailsGroupByOutputType = {
    id: number
    userId: string
    sessionFees: string
    sessionLength: string
    languages: string[]
    availableDays: string[]
    availableTimeFrom: string
    availableTimeSlot: string[]
    _count: Doctor_availability_detailsCountAggregateOutputType | null
    _avg: Doctor_availability_detailsAvgAggregateOutputType | null
    _sum: Doctor_availability_detailsSumAggregateOutputType | null
    _min: Doctor_availability_detailsMinAggregateOutputType | null
    _max: Doctor_availability_detailsMaxAggregateOutputType | null
  }

  type GetDoctor_availability_detailsGroupByPayload<T extends doctor_availability_detailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Doctor_availability_detailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Doctor_availability_detailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Doctor_availability_detailsGroupByOutputType[P]>
            : GetScalarType<T[P], Doctor_availability_detailsGroupByOutputType[P]>
        }
      >
    >


  export type doctor_availability_detailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionFees?: boolean
    sessionLength?: boolean
    languages?: boolean
    availableDays?: boolean
    availableTimeFrom?: boolean
    availableTimeSlot?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor_availability_details"]>

  export type doctor_availability_detailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionFees?: boolean
    sessionLength?: boolean
    languages?: boolean
    availableDays?: boolean
    availableTimeFrom?: boolean
    availableTimeSlot?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor_availability_details"]>

  export type doctor_availability_detailsSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionFees?: boolean
    sessionLength?: boolean
    languages?: boolean
    availableDays?: boolean
    availableTimeFrom?: boolean
    availableTimeSlot?: boolean
  }

  export type doctor_availability_detailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type doctor_availability_detailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $doctor_availability_detailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doctor_availability_details"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      sessionFees: string
      sessionLength: string
      languages: string[]
      availableDays: string[]
      availableTimeFrom: string
      availableTimeSlot: string[]
    }, ExtArgs["result"]["doctor_availability_details"]>
    composites: {}
  }

  type doctor_availability_detailsGetPayload<S extends boolean | null | undefined | doctor_availability_detailsDefaultArgs> = $Result.GetResult<Prisma.$doctor_availability_detailsPayload, S>

  type doctor_availability_detailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doctor_availability_detailsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Doctor_availability_detailsCountAggregateInputType | true
    }

  export interface doctor_availability_detailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctor_availability_details'], meta: { name: 'doctor_availability_details' } }
    /**
     * Find zero or one Doctor_availability_details that matches the filter.
     * @param {doctor_availability_detailsFindUniqueArgs} args - Arguments to find a Doctor_availability_details
     * @example
     * // Get one Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends doctor_availability_detailsFindUniqueArgs>(args: SelectSubset<T, doctor_availability_detailsFindUniqueArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctor_availability_details that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doctor_availability_detailsFindUniqueOrThrowArgs} args - Arguments to find a Doctor_availability_details
     * @example
     * // Get one Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends doctor_availability_detailsFindUniqueOrThrowArgs>(args: SelectSubset<T, doctor_availability_detailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctor_availability_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_availability_detailsFindFirstArgs} args - Arguments to find a Doctor_availability_details
     * @example
     * // Get one Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends doctor_availability_detailsFindFirstArgs>(args?: SelectSubset<T, doctor_availability_detailsFindFirstArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctor_availability_details that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_availability_detailsFindFirstOrThrowArgs} args - Arguments to find a Doctor_availability_details
     * @example
     * // Get one Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends doctor_availability_detailsFindFirstOrThrowArgs>(args?: SelectSubset<T, doctor_availability_detailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctor_availability_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_availability_detailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.findMany()
     * 
     * // Get first 10 Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctor_availability_detailsWithIdOnly = await prisma.doctor_availability_details.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends doctor_availability_detailsFindManyArgs>(args?: SelectSubset<T, doctor_availability_detailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctor_availability_details.
     * @param {doctor_availability_detailsCreateArgs} args - Arguments to create a Doctor_availability_details.
     * @example
     * // Create one Doctor_availability_details
     * const Doctor_availability_details = await prisma.doctor_availability_details.create({
     *   data: {
     *     // ... data to create a Doctor_availability_details
     *   }
     * })
     * 
     */
    create<T extends doctor_availability_detailsCreateArgs>(args: SelectSubset<T, doctor_availability_detailsCreateArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctor_availability_details.
     * @param {doctor_availability_detailsCreateManyArgs} args - Arguments to create many Doctor_availability_details.
     * @example
     * // Create many Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends doctor_availability_detailsCreateManyArgs>(args?: SelectSubset<T, doctor_availability_detailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctor_availability_details and returns the data saved in the database.
     * @param {doctor_availability_detailsCreateManyAndReturnArgs} args - Arguments to create many Doctor_availability_details.
     * @example
     * // Create many Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctor_availability_details and only return the `id`
     * const doctor_availability_detailsWithIdOnly = await prisma.doctor_availability_details.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends doctor_availability_detailsCreateManyAndReturnArgs>(args?: SelectSubset<T, doctor_availability_detailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doctor_availability_details.
     * @param {doctor_availability_detailsDeleteArgs} args - Arguments to delete one Doctor_availability_details.
     * @example
     * // Delete one Doctor_availability_details
     * const Doctor_availability_details = await prisma.doctor_availability_details.delete({
     *   where: {
     *     // ... filter to delete one Doctor_availability_details
     *   }
     * })
     * 
     */
    delete<T extends doctor_availability_detailsDeleteArgs>(args: SelectSubset<T, doctor_availability_detailsDeleteArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctor_availability_details.
     * @param {doctor_availability_detailsUpdateArgs} args - Arguments to update one Doctor_availability_details.
     * @example
     * // Update one Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends doctor_availability_detailsUpdateArgs>(args: SelectSubset<T, doctor_availability_detailsUpdateArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctor_availability_details.
     * @param {doctor_availability_detailsDeleteManyArgs} args - Arguments to filter Doctor_availability_details to delete.
     * @example
     * // Delete a few Doctor_availability_details
     * const { count } = await prisma.doctor_availability_details.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends doctor_availability_detailsDeleteManyArgs>(args?: SelectSubset<T, doctor_availability_detailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctor_availability_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_availability_detailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends doctor_availability_detailsUpdateManyArgs>(args: SelectSubset<T, doctor_availability_detailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor_availability_details.
     * @param {doctor_availability_detailsUpsertArgs} args - Arguments to update or create a Doctor_availability_details.
     * @example
     * // Update or create a Doctor_availability_details
     * const doctor_availability_details = await prisma.doctor_availability_details.upsert({
     *   create: {
     *     // ... data to create a Doctor_availability_details
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor_availability_details we want to update
     *   }
     * })
     */
    upsert<T extends doctor_availability_detailsUpsertArgs>(args: SelectSubset<T, doctor_availability_detailsUpsertArgs<ExtArgs>>): Prisma__doctor_availability_detailsClient<$Result.GetResult<Prisma.$doctor_availability_detailsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctor_availability_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_availability_detailsCountArgs} args - Arguments to filter Doctor_availability_details to count.
     * @example
     * // Count the number of Doctor_availability_details
     * const count = await prisma.doctor_availability_details.count({
     *   where: {
     *     // ... the filter for the Doctor_availability_details we want to count
     *   }
     * })
    **/
    count<T extends doctor_availability_detailsCountArgs>(
      args?: Subset<T, doctor_availability_detailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Doctor_availability_detailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor_availability_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Doctor_availability_detailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Doctor_availability_detailsAggregateArgs>(args: Subset<T, Doctor_availability_detailsAggregateArgs>): Prisma.PrismaPromise<GetDoctor_availability_detailsAggregateType<T>>

    /**
     * Group by Doctor_availability_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_availability_detailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctor_availability_detailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctor_availability_detailsGroupByArgs['orderBy'] }
        : { orderBy?: doctor_availability_detailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctor_availability_detailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctor_availability_detailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctor_availability_details model
   */
  readonly fields: doctor_availability_detailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctor_availability_details.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctor_availability_detailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the doctor_availability_details model
   */ 
  interface doctor_availability_detailsFieldRefs {
    readonly id: FieldRef<"doctor_availability_details", 'Int'>
    readonly userId: FieldRef<"doctor_availability_details", 'String'>
    readonly sessionFees: FieldRef<"doctor_availability_details", 'String'>
    readonly sessionLength: FieldRef<"doctor_availability_details", 'String'>
    readonly languages: FieldRef<"doctor_availability_details", 'String[]'>
    readonly availableDays: FieldRef<"doctor_availability_details", 'String[]'>
    readonly availableTimeFrom: FieldRef<"doctor_availability_details", 'String'>
    readonly availableTimeSlot: FieldRef<"doctor_availability_details", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * doctor_availability_details findUnique
   */
  export type doctor_availability_detailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * Filter, which doctor_availability_details to fetch.
     */
    where: doctor_availability_detailsWhereUniqueInput
  }

  /**
   * doctor_availability_details findUniqueOrThrow
   */
  export type doctor_availability_detailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * Filter, which doctor_availability_details to fetch.
     */
    where: doctor_availability_detailsWhereUniqueInput
  }

  /**
   * doctor_availability_details findFirst
   */
  export type doctor_availability_detailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * Filter, which doctor_availability_details to fetch.
     */
    where?: doctor_availability_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_availability_details to fetch.
     */
    orderBy?: doctor_availability_detailsOrderByWithRelationInput | doctor_availability_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_availability_details.
     */
    cursor?: doctor_availability_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_availability_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_availability_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_availability_details.
     */
    distinct?: Doctor_availability_detailsScalarFieldEnum | Doctor_availability_detailsScalarFieldEnum[]
  }

  /**
   * doctor_availability_details findFirstOrThrow
   */
  export type doctor_availability_detailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * Filter, which doctor_availability_details to fetch.
     */
    where?: doctor_availability_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_availability_details to fetch.
     */
    orderBy?: doctor_availability_detailsOrderByWithRelationInput | doctor_availability_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_availability_details.
     */
    cursor?: doctor_availability_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_availability_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_availability_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_availability_details.
     */
    distinct?: Doctor_availability_detailsScalarFieldEnum | Doctor_availability_detailsScalarFieldEnum[]
  }

  /**
   * doctor_availability_details findMany
   */
  export type doctor_availability_detailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * Filter, which doctor_availability_details to fetch.
     */
    where?: doctor_availability_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_availability_details to fetch.
     */
    orderBy?: doctor_availability_detailsOrderByWithRelationInput | doctor_availability_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctor_availability_details.
     */
    cursor?: doctor_availability_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_availability_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_availability_details.
     */
    skip?: number
    distinct?: Doctor_availability_detailsScalarFieldEnum | Doctor_availability_detailsScalarFieldEnum[]
  }

  /**
   * doctor_availability_details create
   */
  export type doctor_availability_detailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * The data needed to create a doctor_availability_details.
     */
    data: XOR<doctor_availability_detailsCreateInput, doctor_availability_detailsUncheckedCreateInput>
  }

  /**
   * doctor_availability_details createMany
   */
  export type doctor_availability_detailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctor_availability_details.
     */
    data: doctor_availability_detailsCreateManyInput | doctor_availability_detailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doctor_availability_details createManyAndReturn
   */
  export type doctor_availability_detailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many doctor_availability_details.
     */
    data: doctor_availability_detailsCreateManyInput | doctor_availability_detailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * doctor_availability_details update
   */
  export type doctor_availability_detailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * The data needed to update a doctor_availability_details.
     */
    data: XOR<doctor_availability_detailsUpdateInput, doctor_availability_detailsUncheckedUpdateInput>
    /**
     * Choose, which doctor_availability_details to update.
     */
    where: doctor_availability_detailsWhereUniqueInput
  }

  /**
   * doctor_availability_details updateMany
   */
  export type doctor_availability_detailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctor_availability_details.
     */
    data: XOR<doctor_availability_detailsUpdateManyMutationInput, doctor_availability_detailsUncheckedUpdateManyInput>
    /**
     * Filter which doctor_availability_details to update
     */
    where?: doctor_availability_detailsWhereInput
  }

  /**
   * doctor_availability_details upsert
   */
  export type doctor_availability_detailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * The filter to search for the doctor_availability_details to update in case it exists.
     */
    where: doctor_availability_detailsWhereUniqueInput
    /**
     * In case the doctor_availability_details found by the `where` argument doesn't exist, create a new doctor_availability_details with this data.
     */
    create: XOR<doctor_availability_detailsCreateInput, doctor_availability_detailsUncheckedCreateInput>
    /**
     * In case the doctor_availability_details was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctor_availability_detailsUpdateInput, doctor_availability_detailsUncheckedUpdateInput>
  }

  /**
   * doctor_availability_details delete
   */
  export type doctor_availability_detailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
    /**
     * Filter which doctor_availability_details to delete.
     */
    where: doctor_availability_detailsWhereUniqueInput
  }

  /**
   * doctor_availability_details deleteMany
   */
  export type doctor_availability_detailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_availability_details to delete
     */
    where?: doctor_availability_detailsWhereInput
  }

  /**
   * doctor_availability_details without action
   */
  export type doctor_availability_detailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_availability_details
     */
    select?: doctor_availability_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_availability_detailsInclude<ExtArgs> | null
  }


  /**
   * Model doctor_licenses
   */

  export type AggregateDoctor_licenses = {
    _count: Doctor_licensesCountAggregateOutputType | null
    _avg: Doctor_licensesAvgAggregateOutputType | null
    _sum: Doctor_licensesSumAggregateOutputType | null
    _min: Doctor_licensesMinAggregateOutputType | null
    _max: Doctor_licensesMaxAggregateOutputType | null
  }

  export type Doctor_licensesAvgAggregateOutputType = {
    id: number | null
  }

  export type Doctor_licensesSumAggregateOutputType = {
    id: number | null
  }

  export type Doctor_licensesMinAggregateOutputType = {
    id: number | null
    userId: string | null
    imageUrl1: string | null
    imageUrl2: string | null
    registrationNumber1: string | null
    registrationNumber2: string | null
  }

  export type Doctor_licensesMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    imageUrl1: string | null
    imageUrl2: string | null
    registrationNumber1: string | null
    registrationNumber2: string | null
  }

  export type Doctor_licensesCountAggregateOutputType = {
    id: number
    userId: number
    imageUrl1: number
    imageUrl2: number
    registrationNumber1: number
    registrationNumber2: number
    _all: number
  }


  export type Doctor_licensesAvgAggregateInputType = {
    id?: true
  }

  export type Doctor_licensesSumAggregateInputType = {
    id?: true
  }

  export type Doctor_licensesMinAggregateInputType = {
    id?: true
    userId?: true
    imageUrl1?: true
    imageUrl2?: true
    registrationNumber1?: true
    registrationNumber2?: true
  }

  export type Doctor_licensesMaxAggregateInputType = {
    id?: true
    userId?: true
    imageUrl1?: true
    imageUrl2?: true
    registrationNumber1?: true
    registrationNumber2?: true
  }

  export type Doctor_licensesCountAggregateInputType = {
    id?: true
    userId?: true
    imageUrl1?: true
    imageUrl2?: true
    registrationNumber1?: true
    registrationNumber2?: true
    _all?: true
  }

  export type Doctor_licensesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_licenses to aggregate.
     */
    where?: doctor_licensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_licenses to fetch.
     */
    orderBy?: doctor_licensesOrderByWithRelationInput | doctor_licensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctor_licensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctor_licenses
    **/
    _count?: true | Doctor_licensesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Doctor_licensesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Doctor_licensesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Doctor_licensesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Doctor_licensesMaxAggregateInputType
  }

  export type GetDoctor_licensesAggregateType<T extends Doctor_licensesAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor_licenses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor_licenses[P]>
      : GetScalarType<T[P], AggregateDoctor_licenses[P]>
  }




  export type doctor_licensesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctor_licensesWhereInput
    orderBy?: doctor_licensesOrderByWithAggregationInput | doctor_licensesOrderByWithAggregationInput[]
    by: Doctor_licensesScalarFieldEnum[] | Doctor_licensesScalarFieldEnum
    having?: doctor_licensesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Doctor_licensesCountAggregateInputType | true
    _avg?: Doctor_licensesAvgAggregateInputType
    _sum?: Doctor_licensesSumAggregateInputType
    _min?: Doctor_licensesMinAggregateInputType
    _max?: Doctor_licensesMaxAggregateInputType
  }

  export type Doctor_licensesGroupByOutputType = {
    id: number
    userId: string
    imageUrl1: string
    imageUrl2: string
    registrationNumber1: string
    registrationNumber2: string
    _count: Doctor_licensesCountAggregateOutputType | null
    _avg: Doctor_licensesAvgAggregateOutputType | null
    _sum: Doctor_licensesSumAggregateOutputType | null
    _min: Doctor_licensesMinAggregateOutputType | null
    _max: Doctor_licensesMaxAggregateOutputType | null
  }

  type GetDoctor_licensesGroupByPayload<T extends doctor_licensesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Doctor_licensesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Doctor_licensesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Doctor_licensesGroupByOutputType[P]>
            : GetScalarType<T[P], Doctor_licensesGroupByOutputType[P]>
        }
      >
    >


  export type doctor_licensesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    imageUrl1?: boolean
    imageUrl2?: boolean
    registrationNumber1?: boolean
    registrationNumber2?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor_licenses"]>

  export type doctor_licensesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    imageUrl1?: boolean
    imageUrl2?: boolean
    registrationNumber1?: boolean
    registrationNumber2?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor_licenses"]>

  export type doctor_licensesSelectScalar = {
    id?: boolean
    userId?: boolean
    imageUrl1?: boolean
    imageUrl2?: boolean
    registrationNumber1?: boolean
    registrationNumber2?: boolean
  }

  export type doctor_licensesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type doctor_licensesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $doctor_licensesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doctor_licenses"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      imageUrl1: string
      imageUrl2: string
      registrationNumber1: string
      registrationNumber2: string
    }, ExtArgs["result"]["doctor_licenses"]>
    composites: {}
  }

  type doctor_licensesGetPayload<S extends boolean | null | undefined | doctor_licensesDefaultArgs> = $Result.GetResult<Prisma.$doctor_licensesPayload, S>

  type doctor_licensesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doctor_licensesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Doctor_licensesCountAggregateInputType | true
    }

  export interface doctor_licensesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctor_licenses'], meta: { name: 'doctor_licenses' } }
    /**
     * Find zero or one Doctor_licenses that matches the filter.
     * @param {doctor_licensesFindUniqueArgs} args - Arguments to find a Doctor_licenses
     * @example
     * // Get one Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends doctor_licensesFindUniqueArgs>(args: SelectSubset<T, doctor_licensesFindUniqueArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctor_licenses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doctor_licensesFindUniqueOrThrowArgs} args - Arguments to find a Doctor_licenses
     * @example
     * // Get one Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends doctor_licensesFindUniqueOrThrowArgs>(args: SelectSubset<T, doctor_licensesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctor_licenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_licensesFindFirstArgs} args - Arguments to find a Doctor_licenses
     * @example
     * // Get one Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends doctor_licensesFindFirstArgs>(args?: SelectSubset<T, doctor_licensesFindFirstArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctor_licenses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_licensesFindFirstOrThrowArgs} args - Arguments to find a Doctor_licenses
     * @example
     * // Get one Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends doctor_licensesFindFirstOrThrowArgs>(args?: SelectSubset<T, doctor_licensesFindFirstOrThrowArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctor_licenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_licensesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.findMany()
     * 
     * // Get first 10 Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctor_licensesWithIdOnly = await prisma.doctor_licenses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends doctor_licensesFindManyArgs>(args?: SelectSubset<T, doctor_licensesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctor_licenses.
     * @param {doctor_licensesCreateArgs} args - Arguments to create a Doctor_licenses.
     * @example
     * // Create one Doctor_licenses
     * const Doctor_licenses = await prisma.doctor_licenses.create({
     *   data: {
     *     // ... data to create a Doctor_licenses
     *   }
     * })
     * 
     */
    create<T extends doctor_licensesCreateArgs>(args: SelectSubset<T, doctor_licensesCreateArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctor_licenses.
     * @param {doctor_licensesCreateManyArgs} args - Arguments to create many Doctor_licenses.
     * @example
     * // Create many Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends doctor_licensesCreateManyArgs>(args?: SelectSubset<T, doctor_licensesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctor_licenses and returns the data saved in the database.
     * @param {doctor_licensesCreateManyAndReturnArgs} args - Arguments to create many Doctor_licenses.
     * @example
     * // Create many Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctor_licenses and only return the `id`
     * const doctor_licensesWithIdOnly = await prisma.doctor_licenses.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends doctor_licensesCreateManyAndReturnArgs>(args?: SelectSubset<T, doctor_licensesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doctor_licenses.
     * @param {doctor_licensesDeleteArgs} args - Arguments to delete one Doctor_licenses.
     * @example
     * // Delete one Doctor_licenses
     * const Doctor_licenses = await prisma.doctor_licenses.delete({
     *   where: {
     *     // ... filter to delete one Doctor_licenses
     *   }
     * })
     * 
     */
    delete<T extends doctor_licensesDeleteArgs>(args: SelectSubset<T, doctor_licensesDeleteArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctor_licenses.
     * @param {doctor_licensesUpdateArgs} args - Arguments to update one Doctor_licenses.
     * @example
     * // Update one Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends doctor_licensesUpdateArgs>(args: SelectSubset<T, doctor_licensesUpdateArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctor_licenses.
     * @param {doctor_licensesDeleteManyArgs} args - Arguments to filter Doctor_licenses to delete.
     * @example
     * // Delete a few Doctor_licenses
     * const { count } = await prisma.doctor_licenses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends doctor_licensesDeleteManyArgs>(args?: SelectSubset<T, doctor_licensesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctor_licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_licensesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends doctor_licensesUpdateManyArgs>(args: SelectSubset<T, doctor_licensesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor_licenses.
     * @param {doctor_licensesUpsertArgs} args - Arguments to update or create a Doctor_licenses.
     * @example
     * // Update or create a Doctor_licenses
     * const doctor_licenses = await prisma.doctor_licenses.upsert({
     *   create: {
     *     // ... data to create a Doctor_licenses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor_licenses we want to update
     *   }
     * })
     */
    upsert<T extends doctor_licensesUpsertArgs>(args: SelectSubset<T, doctor_licensesUpsertArgs<ExtArgs>>): Prisma__doctor_licensesClient<$Result.GetResult<Prisma.$doctor_licensesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctor_licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_licensesCountArgs} args - Arguments to filter Doctor_licenses to count.
     * @example
     * // Count the number of Doctor_licenses
     * const count = await prisma.doctor_licenses.count({
     *   where: {
     *     // ... the filter for the Doctor_licenses we want to count
     *   }
     * })
    **/
    count<T extends doctor_licensesCountArgs>(
      args?: Subset<T, doctor_licensesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Doctor_licensesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor_licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Doctor_licensesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Doctor_licensesAggregateArgs>(args: Subset<T, Doctor_licensesAggregateArgs>): Prisma.PrismaPromise<GetDoctor_licensesAggregateType<T>>

    /**
     * Group by Doctor_licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_licensesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctor_licensesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctor_licensesGroupByArgs['orderBy'] }
        : { orderBy?: doctor_licensesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctor_licensesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctor_licensesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctor_licenses model
   */
  readonly fields: doctor_licensesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctor_licenses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctor_licensesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the doctor_licenses model
   */ 
  interface doctor_licensesFieldRefs {
    readonly id: FieldRef<"doctor_licenses", 'Int'>
    readonly userId: FieldRef<"doctor_licenses", 'String'>
    readonly imageUrl1: FieldRef<"doctor_licenses", 'String'>
    readonly imageUrl2: FieldRef<"doctor_licenses", 'String'>
    readonly registrationNumber1: FieldRef<"doctor_licenses", 'String'>
    readonly registrationNumber2: FieldRef<"doctor_licenses", 'String'>
  }
    

  // Custom InputTypes
  /**
   * doctor_licenses findUnique
   */
  export type doctor_licensesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_licenses to fetch.
     */
    where: doctor_licensesWhereUniqueInput
  }

  /**
   * doctor_licenses findUniqueOrThrow
   */
  export type doctor_licensesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_licenses to fetch.
     */
    where: doctor_licensesWhereUniqueInput
  }

  /**
   * doctor_licenses findFirst
   */
  export type doctor_licensesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_licenses to fetch.
     */
    where?: doctor_licensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_licenses to fetch.
     */
    orderBy?: doctor_licensesOrderByWithRelationInput | doctor_licensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_licenses.
     */
    cursor?: doctor_licensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_licenses.
     */
    distinct?: Doctor_licensesScalarFieldEnum | Doctor_licensesScalarFieldEnum[]
  }

  /**
   * doctor_licenses findFirstOrThrow
   */
  export type doctor_licensesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_licenses to fetch.
     */
    where?: doctor_licensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_licenses to fetch.
     */
    orderBy?: doctor_licensesOrderByWithRelationInput | doctor_licensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_licenses.
     */
    cursor?: doctor_licensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_licenses.
     */
    distinct?: Doctor_licensesScalarFieldEnum | Doctor_licensesScalarFieldEnum[]
  }

  /**
   * doctor_licenses findMany
   */
  export type doctor_licensesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_licenses to fetch.
     */
    where?: doctor_licensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_licenses to fetch.
     */
    orderBy?: doctor_licensesOrderByWithRelationInput | doctor_licensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctor_licenses.
     */
    cursor?: doctor_licensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_licenses.
     */
    skip?: number
    distinct?: Doctor_licensesScalarFieldEnum | Doctor_licensesScalarFieldEnum[]
  }

  /**
   * doctor_licenses create
   */
  export type doctor_licensesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * The data needed to create a doctor_licenses.
     */
    data: XOR<doctor_licensesCreateInput, doctor_licensesUncheckedCreateInput>
  }

  /**
   * doctor_licenses createMany
   */
  export type doctor_licensesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctor_licenses.
     */
    data: doctor_licensesCreateManyInput | doctor_licensesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doctor_licenses createManyAndReturn
   */
  export type doctor_licensesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many doctor_licenses.
     */
    data: doctor_licensesCreateManyInput | doctor_licensesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * doctor_licenses update
   */
  export type doctor_licensesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * The data needed to update a doctor_licenses.
     */
    data: XOR<doctor_licensesUpdateInput, doctor_licensesUncheckedUpdateInput>
    /**
     * Choose, which doctor_licenses to update.
     */
    where: doctor_licensesWhereUniqueInput
  }

  /**
   * doctor_licenses updateMany
   */
  export type doctor_licensesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctor_licenses.
     */
    data: XOR<doctor_licensesUpdateManyMutationInput, doctor_licensesUncheckedUpdateManyInput>
    /**
     * Filter which doctor_licenses to update
     */
    where?: doctor_licensesWhereInput
  }

  /**
   * doctor_licenses upsert
   */
  export type doctor_licensesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * The filter to search for the doctor_licenses to update in case it exists.
     */
    where: doctor_licensesWhereUniqueInput
    /**
     * In case the doctor_licenses found by the `where` argument doesn't exist, create a new doctor_licenses with this data.
     */
    create: XOR<doctor_licensesCreateInput, doctor_licensesUncheckedCreateInput>
    /**
     * In case the doctor_licenses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctor_licensesUpdateInput, doctor_licensesUncheckedUpdateInput>
  }

  /**
   * doctor_licenses delete
   */
  export type doctor_licensesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
    /**
     * Filter which doctor_licenses to delete.
     */
    where: doctor_licensesWhereUniqueInput
  }

  /**
   * doctor_licenses deleteMany
   */
  export type doctor_licensesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_licenses to delete
     */
    where?: doctor_licensesWhereInput
  }

  /**
   * doctor_licenses without action
   */
  export type doctor_licensesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_licenses
     */
    select?: doctor_licensesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_licensesInclude<ExtArgs> | null
  }


  /**
   * Model doctor_profiles
   */

  export type AggregateDoctor_profiles = {
    _count: Doctor_profilesCountAggregateOutputType | null
    _avg: Doctor_profilesAvgAggregateOutputType | null
    _sum: Doctor_profilesSumAggregateOutputType | null
    _min: Doctor_profilesMinAggregateOutputType | null
    _max: Doctor_profilesMaxAggregateOutputType | null
  }

  export type Doctor_profilesAvgAggregateOutputType = {
    id: number | null
    bookedAppointment: number | null
  }

  export type Doctor_profilesSumAggregateOutputType = {
    id: number | null
    bookedAppointment: number | null
  }

  export type Doctor_profilesMinAggregateOutputType = {
    id: number | null
    userId: string | null
    legalName: string | null
    gender: string | null
    dateOfBirth: string | null
    address: string | null
    country: string | null
    state: string | null
    city: string | null
    qualification: string | null
    bookedAppointment: number | null
    specialization: string | null
    subSpecialist: string | null
    experienceYears: string | null
    consultationFees: string | null
  }

  export type Doctor_profilesMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    legalName: string | null
    gender: string | null
    dateOfBirth: string | null
    address: string | null
    country: string | null
    state: string | null
    city: string | null
    qualification: string | null
    bookedAppointment: number | null
    specialization: string | null
    subSpecialist: string | null
    experienceYears: string | null
    consultationFees: string | null
  }

  export type Doctor_profilesCountAggregateOutputType = {
    id: number
    userId: number
    legalName: number
    gender: number
    dateOfBirth: number
    address: number
    country: number
    state: number
    city: number
    qualification: number
    bookedAppointment: number
    specialization: number
    subSpecialist: number
    experienceYears: number
    consultationFees: number
    _all: number
  }


  export type Doctor_profilesAvgAggregateInputType = {
    id?: true
    bookedAppointment?: true
  }

  export type Doctor_profilesSumAggregateInputType = {
    id?: true
    bookedAppointment?: true
  }

  export type Doctor_profilesMinAggregateInputType = {
    id?: true
    userId?: true
    legalName?: true
    gender?: true
    dateOfBirth?: true
    address?: true
    country?: true
    state?: true
    city?: true
    qualification?: true
    bookedAppointment?: true
    specialization?: true
    subSpecialist?: true
    experienceYears?: true
    consultationFees?: true
  }

  export type Doctor_profilesMaxAggregateInputType = {
    id?: true
    userId?: true
    legalName?: true
    gender?: true
    dateOfBirth?: true
    address?: true
    country?: true
    state?: true
    city?: true
    qualification?: true
    bookedAppointment?: true
    specialization?: true
    subSpecialist?: true
    experienceYears?: true
    consultationFees?: true
  }

  export type Doctor_profilesCountAggregateInputType = {
    id?: true
    userId?: true
    legalName?: true
    gender?: true
    dateOfBirth?: true
    address?: true
    country?: true
    state?: true
    city?: true
    qualification?: true
    bookedAppointment?: true
    specialization?: true
    subSpecialist?: true
    experienceYears?: true
    consultationFees?: true
    _all?: true
  }

  export type Doctor_profilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_profiles to aggregate.
     */
    where?: doctor_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_profiles to fetch.
     */
    orderBy?: doctor_profilesOrderByWithRelationInput | doctor_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctor_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctor_profiles
    **/
    _count?: true | Doctor_profilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Doctor_profilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Doctor_profilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Doctor_profilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Doctor_profilesMaxAggregateInputType
  }

  export type GetDoctor_profilesAggregateType<T extends Doctor_profilesAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor_profiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor_profiles[P]>
      : GetScalarType<T[P], AggregateDoctor_profiles[P]>
  }




  export type doctor_profilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctor_profilesWhereInput
    orderBy?: doctor_profilesOrderByWithAggregationInput | doctor_profilesOrderByWithAggregationInput[]
    by: Doctor_profilesScalarFieldEnum[] | Doctor_profilesScalarFieldEnum
    having?: doctor_profilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Doctor_profilesCountAggregateInputType | true
    _avg?: Doctor_profilesAvgAggregateInputType
    _sum?: Doctor_profilesSumAggregateInputType
    _min?: Doctor_profilesMinAggregateInputType
    _max?: Doctor_profilesMaxAggregateInputType
  }

  export type Doctor_profilesGroupByOutputType = {
    id: number
    userId: string
    legalName: string
    gender: string
    dateOfBirth: string
    address: string
    country: string
    state: string
    city: string
    qualification: string
    bookedAppointment: number
    specialization: string
    subSpecialist: string
    experienceYears: string
    consultationFees: string
    _count: Doctor_profilesCountAggregateOutputType | null
    _avg: Doctor_profilesAvgAggregateOutputType | null
    _sum: Doctor_profilesSumAggregateOutputType | null
    _min: Doctor_profilesMinAggregateOutputType | null
    _max: Doctor_profilesMaxAggregateOutputType | null
  }

  type GetDoctor_profilesGroupByPayload<T extends doctor_profilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Doctor_profilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Doctor_profilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Doctor_profilesGroupByOutputType[P]>
            : GetScalarType<T[P], Doctor_profilesGroupByOutputType[P]>
        }
      >
    >


  export type doctor_profilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    legalName?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    address?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    qualification?: boolean
    bookedAppointment?: boolean
    specialization?: boolean
    subSpecialist?: boolean
    experienceYears?: boolean
    consultationFees?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor_profiles"]>

  export type doctor_profilesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    legalName?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    address?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    qualification?: boolean
    bookedAppointment?: boolean
    specialization?: boolean
    subSpecialist?: boolean
    experienceYears?: boolean
    consultationFees?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor_profiles"]>

  export type doctor_profilesSelectScalar = {
    id?: boolean
    userId?: boolean
    legalName?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    address?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    qualification?: boolean
    bookedAppointment?: boolean
    specialization?: boolean
    subSpecialist?: boolean
    experienceYears?: boolean
    consultationFees?: boolean
  }

  export type doctor_profilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type doctor_profilesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $doctor_profilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doctor_profiles"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      legalName: string
      gender: string
      dateOfBirth: string
      address: string
      country: string
      state: string
      city: string
      qualification: string
      bookedAppointment: number
      specialization: string
      subSpecialist: string
      experienceYears: string
      consultationFees: string
    }, ExtArgs["result"]["doctor_profiles"]>
    composites: {}
  }

  type doctor_profilesGetPayload<S extends boolean | null | undefined | doctor_profilesDefaultArgs> = $Result.GetResult<Prisma.$doctor_profilesPayload, S>

  type doctor_profilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doctor_profilesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Doctor_profilesCountAggregateInputType | true
    }

  export interface doctor_profilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctor_profiles'], meta: { name: 'doctor_profiles' } }
    /**
     * Find zero or one Doctor_profiles that matches the filter.
     * @param {doctor_profilesFindUniqueArgs} args - Arguments to find a Doctor_profiles
     * @example
     * // Get one Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends doctor_profilesFindUniqueArgs>(args: SelectSubset<T, doctor_profilesFindUniqueArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctor_profiles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doctor_profilesFindUniqueOrThrowArgs} args - Arguments to find a Doctor_profiles
     * @example
     * // Get one Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends doctor_profilesFindUniqueOrThrowArgs>(args: SelectSubset<T, doctor_profilesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctor_profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_profilesFindFirstArgs} args - Arguments to find a Doctor_profiles
     * @example
     * // Get one Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends doctor_profilesFindFirstArgs>(args?: SelectSubset<T, doctor_profilesFindFirstArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctor_profiles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_profilesFindFirstOrThrowArgs} args - Arguments to find a Doctor_profiles
     * @example
     * // Get one Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends doctor_profilesFindFirstOrThrowArgs>(args?: SelectSubset<T, doctor_profilesFindFirstOrThrowArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctor_profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_profilesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.findMany()
     * 
     * // Get first 10 Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctor_profilesWithIdOnly = await prisma.doctor_profiles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends doctor_profilesFindManyArgs>(args?: SelectSubset<T, doctor_profilesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctor_profiles.
     * @param {doctor_profilesCreateArgs} args - Arguments to create a Doctor_profiles.
     * @example
     * // Create one Doctor_profiles
     * const Doctor_profiles = await prisma.doctor_profiles.create({
     *   data: {
     *     // ... data to create a Doctor_profiles
     *   }
     * })
     * 
     */
    create<T extends doctor_profilesCreateArgs>(args: SelectSubset<T, doctor_profilesCreateArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctor_profiles.
     * @param {doctor_profilesCreateManyArgs} args - Arguments to create many Doctor_profiles.
     * @example
     * // Create many Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends doctor_profilesCreateManyArgs>(args?: SelectSubset<T, doctor_profilesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctor_profiles and returns the data saved in the database.
     * @param {doctor_profilesCreateManyAndReturnArgs} args - Arguments to create many Doctor_profiles.
     * @example
     * // Create many Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctor_profiles and only return the `id`
     * const doctor_profilesWithIdOnly = await prisma.doctor_profiles.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends doctor_profilesCreateManyAndReturnArgs>(args?: SelectSubset<T, doctor_profilesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doctor_profiles.
     * @param {doctor_profilesDeleteArgs} args - Arguments to delete one Doctor_profiles.
     * @example
     * // Delete one Doctor_profiles
     * const Doctor_profiles = await prisma.doctor_profiles.delete({
     *   where: {
     *     // ... filter to delete one Doctor_profiles
     *   }
     * })
     * 
     */
    delete<T extends doctor_profilesDeleteArgs>(args: SelectSubset<T, doctor_profilesDeleteArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctor_profiles.
     * @param {doctor_profilesUpdateArgs} args - Arguments to update one Doctor_profiles.
     * @example
     * // Update one Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends doctor_profilesUpdateArgs>(args: SelectSubset<T, doctor_profilesUpdateArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctor_profiles.
     * @param {doctor_profilesDeleteManyArgs} args - Arguments to filter Doctor_profiles to delete.
     * @example
     * // Delete a few Doctor_profiles
     * const { count } = await prisma.doctor_profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends doctor_profilesDeleteManyArgs>(args?: SelectSubset<T, doctor_profilesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctor_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_profilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends doctor_profilesUpdateManyArgs>(args: SelectSubset<T, doctor_profilesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor_profiles.
     * @param {doctor_profilesUpsertArgs} args - Arguments to update or create a Doctor_profiles.
     * @example
     * // Update or create a Doctor_profiles
     * const doctor_profiles = await prisma.doctor_profiles.upsert({
     *   create: {
     *     // ... data to create a Doctor_profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor_profiles we want to update
     *   }
     * })
     */
    upsert<T extends doctor_profilesUpsertArgs>(args: SelectSubset<T, doctor_profilesUpsertArgs<ExtArgs>>): Prisma__doctor_profilesClient<$Result.GetResult<Prisma.$doctor_profilesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctor_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_profilesCountArgs} args - Arguments to filter Doctor_profiles to count.
     * @example
     * // Count the number of Doctor_profiles
     * const count = await prisma.doctor_profiles.count({
     *   where: {
     *     // ... the filter for the Doctor_profiles we want to count
     *   }
     * })
    **/
    count<T extends doctor_profilesCountArgs>(
      args?: Subset<T, doctor_profilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Doctor_profilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Doctor_profilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Doctor_profilesAggregateArgs>(args: Subset<T, Doctor_profilesAggregateArgs>): Prisma.PrismaPromise<GetDoctor_profilesAggregateType<T>>

    /**
     * Group by Doctor_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_profilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctor_profilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctor_profilesGroupByArgs['orderBy'] }
        : { orderBy?: doctor_profilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctor_profilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctor_profilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctor_profiles model
   */
  readonly fields: doctor_profilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctor_profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctor_profilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the doctor_profiles model
   */ 
  interface doctor_profilesFieldRefs {
    readonly id: FieldRef<"doctor_profiles", 'Int'>
    readonly userId: FieldRef<"doctor_profiles", 'String'>
    readonly legalName: FieldRef<"doctor_profiles", 'String'>
    readonly gender: FieldRef<"doctor_profiles", 'String'>
    readonly dateOfBirth: FieldRef<"doctor_profiles", 'String'>
    readonly address: FieldRef<"doctor_profiles", 'String'>
    readonly country: FieldRef<"doctor_profiles", 'String'>
    readonly state: FieldRef<"doctor_profiles", 'String'>
    readonly city: FieldRef<"doctor_profiles", 'String'>
    readonly qualification: FieldRef<"doctor_profiles", 'String'>
    readonly bookedAppointment: FieldRef<"doctor_profiles", 'Float'>
    readonly specialization: FieldRef<"doctor_profiles", 'String'>
    readonly subSpecialist: FieldRef<"doctor_profiles", 'String'>
    readonly experienceYears: FieldRef<"doctor_profiles", 'String'>
    readonly consultationFees: FieldRef<"doctor_profiles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * doctor_profiles findUnique
   */
  export type doctor_profilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_profiles to fetch.
     */
    where: doctor_profilesWhereUniqueInput
  }

  /**
   * doctor_profiles findUniqueOrThrow
   */
  export type doctor_profilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_profiles to fetch.
     */
    where: doctor_profilesWhereUniqueInput
  }

  /**
   * doctor_profiles findFirst
   */
  export type doctor_profilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_profiles to fetch.
     */
    where?: doctor_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_profiles to fetch.
     */
    orderBy?: doctor_profilesOrderByWithRelationInput | doctor_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_profiles.
     */
    cursor?: doctor_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_profiles.
     */
    distinct?: Doctor_profilesScalarFieldEnum | Doctor_profilesScalarFieldEnum[]
  }

  /**
   * doctor_profiles findFirstOrThrow
   */
  export type doctor_profilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_profiles to fetch.
     */
    where?: doctor_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_profiles to fetch.
     */
    orderBy?: doctor_profilesOrderByWithRelationInput | doctor_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_profiles.
     */
    cursor?: doctor_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_profiles.
     */
    distinct?: Doctor_profilesScalarFieldEnum | Doctor_profilesScalarFieldEnum[]
  }

  /**
   * doctor_profiles findMany
   */
  export type doctor_profilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * Filter, which doctor_profiles to fetch.
     */
    where?: doctor_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_profiles to fetch.
     */
    orderBy?: doctor_profilesOrderByWithRelationInput | doctor_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctor_profiles.
     */
    cursor?: doctor_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_profiles.
     */
    skip?: number
    distinct?: Doctor_profilesScalarFieldEnum | Doctor_profilesScalarFieldEnum[]
  }

  /**
   * doctor_profiles create
   */
  export type doctor_profilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * The data needed to create a doctor_profiles.
     */
    data: XOR<doctor_profilesCreateInput, doctor_profilesUncheckedCreateInput>
  }

  /**
   * doctor_profiles createMany
   */
  export type doctor_profilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctor_profiles.
     */
    data: doctor_profilesCreateManyInput | doctor_profilesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doctor_profiles createManyAndReturn
   */
  export type doctor_profilesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many doctor_profiles.
     */
    data: doctor_profilesCreateManyInput | doctor_profilesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * doctor_profiles update
   */
  export type doctor_profilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * The data needed to update a doctor_profiles.
     */
    data: XOR<doctor_profilesUpdateInput, doctor_profilesUncheckedUpdateInput>
    /**
     * Choose, which doctor_profiles to update.
     */
    where: doctor_profilesWhereUniqueInput
  }

  /**
   * doctor_profiles updateMany
   */
  export type doctor_profilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctor_profiles.
     */
    data: XOR<doctor_profilesUpdateManyMutationInput, doctor_profilesUncheckedUpdateManyInput>
    /**
     * Filter which doctor_profiles to update
     */
    where?: doctor_profilesWhereInput
  }

  /**
   * doctor_profiles upsert
   */
  export type doctor_profilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * The filter to search for the doctor_profiles to update in case it exists.
     */
    where: doctor_profilesWhereUniqueInput
    /**
     * In case the doctor_profiles found by the `where` argument doesn't exist, create a new doctor_profiles with this data.
     */
    create: XOR<doctor_profilesCreateInput, doctor_profilesUncheckedCreateInput>
    /**
     * In case the doctor_profiles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctor_profilesUpdateInput, doctor_profilesUncheckedUpdateInput>
  }

  /**
   * doctor_profiles delete
   */
  export type doctor_profilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
    /**
     * Filter which doctor_profiles to delete.
     */
    where: doctor_profilesWhereUniqueInput
  }

  /**
   * doctor_profiles deleteMany
   */
  export type doctor_profilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_profiles to delete
     */
    where?: doctor_profilesWhereInput
  }

  /**
   * doctor_profiles without action
   */
  export type doctor_profilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_profiles
     */
    select?: doctor_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctor_profilesInclude<ExtArgs> | null
  }


  /**
   * Model reviews
   */

  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    id: number | null
    appointmentId: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    id: number | null
    appointmentId: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    id: number | null
    userId: string | null
    rating: string | null
    message: string | null
    patientName: string | null
    patientId: string | null
    patientProfilePic: string | null
    createdAt: Date | null
    appointmentId: number | null
  }

  export type ReviewsMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    rating: string | null
    message: string | null
    patientName: string | null
    patientId: string | null
    patientProfilePic: string | null
    createdAt: Date | null
    appointmentId: number | null
  }

  export type ReviewsCountAggregateOutputType = {
    id: number
    userId: number
    rating: number
    message: number
    patientName: number
    patientId: number
    patientProfilePic: number
    createdAt: number
    appointmentId: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    id?: true
    appointmentId?: true
  }

  export type ReviewsSumAggregateInputType = {
    id?: true
    appointmentId?: true
  }

  export type ReviewsMinAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    message?: true
    patientName?: true
    patientId?: true
    patientProfilePic?: true
    createdAt?: true
    appointmentId?: true
  }

  export type ReviewsMaxAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    message?: true
    patientName?: true
    patientId?: true
    patientProfilePic?: true
    createdAt?: true
    appointmentId?: true
  }

  export type ReviewsCountAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    message?: true
    patientName?: true
    patientId?: true
    patientProfilePic?: true
    createdAt?: true
    appointmentId?: true
    _all?: true
  }

  export type ReviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to aggregate.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type reviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithAggregationInput | reviewsOrderByWithAggregationInput[]
    by: ReviewsScalarFieldEnum[] | ReviewsScalarFieldEnum
    having?: reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }

  export type ReviewsGroupByOutputType = {
    id: number
    userId: string
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt: Date
    appointmentId: number
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type reviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rating?: boolean
    message?: boolean
    patientName?: boolean
    patientId?: boolean
    patientProfilePic?: boolean
    createdAt?: boolean
    appointmentId?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>

  export type reviewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rating?: boolean
    message?: boolean
    patientName?: boolean
    patientId?: boolean
    patientProfilePic?: boolean
    createdAt?: boolean
    appointmentId?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>

  export type reviewsSelectScalar = {
    id?: boolean
    userId?: boolean
    rating?: boolean
    message?: boolean
    patientName?: boolean
    patientId?: boolean
    patientProfilePic?: boolean
    createdAt?: boolean
    appointmentId?: boolean
  }

  export type reviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type reviewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $reviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reviews"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      rating: string
      message: string
      patientName: string
      patientId: string
      patientProfilePic: string
      createdAt: Date
      appointmentId: number
    }, ExtArgs["result"]["reviews"]>
    composites: {}
  }

  type reviewsGetPayload<S extends boolean | null | undefined | reviewsDefaultArgs> = $Result.GetResult<Prisma.$reviewsPayload, S>

  type reviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reviewsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewsCountAggregateInputType | true
    }

  export interface reviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reviews'], meta: { name: 'reviews' } }
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {reviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reviewsFindUniqueArgs>(args: SelectSubset<T, reviewsFindUniqueArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reviews that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reviewsFindUniqueOrThrowArgs>(args: SelectSubset<T, reviewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reviewsFindFirstArgs>(args?: SelectSubset<T, reviewsFindFirstArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reviewsFindFirstOrThrowArgs>(args?: SelectSubset<T, reviewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewsWithIdOnly = await prisma.reviews.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reviewsFindManyArgs>(args?: SelectSubset<T, reviewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reviews.
     * @param {reviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
     */
    create<T extends reviewsCreateArgs>(args: SelectSubset<T, reviewsCreateArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {reviewsCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const reviews = await prisma.reviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reviewsCreateManyArgs>(args?: SelectSubset<T, reviewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {reviewsCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const reviews = await prisma.reviews.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewsWithIdOnly = await prisma.reviews.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends reviewsCreateManyAndReturnArgs>(args?: SelectSubset<T, reviewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reviews.
     * @param {reviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
     */
    delete<T extends reviewsDeleteArgs>(args: SelectSubset<T, reviewsDeleteArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reviews.
     * @param {reviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reviewsUpdateArgs>(args: SelectSubset<T, reviewsUpdateArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {reviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reviewsDeleteManyArgs>(args?: SelectSubset<T, reviewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reviewsUpdateManyArgs>(args: SelectSubset<T, reviewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {reviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
     */
    upsert<T extends reviewsUpsertArgs>(args: SelectSubset<T, reviewsUpsertArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewsCountArgs>(
      args?: Subset<T, reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): Prisma.PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewsGroupByArgs['orderBy'] }
        : { orderBy?: reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reviews model
   */
  readonly fields: reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reviews model
   */ 
  interface reviewsFieldRefs {
    readonly id: FieldRef<"reviews", 'Int'>
    readonly userId: FieldRef<"reviews", 'String'>
    readonly rating: FieldRef<"reviews", 'String'>
    readonly message: FieldRef<"reviews", 'String'>
    readonly patientName: FieldRef<"reviews", 'String'>
    readonly patientId: FieldRef<"reviews", 'String'>
    readonly patientProfilePic: FieldRef<"reviews", 'String'>
    readonly createdAt: FieldRef<"reviews", 'DateTime'>
    readonly appointmentId: FieldRef<"reviews", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * reviews findUnique
   */
  export type reviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews findUniqueOrThrow
   */
  export type reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews findFirst
   */
  export type reviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews findFirstOrThrow
   */
  export type reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews findMany
   */
  export type reviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews create
   */
  export type reviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a reviews.
     */
    data: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
  }

  /**
   * reviews createMany
   */
  export type reviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewsCreateManyInput | reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reviews createManyAndReturn
   */
  export type reviewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many reviews.
     */
    data: reviewsCreateManyInput | reviewsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * reviews update
   */
  export type reviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a reviews.
     */
    data: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
    /**
     * Choose, which reviews to update.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews updateMany
   */
  export type reviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewsWhereInput
  }

  /**
   * reviews upsert
   */
  export type reviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the reviews to update in case it exists.
     */
    where: reviewsWhereUniqueInput
    /**
     * In case the reviews found by the `where` argument doesn't exist, create a new reviews with this data.
     */
    create: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
    /**
     * In case the reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
  }

  /**
   * reviews delete
   */
  export type reviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter which reviews to delete.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews deleteMany
   */
  export type reviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewsWhereInput
  }

  /**
   * reviews without action
   */
  export type reviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    phone: 'phone',
    numberVerified: 'numberVerified',
    image: 'image',
    about: 'about',
    emailVerified: 'emailVerified',
    socket_id: 'socket_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const TrackerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    activity: 'activity',
    sleep: 'sleep',
    wellness: 'wellness',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrackerScalarFieldEnum = (typeof TrackerScalarFieldEnum)[keyof typeof TrackerScalarFieldEnum]


  export const OverviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    report: 'report'
  };

  export type OverviewScalarFieldEnum = (typeof OverviewScalarFieldEnum)[keyof typeof OverviewScalarFieldEnum]


  export const HealthMonitoringScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    monthly_monitoring: 'monthly_monitoring',
    weekly_monitoring: 'weekly_monitoring',
    daily_monitoring: 'daily_monitoring'
  };

  export type HealthMonitoringScalarFieldEnum = (typeof HealthMonitoringScalarFieldEnum)[keyof typeof HealthMonitoringScalarFieldEnum]


  export const HealthExpectedScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    report: 'report'
  };

  export type HealthExpectedScalarFieldEnum = (typeof HealthExpectedScalarFieldEnum)[keyof typeof HealthExpectedScalarFieldEnum]


  export const OtpScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    otp: 'otp',
    expiry: 'expiry'
  };

  export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


  export const EmailOtpScalarFieldEnum: {
    id: 'id',
    email: 'email',
    otp: 'otp',
    expiry: 'expiry'
  };

  export type EmailOtpScalarFieldEnum = (typeof EmailOtpScalarFieldEnum)[keyof typeof EmailOtpScalarFieldEnum]


  export const BookedAppointmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    doctor_id: 'doctor_id',
    time: 'time',
    date: 'date',
    doctorName: 'doctorName',
    purpose: 'purpose',
    reschedule: 'reschedule',
    reviewed: 'reviewed',
    status: 'status',
    mode: 'mode',
    age: 'age',
    name: 'name',
    gender: 'gender'
  };

  export type BookedAppointmentScalarFieldEnum = (typeof BookedAppointmentScalarFieldEnum)[keyof typeof BookedAppointmentScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    senderId: 'senderId',
    conversationId: 'conversationId',
    createdAt: 'createdAt',
    fileName: 'fileName',
    filePath: 'filePath',
    fileType: 'fileType'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SeenMessageScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    userId: 'userId',
    seenAt: 'seenAt'
  };

  export type SeenMessageScalarFieldEnum = (typeof SeenMessageScalarFieldEnum)[keyof typeof SeenMessageScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    type: 'type',
    communityName: 'communityName'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const ConversationParticipantScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    userId: 'userId',
    joinedAt: 'joinedAt',
    unreadCount: 'unreadCount'
  };

  export type ConversationParticipantScalarFieldEnum = (typeof ConversationParticipantScalarFieldEnum)[keyof typeof ConversationParticipantScalarFieldEnum]


  export const Doctor_availability_detailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionFees: 'sessionFees',
    sessionLength: 'sessionLength',
    languages: 'languages',
    availableDays: 'availableDays',
    availableTimeFrom: 'availableTimeFrom',
    availableTimeSlot: 'availableTimeSlot'
  };

  export type Doctor_availability_detailsScalarFieldEnum = (typeof Doctor_availability_detailsScalarFieldEnum)[keyof typeof Doctor_availability_detailsScalarFieldEnum]


  export const Doctor_licensesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    imageUrl1: 'imageUrl1',
    imageUrl2: 'imageUrl2',
    registrationNumber1: 'registrationNumber1',
    registrationNumber2: 'registrationNumber2'
  };

  export type Doctor_licensesScalarFieldEnum = (typeof Doctor_licensesScalarFieldEnum)[keyof typeof Doctor_licensesScalarFieldEnum]


  export const Doctor_profilesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    legalName: 'legalName',
    gender: 'gender',
    dateOfBirth: 'dateOfBirth',
    address: 'address',
    country: 'country',
    state: 'state',
    city: 'city',
    qualification: 'qualification',
    bookedAppointment: 'bookedAppointment',
    specialization: 'specialization',
    subSpecialist: 'subSpecialist',
    experienceYears: 'experienceYears',
    consultationFees: 'consultationFees'
  };

  export type Doctor_profilesScalarFieldEnum = (typeof Doctor_profilesScalarFieldEnum)[keyof typeof Doctor_profilesScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    rating: 'rating',
    message: 'message',
    patientName: 'patientName',
    patientId: 'patientId',
    patientProfilePic: 'patientProfilePic',
    createdAt: 'createdAt',
    appointmentId: 'appointmentId'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ConversationType'
   */
  export type EnumConversationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConversationType'>
    


  /**
   * Reference to a field of type 'ConversationType[]'
   */
  export type ListEnumConversationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConversationType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    phone?: StringNullableFilter<"User"> | string | null
    numberVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    about?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    socket_id?: StringNullableFilter<"User"> | string | null
    participants?: ConversationParticipantListRelationFilter
    messages?: MessageListRelationFilter
    accounts?: AccountListRelationFilter
    doctor_availability_details?: XOR<Doctor_availability_detailsNullableRelationFilter, doctor_availability_detailsWhereInput> | null
    doctor_licenses?: XOR<Doctor_licensesNullableRelationFilter, doctor_licensesWhereInput> | null
    doctor_profiles?: XOR<Doctor_profilesNullableRelationFilter, doctor_profilesWhereInput> | null
    reviews?: ReviewsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    numberVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    about?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    socket_id?: SortOrderInput | SortOrder
    participants?: ConversationParticipantOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    doctor_availability_details?: doctor_availability_detailsOrderByWithRelationInput
    doctor_licenses?: doctor_licensesOrderByWithRelationInput
    doctor_profiles?: doctor_profilesOrderByWithRelationInput
    reviews?: reviewsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    numberVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    about?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    socket_id?: StringNullableFilter<"User"> | string | null
    participants?: ConversationParticipantListRelationFilter
    messages?: MessageListRelationFilter
    accounts?: AccountListRelationFilter
    doctor_availability_details?: XOR<Doctor_availability_detailsNullableRelationFilter, doctor_availability_detailsWhereInput> | null
    doctor_licenses?: XOR<Doctor_licensesNullableRelationFilter, doctor_licensesWhereInput> | null
    doctor_profiles?: XOR<Doctor_profilesNullableRelationFilter, doctor_profilesWhereInput> | null
    reviews?: ReviewsListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    numberVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    about?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    socket_id?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    numberVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    about?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    socket_id?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    id?: StringFilter<"VerificationToken"> | string
    email?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: VerificationTokenEmailTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    email?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationToken"> | string
    email?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: StringFilter<"PasswordReset"> | string
    email?: StringFilter<"PasswordReset"> | string
    token?: StringFilter<"PasswordReset"> | string
    expires?: DateTimeFilter<"PasswordReset"> | Date | string
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: PasswordResetEmailTokenCompoundUniqueInput
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    email?: StringFilter<"PasswordReset"> | string
    expires?: DateTimeFilter<"PasswordReset"> | Date | string
  }, "id" | "token" | "email_token">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordReset"> | string
    email?: StringWithAggregatesFilter<"PasswordReset"> | string
    token?: StringWithAggregatesFilter<"PasswordReset"> | string
    expires?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
  }

  export type TrackerWhereInput = {
    AND?: TrackerWhereInput | TrackerWhereInput[]
    OR?: TrackerWhereInput[]
    NOT?: TrackerWhereInput | TrackerWhereInput[]
    id?: StringFilter<"Tracker"> | string
    userId?: StringFilter<"Tracker"> | string
    activity?: JsonFilter<"Tracker">
    sleep?: JsonFilter<"Tracker">
    wellness?: JsonFilter<"Tracker">
    createdAt?: DateTimeFilter<"Tracker"> | Date | string
    updatedAt?: DateTimeFilter<"Tracker"> | Date | string
  }

  export type TrackerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    sleep?: SortOrder
    wellness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrackerWhereInput | TrackerWhereInput[]
    OR?: TrackerWhereInput[]
    NOT?: TrackerWhereInput | TrackerWhereInput[]
    userId?: StringFilter<"Tracker"> | string
    activity?: JsonFilter<"Tracker">
    sleep?: JsonFilter<"Tracker">
    wellness?: JsonFilter<"Tracker">
    createdAt?: DateTimeFilter<"Tracker"> | Date | string
    updatedAt?: DateTimeFilter<"Tracker"> | Date | string
  }, "id">

  export type TrackerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    sleep?: SortOrder
    wellness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrackerCountOrderByAggregateInput
    _max?: TrackerMaxOrderByAggregateInput
    _min?: TrackerMinOrderByAggregateInput
  }

  export type TrackerScalarWhereWithAggregatesInput = {
    AND?: TrackerScalarWhereWithAggregatesInput | TrackerScalarWhereWithAggregatesInput[]
    OR?: TrackerScalarWhereWithAggregatesInput[]
    NOT?: TrackerScalarWhereWithAggregatesInput | TrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tracker"> | string
    userId?: StringWithAggregatesFilter<"Tracker"> | string
    activity?: JsonWithAggregatesFilter<"Tracker">
    sleep?: JsonWithAggregatesFilter<"Tracker">
    wellness?: JsonWithAggregatesFilter<"Tracker">
    createdAt?: DateTimeWithAggregatesFilter<"Tracker"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tracker"> | Date | string
  }

  export type OverviewWhereInput = {
    AND?: OverviewWhereInput | OverviewWhereInput[]
    OR?: OverviewWhereInput[]
    NOT?: OverviewWhereInput | OverviewWhereInput[]
    id?: StringFilter<"Overview"> | string
    userId?: StringFilter<"Overview"> | string
    report?: JsonNullableListFilter<"Overview">
  }

  export type OverviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    report?: SortOrder
  }

  export type OverviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: OverviewWhereInput | OverviewWhereInput[]
    OR?: OverviewWhereInput[]
    NOT?: OverviewWhereInput | OverviewWhereInput[]
    report?: JsonNullableListFilter<"Overview">
  }, "id" | "userId">

  export type OverviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    report?: SortOrder
    _count?: OverviewCountOrderByAggregateInput
    _max?: OverviewMaxOrderByAggregateInput
    _min?: OverviewMinOrderByAggregateInput
  }

  export type OverviewScalarWhereWithAggregatesInput = {
    AND?: OverviewScalarWhereWithAggregatesInput | OverviewScalarWhereWithAggregatesInput[]
    OR?: OverviewScalarWhereWithAggregatesInput[]
    NOT?: OverviewScalarWhereWithAggregatesInput | OverviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Overview"> | string
    userId?: StringWithAggregatesFilter<"Overview"> | string
    report?: JsonNullableListFilter<"Overview">
  }

  export type HealthMonitoringWhereInput = {
    AND?: HealthMonitoringWhereInput | HealthMonitoringWhereInput[]
    OR?: HealthMonitoringWhereInput[]
    NOT?: HealthMonitoringWhereInput | HealthMonitoringWhereInput[]
    id?: StringFilter<"HealthMonitoring"> | string
    userId?: StringFilter<"HealthMonitoring"> | string
    monthly_monitoring?: JsonFilter<"HealthMonitoring">
    weekly_monitoring?: JsonFilter<"HealthMonitoring">
    daily_monitoring?: JsonFilter<"HealthMonitoring">
  }

  export type HealthMonitoringOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    monthly_monitoring?: SortOrder
    weekly_monitoring?: SortOrder
    daily_monitoring?: SortOrder
  }

  export type HealthMonitoringWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: HealthMonitoringWhereInput | HealthMonitoringWhereInput[]
    OR?: HealthMonitoringWhereInput[]
    NOT?: HealthMonitoringWhereInput | HealthMonitoringWhereInput[]
    monthly_monitoring?: JsonFilter<"HealthMonitoring">
    weekly_monitoring?: JsonFilter<"HealthMonitoring">
    daily_monitoring?: JsonFilter<"HealthMonitoring">
  }, "id" | "userId">

  export type HealthMonitoringOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    monthly_monitoring?: SortOrder
    weekly_monitoring?: SortOrder
    daily_monitoring?: SortOrder
    _count?: HealthMonitoringCountOrderByAggregateInput
    _max?: HealthMonitoringMaxOrderByAggregateInput
    _min?: HealthMonitoringMinOrderByAggregateInput
  }

  export type HealthMonitoringScalarWhereWithAggregatesInput = {
    AND?: HealthMonitoringScalarWhereWithAggregatesInput | HealthMonitoringScalarWhereWithAggregatesInput[]
    OR?: HealthMonitoringScalarWhereWithAggregatesInput[]
    NOT?: HealthMonitoringScalarWhereWithAggregatesInput | HealthMonitoringScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HealthMonitoring"> | string
    userId?: StringWithAggregatesFilter<"HealthMonitoring"> | string
    monthly_monitoring?: JsonWithAggregatesFilter<"HealthMonitoring">
    weekly_monitoring?: JsonWithAggregatesFilter<"HealthMonitoring">
    daily_monitoring?: JsonWithAggregatesFilter<"HealthMonitoring">
  }

  export type HealthExpectedWhereInput = {
    AND?: HealthExpectedWhereInput | HealthExpectedWhereInput[]
    OR?: HealthExpectedWhereInput[]
    NOT?: HealthExpectedWhereInput | HealthExpectedWhereInput[]
    id?: StringFilter<"HealthExpected"> | string
    userId?: StringFilter<"HealthExpected"> | string
    report?: JsonNullableListFilter<"HealthExpected">
  }

  export type HealthExpectedOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    report?: SortOrder
  }

  export type HealthExpectedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: HealthExpectedWhereInput | HealthExpectedWhereInput[]
    OR?: HealthExpectedWhereInput[]
    NOT?: HealthExpectedWhereInput | HealthExpectedWhereInput[]
    report?: JsonNullableListFilter<"HealthExpected">
  }, "id" | "userId">

  export type HealthExpectedOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    report?: SortOrder
    _count?: HealthExpectedCountOrderByAggregateInput
    _max?: HealthExpectedMaxOrderByAggregateInput
    _min?: HealthExpectedMinOrderByAggregateInput
  }

  export type HealthExpectedScalarWhereWithAggregatesInput = {
    AND?: HealthExpectedScalarWhereWithAggregatesInput | HealthExpectedScalarWhereWithAggregatesInput[]
    OR?: HealthExpectedScalarWhereWithAggregatesInput[]
    NOT?: HealthExpectedScalarWhereWithAggregatesInput | HealthExpectedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HealthExpected"> | string
    userId?: StringWithAggregatesFilter<"HealthExpected"> | string
    report?: JsonNullableListFilter<"HealthExpected">
  }

  export type OtpWhereInput = {
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    id?: IntFilter<"Otp"> | number
    phone?: StringFilter<"Otp"> | string
    otp?: StringFilter<"Otp"> | string
    expiry?: DateTimeFilter<"Otp"> | Date | string
  }

  export type OtpOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type OtpWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phone?: string
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    otp?: StringFilter<"Otp"> | string
    expiry?: DateTimeFilter<"Otp"> | Date | string
  }, "id" | "phone">

  export type OtpOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
    _count?: OtpCountOrderByAggregateInput
    _avg?: OtpAvgOrderByAggregateInput
    _max?: OtpMaxOrderByAggregateInput
    _min?: OtpMinOrderByAggregateInput
    _sum?: OtpSumOrderByAggregateInput
  }

  export type OtpScalarWhereWithAggregatesInput = {
    AND?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    OR?: OtpScalarWhereWithAggregatesInput[]
    NOT?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Otp"> | number
    phone?: StringWithAggregatesFilter<"Otp"> | string
    otp?: StringWithAggregatesFilter<"Otp"> | string
    expiry?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
  }

  export type emailOtpWhereInput = {
    AND?: emailOtpWhereInput | emailOtpWhereInput[]
    OR?: emailOtpWhereInput[]
    NOT?: emailOtpWhereInput | emailOtpWhereInput[]
    id?: IntFilter<"emailOtp"> | number
    email?: StringFilter<"emailOtp"> | string
    otp?: StringFilter<"emailOtp"> | string
    expiry?: DateTimeFilter<"emailOtp"> | Date | string
  }

  export type emailOtpOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type emailOtpWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: emailOtpWhereInput | emailOtpWhereInput[]
    OR?: emailOtpWhereInput[]
    NOT?: emailOtpWhereInput | emailOtpWhereInput[]
    otp?: StringFilter<"emailOtp"> | string
    expiry?: DateTimeFilter<"emailOtp"> | Date | string
  }, "id" | "email">

  export type emailOtpOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
    _count?: emailOtpCountOrderByAggregateInput
    _avg?: emailOtpAvgOrderByAggregateInput
    _max?: emailOtpMaxOrderByAggregateInput
    _min?: emailOtpMinOrderByAggregateInput
    _sum?: emailOtpSumOrderByAggregateInput
  }

  export type emailOtpScalarWhereWithAggregatesInput = {
    AND?: emailOtpScalarWhereWithAggregatesInput | emailOtpScalarWhereWithAggregatesInput[]
    OR?: emailOtpScalarWhereWithAggregatesInput[]
    NOT?: emailOtpScalarWhereWithAggregatesInput | emailOtpScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"emailOtp"> | number
    email?: StringWithAggregatesFilter<"emailOtp"> | string
    otp?: StringWithAggregatesFilter<"emailOtp"> | string
    expiry?: DateTimeWithAggregatesFilter<"emailOtp"> | Date | string
  }

  export type BookedAppointmentWhereInput = {
    AND?: BookedAppointmentWhereInput | BookedAppointmentWhereInput[]
    OR?: BookedAppointmentWhereInput[]
    NOT?: BookedAppointmentWhereInput | BookedAppointmentWhereInput[]
    id?: IntFilter<"BookedAppointment"> | number
    userId?: StringFilter<"BookedAppointment"> | string
    doctor_id?: StringFilter<"BookedAppointment"> | string
    time?: StringFilter<"BookedAppointment"> | string
    date?: DateTimeFilter<"BookedAppointment"> | Date | string
    doctorName?: StringFilter<"BookedAppointment"> | string
    purpose?: StringFilter<"BookedAppointment"> | string
    reschedule?: StringFilter<"BookedAppointment"> | string
    reviewed?: StringFilter<"BookedAppointment"> | string
    status?: StringFilter<"BookedAppointment"> | string
    mode?: StringFilter<"BookedAppointment"> | string
    age?: FloatFilter<"BookedAppointment"> | number
    name?: StringFilter<"BookedAppointment"> | string
    gender?: StringFilter<"BookedAppointment"> | string
  }

  export type BookedAppointmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    doctor_id?: SortOrder
    time?: SortOrder
    date?: SortOrder
    doctorName?: SortOrder
    purpose?: SortOrder
    reschedule?: SortOrder
    reviewed?: SortOrder
    status?: SortOrder
    mode?: SortOrder
    age?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type BookedAppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BookedAppointmentWhereInput | BookedAppointmentWhereInput[]
    OR?: BookedAppointmentWhereInput[]
    NOT?: BookedAppointmentWhereInput | BookedAppointmentWhereInput[]
    userId?: StringFilter<"BookedAppointment"> | string
    doctor_id?: StringFilter<"BookedAppointment"> | string
    time?: StringFilter<"BookedAppointment"> | string
    date?: DateTimeFilter<"BookedAppointment"> | Date | string
    doctorName?: StringFilter<"BookedAppointment"> | string
    purpose?: StringFilter<"BookedAppointment"> | string
    reschedule?: StringFilter<"BookedAppointment"> | string
    reviewed?: StringFilter<"BookedAppointment"> | string
    status?: StringFilter<"BookedAppointment"> | string
    mode?: StringFilter<"BookedAppointment"> | string
    age?: FloatFilter<"BookedAppointment"> | number
    name?: StringFilter<"BookedAppointment"> | string
    gender?: StringFilter<"BookedAppointment"> | string
  }, "id">

  export type BookedAppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    doctor_id?: SortOrder
    time?: SortOrder
    date?: SortOrder
    doctorName?: SortOrder
    purpose?: SortOrder
    reschedule?: SortOrder
    reviewed?: SortOrder
    status?: SortOrder
    mode?: SortOrder
    age?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    _count?: BookedAppointmentCountOrderByAggregateInput
    _avg?: BookedAppointmentAvgOrderByAggregateInput
    _max?: BookedAppointmentMaxOrderByAggregateInput
    _min?: BookedAppointmentMinOrderByAggregateInput
    _sum?: BookedAppointmentSumOrderByAggregateInput
  }

  export type BookedAppointmentScalarWhereWithAggregatesInput = {
    AND?: BookedAppointmentScalarWhereWithAggregatesInput | BookedAppointmentScalarWhereWithAggregatesInput[]
    OR?: BookedAppointmentScalarWhereWithAggregatesInput[]
    NOT?: BookedAppointmentScalarWhereWithAggregatesInput | BookedAppointmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BookedAppointment"> | number
    userId?: StringWithAggregatesFilter<"BookedAppointment"> | string
    doctor_id?: StringWithAggregatesFilter<"BookedAppointment"> | string
    time?: StringWithAggregatesFilter<"BookedAppointment"> | string
    date?: DateTimeWithAggregatesFilter<"BookedAppointment"> | Date | string
    doctorName?: StringWithAggregatesFilter<"BookedAppointment"> | string
    purpose?: StringWithAggregatesFilter<"BookedAppointment"> | string
    reschedule?: StringWithAggregatesFilter<"BookedAppointment"> | string
    reviewed?: StringWithAggregatesFilter<"BookedAppointment"> | string
    status?: StringWithAggregatesFilter<"BookedAppointment"> | string
    mode?: StringWithAggregatesFilter<"BookedAppointment"> | string
    age?: FloatWithAggregatesFilter<"BookedAppointment"> | number
    name?: StringWithAggregatesFilter<"BookedAppointment"> | string
    gender?: StringWithAggregatesFilter<"BookedAppointment"> | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    fileName?: StringNullableFilter<"Message"> | string | null
    filePath?: StringNullableFilter<"Message"> | string | null
    fileType?: StringNullableFilter<"Message"> | string | null
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
    seenBy?: SeenMessageListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    conversationId?: SortOrder
    createdAt?: SortOrder
    fileName?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    conversation?: ConversationOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    seenBy?: SeenMessageOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    fileName?: StringNullableFilter<"Message"> | string | null
    filePath?: StringNullableFilter<"Message"> | string | null
    fileType?: StringNullableFilter<"Message"> | string | null
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
    seenBy?: SeenMessageListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    conversationId?: SortOrder
    createdAt?: SortOrder
    fileName?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    content?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    conversationId?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    fileName?: StringNullableWithAggregatesFilter<"Message"> | string | null
    filePath?: StringNullableWithAggregatesFilter<"Message"> | string | null
    fileType?: StringNullableWithAggregatesFilter<"Message"> | string | null
  }

  export type SeenMessageWhereInput = {
    AND?: SeenMessageWhereInput | SeenMessageWhereInput[]
    OR?: SeenMessageWhereInput[]
    NOT?: SeenMessageWhereInput | SeenMessageWhereInput[]
    id?: IntFilter<"SeenMessage"> | number
    messageId?: IntFilter<"SeenMessage"> | number
    userId?: StringFilter<"SeenMessage"> | string
    seenAt?: DateTimeFilter<"SeenMessage"> | Date | string
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type SeenMessageOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    seenAt?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type SeenMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    messageId_userId?: SeenMessageMessageIdUserIdCompoundUniqueInput
    AND?: SeenMessageWhereInput | SeenMessageWhereInput[]
    OR?: SeenMessageWhereInput[]
    NOT?: SeenMessageWhereInput | SeenMessageWhereInput[]
    messageId?: IntFilter<"SeenMessage"> | number
    userId?: StringFilter<"SeenMessage"> | string
    seenAt?: DateTimeFilter<"SeenMessage"> | Date | string
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }, "id" | "messageId_userId">

  export type SeenMessageOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    seenAt?: SortOrder
    _count?: SeenMessageCountOrderByAggregateInput
    _avg?: SeenMessageAvgOrderByAggregateInput
    _max?: SeenMessageMaxOrderByAggregateInput
    _min?: SeenMessageMinOrderByAggregateInput
    _sum?: SeenMessageSumOrderByAggregateInput
  }

  export type SeenMessageScalarWhereWithAggregatesInput = {
    AND?: SeenMessageScalarWhereWithAggregatesInput | SeenMessageScalarWhereWithAggregatesInput[]
    OR?: SeenMessageScalarWhereWithAggregatesInput[]
    NOT?: SeenMessageScalarWhereWithAggregatesInput | SeenMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SeenMessage"> | number
    messageId?: IntWithAggregatesFilter<"SeenMessage"> | number
    userId?: StringWithAggregatesFilter<"SeenMessage"> | string
    seenAt?: DateTimeWithAggregatesFilter<"SeenMessage"> | Date | string
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    id?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    type?: EnumConversationTypeFilter<"Conversation"> | $Enums.ConversationType
    communityName?: StringNullableFilter<"Conversation"> | string | null
    participants?: ConversationParticipantListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    communityName?: SortOrderInput | SortOrder
    participants?: ConversationParticipantOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    type?: EnumConversationTypeFilter<"Conversation"> | $Enums.ConversationType
    communityName?: StringNullableFilter<"Conversation"> | string | null
    participants?: ConversationParticipantListRelationFilter
    messages?: MessageListRelationFilter
  }, "id">

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    communityName?: SortOrderInput | SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Conversation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    type?: EnumConversationTypeWithAggregatesFilter<"Conversation"> | $Enums.ConversationType
    communityName?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
  }

  export type ConversationParticipantWhereInput = {
    AND?: ConversationParticipantWhereInput | ConversationParticipantWhereInput[]
    OR?: ConversationParticipantWhereInput[]
    NOT?: ConversationParticipantWhereInput | ConversationParticipantWhereInput[]
    id?: IntFilter<"ConversationParticipant"> | number
    conversationId?: StringFilter<"ConversationParticipant"> | string
    userId?: StringFilter<"ConversationParticipant"> | string
    joinedAt?: DateTimeFilter<"ConversationParticipant"> | Date | string
    unreadCount?: IntFilter<"ConversationParticipant"> | number
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ConversationParticipantOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    unreadCount?: SortOrder
    conversation?: ConversationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ConversationParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    conversationId_userId?: ConversationParticipantConversationIdUserIdCompoundUniqueInput
    AND?: ConversationParticipantWhereInput | ConversationParticipantWhereInput[]
    OR?: ConversationParticipantWhereInput[]
    NOT?: ConversationParticipantWhereInput | ConversationParticipantWhereInput[]
    conversationId?: StringFilter<"ConversationParticipant"> | string
    userId?: StringFilter<"ConversationParticipant"> | string
    joinedAt?: DateTimeFilter<"ConversationParticipant"> | Date | string
    unreadCount?: IntFilter<"ConversationParticipant"> | number
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "conversationId_userId">

  export type ConversationParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    unreadCount?: SortOrder
    _count?: ConversationParticipantCountOrderByAggregateInput
    _avg?: ConversationParticipantAvgOrderByAggregateInput
    _max?: ConversationParticipantMaxOrderByAggregateInput
    _min?: ConversationParticipantMinOrderByAggregateInput
    _sum?: ConversationParticipantSumOrderByAggregateInput
  }

  export type ConversationParticipantScalarWhereWithAggregatesInput = {
    AND?: ConversationParticipantScalarWhereWithAggregatesInput | ConversationParticipantScalarWhereWithAggregatesInput[]
    OR?: ConversationParticipantScalarWhereWithAggregatesInput[]
    NOT?: ConversationParticipantScalarWhereWithAggregatesInput | ConversationParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConversationParticipant"> | number
    conversationId?: StringWithAggregatesFilter<"ConversationParticipant"> | string
    userId?: StringWithAggregatesFilter<"ConversationParticipant"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"ConversationParticipant"> | Date | string
    unreadCount?: IntWithAggregatesFilter<"ConversationParticipant"> | number
  }

  export type doctor_availability_detailsWhereInput = {
    AND?: doctor_availability_detailsWhereInput | doctor_availability_detailsWhereInput[]
    OR?: doctor_availability_detailsWhereInput[]
    NOT?: doctor_availability_detailsWhereInput | doctor_availability_detailsWhereInput[]
    id?: IntFilter<"doctor_availability_details"> | number
    userId?: StringFilter<"doctor_availability_details"> | string
    sessionFees?: StringFilter<"doctor_availability_details"> | string
    sessionLength?: StringFilter<"doctor_availability_details"> | string
    languages?: StringNullableListFilter<"doctor_availability_details">
    availableDays?: StringNullableListFilter<"doctor_availability_details">
    availableTimeFrom?: StringFilter<"doctor_availability_details"> | string
    availableTimeSlot?: StringNullableListFilter<"doctor_availability_details">
    users?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type doctor_availability_detailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionFees?: SortOrder
    sessionLength?: SortOrder
    languages?: SortOrder
    availableDays?: SortOrder
    availableTimeFrom?: SortOrder
    availableTimeSlot?: SortOrder
    users?: UserOrderByWithRelationInput
  }

  export type doctor_availability_detailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: string
    AND?: doctor_availability_detailsWhereInput | doctor_availability_detailsWhereInput[]
    OR?: doctor_availability_detailsWhereInput[]
    NOT?: doctor_availability_detailsWhereInput | doctor_availability_detailsWhereInput[]
    sessionFees?: StringFilter<"doctor_availability_details"> | string
    sessionLength?: StringFilter<"doctor_availability_details"> | string
    languages?: StringNullableListFilter<"doctor_availability_details">
    availableDays?: StringNullableListFilter<"doctor_availability_details">
    availableTimeFrom?: StringFilter<"doctor_availability_details"> | string
    availableTimeSlot?: StringNullableListFilter<"doctor_availability_details">
    users?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type doctor_availability_detailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionFees?: SortOrder
    sessionLength?: SortOrder
    languages?: SortOrder
    availableDays?: SortOrder
    availableTimeFrom?: SortOrder
    availableTimeSlot?: SortOrder
    _count?: doctor_availability_detailsCountOrderByAggregateInput
    _avg?: doctor_availability_detailsAvgOrderByAggregateInput
    _max?: doctor_availability_detailsMaxOrderByAggregateInput
    _min?: doctor_availability_detailsMinOrderByAggregateInput
    _sum?: doctor_availability_detailsSumOrderByAggregateInput
  }

  export type doctor_availability_detailsScalarWhereWithAggregatesInput = {
    AND?: doctor_availability_detailsScalarWhereWithAggregatesInput | doctor_availability_detailsScalarWhereWithAggregatesInput[]
    OR?: doctor_availability_detailsScalarWhereWithAggregatesInput[]
    NOT?: doctor_availability_detailsScalarWhereWithAggregatesInput | doctor_availability_detailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"doctor_availability_details"> | number
    userId?: StringWithAggregatesFilter<"doctor_availability_details"> | string
    sessionFees?: StringWithAggregatesFilter<"doctor_availability_details"> | string
    sessionLength?: StringWithAggregatesFilter<"doctor_availability_details"> | string
    languages?: StringNullableListFilter<"doctor_availability_details">
    availableDays?: StringNullableListFilter<"doctor_availability_details">
    availableTimeFrom?: StringWithAggregatesFilter<"doctor_availability_details"> | string
    availableTimeSlot?: StringNullableListFilter<"doctor_availability_details">
  }

  export type doctor_licensesWhereInput = {
    AND?: doctor_licensesWhereInput | doctor_licensesWhereInput[]
    OR?: doctor_licensesWhereInput[]
    NOT?: doctor_licensesWhereInput | doctor_licensesWhereInput[]
    id?: IntFilter<"doctor_licenses"> | number
    userId?: StringFilter<"doctor_licenses"> | string
    imageUrl1?: StringFilter<"doctor_licenses"> | string
    imageUrl2?: StringFilter<"doctor_licenses"> | string
    registrationNumber1?: StringFilter<"doctor_licenses"> | string
    registrationNumber2?: StringFilter<"doctor_licenses"> | string
    users?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type doctor_licensesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    imageUrl1?: SortOrder
    imageUrl2?: SortOrder
    registrationNumber1?: SortOrder
    registrationNumber2?: SortOrder
    users?: UserOrderByWithRelationInput
  }

  export type doctor_licensesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: string
    AND?: doctor_licensesWhereInput | doctor_licensesWhereInput[]
    OR?: doctor_licensesWhereInput[]
    NOT?: doctor_licensesWhereInput | doctor_licensesWhereInput[]
    imageUrl1?: StringFilter<"doctor_licenses"> | string
    imageUrl2?: StringFilter<"doctor_licenses"> | string
    registrationNumber1?: StringFilter<"doctor_licenses"> | string
    registrationNumber2?: StringFilter<"doctor_licenses"> | string
    users?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type doctor_licensesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    imageUrl1?: SortOrder
    imageUrl2?: SortOrder
    registrationNumber1?: SortOrder
    registrationNumber2?: SortOrder
    _count?: doctor_licensesCountOrderByAggregateInput
    _avg?: doctor_licensesAvgOrderByAggregateInput
    _max?: doctor_licensesMaxOrderByAggregateInput
    _min?: doctor_licensesMinOrderByAggregateInput
    _sum?: doctor_licensesSumOrderByAggregateInput
  }

  export type doctor_licensesScalarWhereWithAggregatesInput = {
    AND?: doctor_licensesScalarWhereWithAggregatesInput | doctor_licensesScalarWhereWithAggregatesInput[]
    OR?: doctor_licensesScalarWhereWithAggregatesInput[]
    NOT?: doctor_licensesScalarWhereWithAggregatesInput | doctor_licensesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"doctor_licenses"> | number
    userId?: StringWithAggregatesFilter<"doctor_licenses"> | string
    imageUrl1?: StringWithAggregatesFilter<"doctor_licenses"> | string
    imageUrl2?: StringWithAggregatesFilter<"doctor_licenses"> | string
    registrationNumber1?: StringWithAggregatesFilter<"doctor_licenses"> | string
    registrationNumber2?: StringWithAggregatesFilter<"doctor_licenses"> | string
  }

  export type doctor_profilesWhereInput = {
    AND?: doctor_profilesWhereInput | doctor_profilesWhereInput[]
    OR?: doctor_profilesWhereInput[]
    NOT?: doctor_profilesWhereInput | doctor_profilesWhereInput[]
    id?: IntFilter<"doctor_profiles"> | number
    userId?: StringFilter<"doctor_profiles"> | string
    legalName?: StringFilter<"doctor_profiles"> | string
    gender?: StringFilter<"doctor_profiles"> | string
    dateOfBirth?: StringFilter<"doctor_profiles"> | string
    address?: StringFilter<"doctor_profiles"> | string
    country?: StringFilter<"doctor_profiles"> | string
    state?: StringFilter<"doctor_profiles"> | string
    city?: StringFilter<"doctor_profiles"> | string
    qualification?: StringFilter<"doctor_profiles"> | string
    bookedAppointment?: FloatFilter<"doctor_profiles"> | number
    specialization?: StringFilter<"doctor_profiles"> | string
    subSpecialist?: StringFilter<"doctor_profiles"> | string
    experienceYears?: StringFilter<"doctor_profiles"> | string
    consultationFees?: StringFilter<"doctor_profiles"> | string
    users?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type doctor_profilesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    legalName?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    qualification?: SortOrder
    bookedAppointment?: SortOrder
    specialization?: SortOrder
    subSpecialist?: SortOrder
    experienceYears?: SortOrder
    consultationFees?: SortOrder
    users?: UserOrderByWithRelationInput
  }

  export type doctor_profilesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: string
    AND?: doctor_profilesWhereInput | doctor_profilesWhereInput[]
    OR?: doctor_profilesWhereInput[]
    NOT?: doctor_profilesWhereInput | doctor_profilesWhereInput[]
    legalName?: StringFilter<"doctor_profiles"> | string
    gender?: StringFilter<"doctor_profiles"> | string
    dateOfBirth?: StringFilter<"doctor_profiles"> | string
    address?: StringFilter<"doctor_profiles"> | string
    country?: StringFilter<"doctor_profiles"> | string
    state?: StringFilter<"doctor_profiles"> | string
    city?: StringFilter<"doctor_profiles"> | string
    qualification?: StringFilter<"doctor_profiles"> | string
    bookedAppointment?: FloatFilter<"doctor_profiles"> | number
    specialization?: StringFilter<"doctor_profiles"> | string
    subSpecialist?: StringFilter<"doctor_profiles"> | string
    experienceYears?: StringFilter<"doctor_profiles"> | string
    consultationFees?: StringFilter<"doctor_profiles"> | string
    users?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type doctor_profilesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    legalName?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    qualification?: SortOrder
    bookedAppointment?: SortOrder
    specialization?: SortOrder
    subSpecialist?: SortOrder
    experienceYears?: SortOrder
    consultationFees?: SortOrder
    _count?: doctor_profilesCountOrderByAggregateInput
    _avg?: doctor_profilesAvgOrderByAggregateInput
    _max?: doctor_profilesMaxOrderByAggregateInput
    _min?: doctor_profilesMinOrderByAggregateInput
    _sum?: doctor_profilesSumOrderByAggregateInput
  }

  export type doctor_profilesScalarWhereWithAggregatesInput = {
    AND?: doctor_profilesScalarWhereWithAggregatesInput | doctor_profilesScalarWhereWithAggregatesInput[]
    OR?: doctor_profilesScalarWhereWithAggregatesInput[]
    NOT?: doctor_profilesScalarWhereWithAggregatesInput | doctor_profilesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"doctor_profiles"> | number
    userId?: StringWithAggregatesFilter<"doctor_profiles"> | string
    legalName?: StringWithAggregatesFilter<"doctor_profiles"> | string
    gender?: StringWithAggregatesFilter<"doctor_profiles"> | string
    dateOfBirth?: StringWithAggregatesFilter<"doctor_profiles"> | string
    address?: StringWithAggregatesFilter<"doctor_profiles"> | string
    country?: StringWithAggregatesFilter<"doctor_profiles"> | string
    state?: StringWithAggregatesFilter<"doctor_profiles"> | string
    city?: StringWithAggregatesFilter<"doctor_profiles"> | string
    qualification?: StringWithAggregatesFilter<"doctor_profiles"> | string
    bookedAppointment?: FloatWithAggregatesFilter<"doctor_profiles"> | number
    specialization?: StringWithAggregatesFilter<"doctor_profiles"> | string
    subSpecialist?: StringWithAggregatesFilter<"doctor_profiles"> | string
    experienceYears?: StringWithAggregatesFilter<"doctor_profiles"> | string
    consultationFees?: StringWithAggregatesFilter<"doctor_profiles"> | string
  }

  export type reviewsWhereInput = {
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    id?: IntFilter<"reviews"> | number
    userId?: StringFilter<"reviews"> | string
    rating?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    patientName?: StringFilter<"reviews"> | string
    patientId?: StringFilter<"reviews"> | string
    patientProfilePic?: StringFilter<"reviews"> | string
    createdAt?: DateTimeFilter<"reviews"> | Date | string
    appointmentId?: FloatFilter<"reviews"> | number
    users?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type reviewsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    message?: SortOrder
    patientName?: SortOrder
    patientId?: SortOrder
    patientProfilePic?: SortOrder
    createdAt?: SortOrder
    appointmentId?: SortOrder
    users?: UserOrderByWithRelationInput
  }

  export type reviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    userId?: StringFilter<"reviews"> | string
    rating?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    patientName?: StringFilter<"reviews"> | string
    patientId?: StringFilter<"reviews"> | string
    patientProfilePic?: StringFilter<"reviews"> | string
    createdAt?: DateTimeFilter<"reviews"> | Date | string
    appointmentId?: FloatFilter<"reviews"> | number
    users?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type reviewsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    message?: SortOrder
    patientName?: SortOrder
    patientId?: SortOrder
    patientProfilePic?: SortOrder
    createdAt?: SortOrder
    appointmentId?: SortOrder
    _count?: reviewsCountOrderByAggregateInput
    _avg?: reviewsAvgOrderByAggregateInput
    _max?: reviewsMaxOrderByAggregateInput
    _min?: reviewsMinOrderByAggregateInput
    _sum?: reviewsSumOrderByAggregateInput
  }

  export type reviewsScalarWhereWithAggregatesInput = {
    AND?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    OR?: reviewsScalarWhereWithAggregatesInput[]
    NOT?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reviews"> | number
    userId?: StringWithAggregatesFilter<"reviews"> | string
    rating?: StringWithAggregatesFilter<"reviews"> | string
    message?: StringWithAggregatesFilter<"reviews"> | string
    patientName?: StringWithAggregatesFilter<"reviews"> | string
    patientId?: StringWithAggregatesFilter<"reviews"> | string
    patientProfilePic?: StringWithAggregatesFilter<"reviews"> | string
    createdAt?: DateTimeWithAggregatesFilter<"reviews"> | Date | string
    appointmentId?: FloatWithAggregatesFilter<"reviews"> | number
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VerificationTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackerCreateInput = {
    id?: string
    userId: string
    activity: JsonNullValueInput | InputJsonValue
    sleep: JsonNullValueInput | InputJsonValue
    wellness: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrackerUncheckedCreateInput = {
    id?: string
    userId: string
    activity: JsonNullValueInput | InputJsonValue
    sleep: JsonNullValueInput | InputJsonValue
    wellness: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activity?: JsonNullValueInput | InputJsonValue
    sleep?: JsonNullValueInput | InputJsonValue
    wellness?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activity?: JsonNullValueInput | InputJsonValue
    sleep?: JsonNullValueInput | InputJsonValue
    wellness?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackerCreateManyInput = {
    id?: string
    userId: string
    activity: JsonNullValueInput | InputJsonValue
    sleep: JsonNullValueInput | InputJsonValue
    wellness: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activity?: JsonNullValueInput | InputJsonValue
    sleep?: JsonNullValueInput | InputJsonValue
    wellness?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activity?: JsonNullValueInput | InputJsonValue
    sleep?: JsonNullValueInput | InputJsonValue
    wellness?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OverviewCreateInput = {
    id?: string
    userId: string
    report?: OverviewCreatereportInput | InputJsonValue[]
  }

  export type OverviewUncheckedCreateInput = {
    id?: string
    userId: string
    report?: OverviewCreatereportInput | InputJsonValue[]
  }

  export type OverviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: OverviewUpdatereportInput | InputJsonValue[]
  }

  export type OverviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: OverviewUpdatereportInput | InputJsonValue[]
  }

  export type OverviewCreateManyInput = {
    id?: string
    userId: string
    report?: OverviewCreatereportInput | InputJsonValue[]
  }

  export type OverviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: OverviewUpdatereportInput | InputJsonValue[]
  }

  export type OverviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: OverviewUpdatereportInput | InputJsonValue[]
  }

  export type HealthMonitoringCreateInput = {
    id?: string
    userId: string
    monthly_monitoring: JsonNullValueInput | InputJsonValue
    weekly_monitoring: JsonNullValueInput | InputJsonValue
    daily_monitoring: JsonNullValueInput | InputJsonValue
  }

  export type HealthMonitoringUncheckedCreateInput = {
    id?: string
    userId: string
    monthly_monitoring: JsonNullValueInput | InputJsonValue
    weekly_monitoring: JsonNullValueInput | InputJsonValue
    daily_monitoring: JsonNullValueInput | InputJsonValue
  }

  export type HealthMonitoringUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    monthly_monitoring?: JsonNullValueInput | InputJsonValue
    weekly_monitoring?: JsonNullValueInput | InputJsonValue
    daily_monitoring?: JsonNullValueInput | InputJsonValue
  }

  export type HealthMonitoringUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    monthly_monitoring?: JsonNullValueInput | InputJsonValue
    weekly_monitoring?: JsonNullValueInput | InputJsonValue
    daily_monitoring?: JsonNullValueInput | InputJsonValue
  }

  export type HealthMonitoringCreateManyInput = {
    id?: string
    userId: string
    monthly_monitoring: JsonNullValueInput | InputJsonValue
    weekly_monitoring: JsonNullValueInput | InputJsonValue
    daily_monitoring: JsonNullValueInput | InputJsonValue
  }

  export type HealthMonitoringUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    monthly_monitoring?: JsonNullValueInput | InputJsonValue
    weekly_monitoring?: JsonNullValueInput | InputJsonValue
    daily_monitoring?: JsonNullValueInput | InputJsonValue
  }

  export type HealthMonitoringUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    monthly_monitoring?: JsonNullValueInput | InputJsonValue
    weekly_monitoring?: JsonNullValueInput | InputJsonValue
    daily_monitoring?: JsonNullValueInput | InputJsonValue
  }

  export type HealthExpectedCreateInput = {
    id?: string
    userId: string
    report?: HealthExpectedCreatereportInput | InputJsonValue[]
  }

  export type HealthExpectedUncheckedCreateInput = {
    id?: string
    userId: string
    report?: HealthExpectedCreatereportInput | InputJsonValue[]
  }

  export type HealthExpectedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: HealthExpectedUpdatereportInput | InputJsonValue[]
  }

  export type HealthExpectedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: HealthExpectedUpdatereportInput | InputJsonValue[]
  }

  export type HealthExpectedCreateManyInput = {
    id?: string
    userId: string
    report?: HealthExpectedCreatereportInput | InputJsonValue[]
  }

  export type HealthExpectedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: HealthExpectedUpdatereportInput | InputJsonValue[]
  }

  export type HealthExpectedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    report?: HealthExpectedUpdatereportInput | InputJsonValue[]
  }

  export type OtpCreateInput = {
    phone: string
    otp: string
    expiry: Date | string
  }

  export type OtpUncheckedCreateInput = {
    id?: number
    phone: string
    otp: string
    expiry: Date | string
  }

  export type OtpUpdateInput = {
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateManyInput = {
    id?: number
    phone: string
    otp: string
    expiry: Date | string
  }

  export type OtpUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type emailOtpCreateInput = {
    email: string
    otp: string
    expiry: Date | string
  }

  export type emailOtpUncheckedCreateInput = {
    id?: number
    email: string
    otp: string
    expiry: Date | string
  }

  export type emailOtpUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type emailOtpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type emailOtpCreateManyInput = {
    id?: number
    email: string
    otp: string
    expiry: Date | string
  }

  export type emailOtpUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type emailOtpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookedAppointmentCreateInput = {
    userId: string
    doctor_id: string
    time: string
    date: Date | string
    doctorName: string
    purpose: string
    reschedule: string
    reviewed: string
    status: string
    mode: string
    age: number
    name: string
    gender: string
  }

  export type BookedAppointmentUncheckedCreateInput = {
    id?: number
    userId: string
    doctor_id: string
    time: string
    date: Date | string
    doctorName: string
    purpose: string
    reschedule: string
    reviewed: string
    status: string
    mode: string
    age: number
    name: string
    gender: string
  }

  export type BookedAppointmentUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorName?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    reschedule?: StringFieldUpdateOperationsInput | string
    reviewed?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type BookedAppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorName?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    reschedule?: StringFieldUpdateOperationsInput | string
    reviewed?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type BookedAppointmentCreateManyInput = {
    id?: number
    userId: string
    doctor_id: string
    time: string
    date: Date | string
    doctorName: string
    purpose: string
    reschedule: string
    reviewed: string
    status: string
    mode: string
    age: number
    name: string
    gender: string
  }

  export type BookedAppointmentUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorName?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    reschedule?: StringFieldUpdateOperationsInput | string
    reviewed?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type BookedAppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorName?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    reschedule?: StringFieldUpdateOperationsInput | string
    reviewed?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    mode?: StringFieldUpdateOperationsInput | string
    age?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateInput = {
    content: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    conversation: ConversationCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessagesInput
    seenBy?: SeenMessageCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    content: string
    senderId: string
    conversationId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    seenBy?: SeenMessageUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    seenBy?: SeenMessageUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    seenBy?: SeenMessageUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: number
    content: string
    senderId: string
    conversationId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
  }

  export type MessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SeenMessageCreateInput = {
    userId: string
    seenAt?: Date | string
    message: MessageCreateNestedOneWithoutSeenByInput
  }

  export type SeenMessageUncheckedCreateInput = {
    id?: number
    messageId: number
    userId: string
    seenAt?: Date | string
  }

  export type SeenMessageUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutSeenByNestedInput
  }

  export type SeenMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeenMessageCreateManyInput = {
    id?: number
    messageId: number
    userId: string
    seenAt?: Date | string
  }

  export type SeenMessageUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeenMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
  }

  export type ConversationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConversationParticipantCreateInput = {
    joinedAt?: Date | string
    unreadCount?: number
    conversation: ConversationCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutParticipantsInput
  }

  export type ConversationParticipantUncheckedCreateInput = {
    id?: number
    conversationId: string
    userId: string
    joinedAt?: Date | string
    unreadCount?: number
  }

  export type ConversationParticipantUpdateInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
    conversation?: ConversationUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ConversationParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationParticipantCreateManyInput = {
    id?: number
    conversationId: string
    userId: string
    joinedAt?: Date | string
    unreadCount?: number
  }

  export type ConversationParticipantUpdateManyMutationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type doctor_availability_detailsCreateInput = {
    sessionFees: string
    sessionLength: string
    languages?: doctor_availability_detailsCreatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsCreateavailableDaysInput | string[]
    availableTimeFrom: string
    availableTimeSlot?: doctor_availability_detailsCreateavailableTimeSlotInput | string[]
    users: UserCreateNestedOneWithoutDoctor_availability_detailsInput
  }

  export type doctor_availability_detailsUncheckedCreateInput = {
    id?: number
    userId: string
    sessionFees: string
    sessionLength: string
    languages?: doctor_availability_detailsCreatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsCreateavailableDaysInput | string[]
    availableTimeFrom: string
    availableTimeSlot?: doctor_availability_detailsCreateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsUpdateInput = {
    sessionFees?: StringFieldUpdateOperationsInput | string
    sessionLength?: StringFieldUpdateOperationsInput | string
    languages?: doctor_availability_detailsUpdatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsUpdateavailableDaysInput | string[]
    availableTimeFrom?: StringFieldUpdateOperationsInput | string
    availableTimeSlot?: doctor_availability_detailsUpdateavailableTimeSlotInput | string[]
    users?: UserUpdateOneRequiredWithoutDoctor_availability_detailsNestedInput
  }

  export type doctor_availability_detailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    sessionFees?: StringFieldUpdateOperationsInput | string
    sessionLength?: StringFieldUpdateOperationsInput | string
    languages?: doctor_availability_detailsUpdatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsUpdateavailableDaysInput | string[]
    availableTimeFrom?: StringFieldUpdateOperationsInput | string
    availableTimeSlot?: doctor_availability_detailsUpdateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsCreateManyInput = {
    id?: number
    userId: string
    sessionFees: string
    sessionLength: string
    languages?: doctor_availability_detailsCreatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsCreateavailableDaysInput | string[]
    availableTimeFrom: string
    availableTimeSlot?: doctor_availability_detailsCreateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsUpdateManyMutationInput = {
    sessionFees?: StringFieldUpdateOperationsInput | string
    sessionLength?: StringFieldUpdateOperationsInput | string
    languages?: doctor_availability_detailsUpdatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsUpdateavailableDaysInput | string[]
    availableTimeFrom?: StringFieldUpdateOperationsInput | string
    availableTimeSlot?: doctor_availability_detailsUpdateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    sessionFees?: StringFieldUpdateOperationsInput | string
    sessionLength?: StringFieldUpdateOperationsInput | string
    languages?: doctor_availability_detailsUpdatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsUpdateavailableDaysInput | string[]
    availableTimeFrom?: StringFieldUpdateOperationsInput | string
    availableTimeSlot?: doctor_availability_detailsUpdateavailableTimeSlotInput | string[]
  }

  export type doctor_licensesCreateInput = {
    imageUrl1: string
    imageUrl2: string
    registrationNumber1: string
    registrationNumber2: string
    users: UserCreateNestedOneWithoutDoctor_licensesInput
  }

  export type doctor_licensesUncheckedCreateInput = {
    id?: number
    userId: string
    imageUrl1: string
    imageUrl2: string
    registrationNumber1: string
    registrationNumber2: string
  }

  export type doctor_licensesUpdateInput = {
    imageUrl1?: StringFieldUpdateOperationsInput | string
    imageUrl2?: StringFieldUpdateOperationsInput | string
    registrationNumber1?: StringFieldUpdateOperationsInput | string
    registrationNumber2?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateOneRequiredWithoutDoctor_licensesNestedInput
  }

  export type doctor_licensesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl1?: StringFieldUpdateOperationsInput | string
    imageUrl2?: StringFieldUpdateOperationsInput | string
    registrationNumber1?: StringFieldUpdateOperationsInput | string
    registrationNumber2?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_licensesCreateManyInput = {
    id?: number
    userId: string
    imageUrl1: string
    imageUrl2: string
    registrationNumber1: string
    registrationNumber2: string
  }

  export type doctor_licensesUpdateManyMutationInput = {
    imageUrl1?: StringFieldUpdateOperationsInput | string
    imageUrl2?: StringFieldUpdateOperationsInput | string
    registrationNumber1?: StringFieldUpdateOperationsInput | string
    registrationNumber2?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_licensesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl1?: StringFieldUpdateOperationsInput | string
    imageUrl2?: StringFieldUpdateOperationsInput | string
    registrationNumber1?: StringFieldUpdateOperationsInput | string
    registrationNumber2?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_profilesCreateInput = {
    legalName: string
    gender: string
    dateOfBirth: string
    address: string
    country: string
    state: string
    city: string
    qualification: string
    bookedAppointment: number
    specialization: string
    subSpecialist: string
    experienceYears: string
    consultationFees: string
    users: UserCreateNestedOneWithoutDoctor_profilesInput
  }

  export type doctor_profilesUncheckedCreateInput = {
    id?: number
    userId: string
    legalName: string
    gender: string
    dateOfBirth: string
    address: string
    country: string
    state: string
    city: string
    qualification: string
    bookedAppointment: number
    specialization: string
    subSpecialist: string
    experienceYears: string
    consultationFees: string
  }

  export type doctor_profilesUpdateInput = {
    legalName?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    qualification?: StringFieldUpdateOperationsInput | string
    bookedAppointment?: FloatFieldUpdateOperationsInput | number
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialist?: StringFieldUpdateOperationsInput | string
    experienceYears?: StringFieldUpdateOperationsInput | string
    consultationFees?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateOneRequiredWithoutDoctor_profilesNestedInput
  }

  export type doctor_profilesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    legalName?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    qualification?: StringFieldUpdateOperationsInput | string
    bookedAppointment?: FloatFieldUpdateOperationsInput | number
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialist?: StringFieldUpdateOperationsInput | string
    experienceYears?: StringFieldUpdateOperationsInput | string
    consultationFees?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_profilesCreateManyInput = {
    id?: number
    userId: string
    legalName: string
    gender: string
    dateOfBirth: string
    address: string
    country: string
    state: string
    city: string
    qualification: string
    bookedAppointment: number
    specialization: string
    subSpecialist: string
    experienceYears: string
    consultationFees: string
  }

  export type doctor_profilesUpdateManyMutationInput = {
    legalName?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    qualification?: StringFieldUpdateOperationsInput | string
    bookedAppointment?: FloatFieldUpdateOperationsInput | number
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialist?: StringFieldUpdateOperationsInput | string
    experienceYears?: StringFieldUpdateOperationsInput | string
    consultationFees?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_profilesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    legalName?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    qualification?: StringFieldUpdateOperationsInput | string
    bookedAppointment?: FloatFieldUpdateOperationsInput | number
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialist?: StringFieldUpdateOperationsInput | string
    experienceYears?: StringFieldUpdateOperationsInput | string
    consultationFees?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsCreateInput = {
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt?: Date | string
    appointmentId: number
    users: UserCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateInput = {
    id?: number
    userId: string
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt?: Date | string
    appointmentId: number
  }

  export type reviewsUpdateInput = {
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
    users?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
  }

  export type reviewsCreateManyInput = {
    id?: number
    userId: string
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt?: Date | string
    appointmentId: number
  }

  export type reviewsUpdateManyMutationInput = {
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
  }

  export type reviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ConversationParticipantListRelationFilter = {
    every?: ConversationParticipantWhereInput
    some?: ConversationParticipantWhereInput
    none?: ConversationParticipantWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type Doctor_availability_detailsNullableRelationFilter = {
    is?: doctor_availability_detailsWhereInput | null
    isNot?: doctor_availability_detailsWhereInput | null
  }

  export type Doctor_licensesNullableRelationFilter = {
    is?: doctor_licensesWhereInput | null
    isNot?: doctor_licensesWhereInput | null
  }

  export type Doctor_profilesNullableRelationFilter = {
    is?: doctor_profilesWhereInput | null
    isNot?: doctor_profilesWhereInput | null
  }

  export type ReviewsListRelationFilter = {
    every?: reviewsWhereInput
    some?: reviewsWhereInput
    none?: reviewsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ConversationParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    numberVerified?: SortOrder
    image?: SortOrder
    about?: SortOrder
    emailVerified?: SortOrder
    socket_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    numberVerified?: SortOrder
    image?: SortOrder
    about?: SortOrder
    emailVerified?: SortOrder
    socket_id?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    numberVerified?: SortOrder
    image?: SortOrder
    about?: SortOrder
    emailVerified?: SortOrder
    socket_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type VerificationTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PasswordResetEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TrackerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    sleep?: SortOrder
    wellness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrackerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type OverviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    report?: SortOrder
  }

  export type OverviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OverviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HealthMonitoringCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    monthly_monitoring?: SortOrder
    weekly_monitoring?: SortOrder
    daily_monitoring?: SortOrder
  }

  export type HealthMonitoringMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HealthMonitoringMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HealthExpectedCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    report?: SortOrder
  }

  export type HealthExpectedMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HealthExpectedMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type OtpCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type OtpAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OtpMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type OtpMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type OtpSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type emailOtpCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type emailOtpAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type emailOtpMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type emailOtpMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiry?: SortOrder
  }

  export type emailOtpSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BookedAppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    doctor_id?: SortOrder
    time?: SortOrder
    date?: SortOrder
    doctorName?: SortOrder
    purpose?: SortOrder
    reschedule?: SortOrder
    reviewed?: SortOrder
    status?: SortOrder
    mode?: SortOrder
    age?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type BookedAppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type BookedAppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    doctor_id?: SortOrder
    time?: SortOrder
    date?: SortOrder
    doctorName?: SortOrder
    purpose?: SortOrder
    reschedule?: SortOrder
    reviewed?: SortOrder
    status?: SortOrder
    mode?: SortOrder
    age?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type BookedAppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    doctor_id?: SortOrder
    time?: SortOrder
    date?: SortOrder
    doctorName?: SortOrder
    purpose?: SortOrder
    reschedule?: SortOrder
    reviewed?: SortOrder
    status?: SortOrder
    mode?: SortOrder
    age?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type BookedAppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ConversationRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type SeenMessageListRelationFilter = {
    every?: SeenMessageWhereInput
    some?: SeenMessageWhereInput
    none?: SeenMessageWhereInput
  }

  export type SeenMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    conversationId?: SortOrder
    createdAt?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    conversationId?: SortOrder
    createdAt?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    conversationId?: SortOrder
    createdAt?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type SeenMessageMessageIdUserIdCompoundUniqueInput = {
    messageId: number
    userId: string
  }

  export type SeenMessageCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    seenAt?: SortOrder
  }

  export type SeenMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
  }

  export type SeenMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    seenAt?: SortOrder
  }

  export type SeenMessageMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    seenAt?: SortOrder
  }

  export type SeenMessageSumOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
  }

  export type EnumConversationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationType | EnumConversationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationTypeFilter<$PrismaModel> | $Enums.ConversationType
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    communityName?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    communityName?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    communityName?: SortOrder
  }

  export type EnumConversationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationType | EnumConversationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationTypeWithAggregatesFilter<$PrismaModel> | $Enums.ConversationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConversationTypeFilter<$PrismaModel>
    _max?: NestedEnumConversationTypeFilter<$PrismaModel>
  }

  export type ConversationParticipantConversationIdUserIdCompoundUniqueInput = {
    conversationId: string
    userId: string
  }

  export type ConversationParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    unreadCount?: SortOrder
  }

  export type ConversationParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    unreadCount?: SortOrder
  }

  export type ConversationParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    unreadCount?: SortOrder
  }

  export type ConversationParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    unreadCount?: SortOrder
  }

  export type ConversationParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    unreadCount?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type doctor_availability_detailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionFees?: SortOrder
    sessionLength?: SortOrder
    languages?: SortOrder
    availableDays?: SortOrder
    availableTimeFrom?: SortOrder
    availableTimeSlot?: SortOrder
  }

  export type doctor_availability_detailsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type doctor_availability_detailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionFees?: SortOrder
    sessionLength?: SortOrder
    availableTimeFrom?: SortOrder
  }

  export type doctor_availability_detailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionFees?: SortOrder
    sessionLength?: SortOrder
    availableTimeFrom?: SortOrder
  }

  export type doctor_availability_detailsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type doctor_licensesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    imageUrl1?: SortOrder
    imageUrl2?: SortOrder
    registrationNumber1?: SortOrder
    registrationNumber2?: SortOrder
  }

  export type doctor_licensesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type doctor_licensesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    imageUrl1?: SortOrder
    imageUrl2?: SortOrder
    registrationNumber1?: SortOrder
    registrationNumber2?: SortOrder
  }

  export type doctor_licensesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    imageUrl1?: SortOrder
    imageUrl2?: SortOrder
    registrationNumber1?: SortOrder
    registrationNumber2?: SortOrder
  }

  export type doctor_licensesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type doctor_profilesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    legalName?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    qualification?: SortOrder
    bookedAppointment?: SortOrder
    specialization?: SortOrder
    subSpecialist?: SortOrder
    experienceYears?: SortOrder
    consultationFees?: SortOrder
  }

  export type doctor_profilesAvgOrderByAggregateInput = {
    id?: SortOrder
    bookedAppointment?: SortOrder
  }

  export type doctor_profilesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    legalName?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    qualification?: SortOrder
    bookedAppointment?: SortOrder
    specialization?: SortOrder
    subSpecialist?: SortOrder
    experienceYears?: SortOrder
    consultationFees?: SortOrder
  }

  export type doctor_profilesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    legalName?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    qualification?: SortOrder
    bookedAppointment?: SortOrder
    specialization?: SortOrder
    subSpecialist?: SortOrder
    experienceYears?: SortOrder
    consultationFees?: SortOrder
  }

  export type doctor_profilesSumOrderByAggregateInput = {
    id?: SortOrder
    bookedAppointment?: SortOrder
  }

  export type reviewsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    message?: SortOrder
    patientName?: SortOrder
    patientId?: SortOrder
    patientProfilePic?: SortOrder
    createdAt?: SortOrder
    appointmentId?: SortOrder
  }

  export type reviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
  }

  export type reviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    message?: SortOrder
    patientName?: SortOrder
    patientId?: SortOrder
    patientProfilePic?: SortOrder
    createdAt?: SortOrder
    appointmentId?: SortOrder
  }

  export type reviewsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    message?: SortOrder
    patientName?: SortOrder
    patientId?: SortOrder
    patientProfilePic?: SortOrder
    createdAt?: SortOrder
    appointmentId?: SortOrder
  }

  export type reviewsSumOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
  }

  export type ConversationParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationParticipantCreateWithoutUserInput, ConversationParticipantUncheckedCreateWithoutUserInput> | ConversationParticipantCreateWithoutUserInput[] | ConversationParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutUserInput | ConversationParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ConversationParticipantCreateManyUserInputEnvelope
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type doctor_availability_detailsCreateNestedOneWithoutUsersInput = {
    create?: XOR<doctor_availability_detailsCreateWithoutUsersInput, doctor_availability_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_availability_detailsCreateOrConnectWithoutUsersInput
    connect?: doctor_availability_detailsWhereUniqueInput
  }

  export type doctor_licensesCreateNestedOneWithoutUsersInput = {
    create?: XOR<doctor_licensesCreateWithoutUsersInput, doctor_licensesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_licensesCreateOrConnectWithoutUsersInput
    connect?: doctor_licensesWhereUniqueInput
  }

  export type doctor_profilesCreateNestedOneWithoutUsersInput = {
    create?: XOR<doctor_profilesCreateWithoutUsersInput, doctor_profilesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_profilesCreateOrConnectWithoutUsersInput
    connect?: doctor_profilesWhereUniqueInput
  }

  export type reviewsCreateNestedManyWithoutUsersInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type ConversationParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationParticipantCreateWithoutUserInput, ConversationParticipantUncheckedCreateWithoutUserInput> | ConversationParticipantCreateWithoutUserInput[] | ConversationParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutUserInput | ConversationParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ConversationParticipantCreateManyUserInputEnvelope
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<doctor_availability_detailsCreateWithoutUsersInput, doctor_availability_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_availability_detailsCreateOrConnectWithoutUsersInput
    connect?: doctor_availability_detailsWhereUniqueInput
  }

  export type doctor_licensesUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<doctor_licensesCreateWithoutUsersInput, doctor_licensesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_licensesCreateOrConnectWithoutUsersInput
    connect?: doctor_licensesWhereUniqueInput
  }

  export type doctor_profilesUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<doctor_profilesCreateWithoutUsersInput, doctor_profilesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_profilesCreateOrConnectWithoutUsersInput
    connect?: doctor_profilesWhereUniqueInput
  }

  export type reviewsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ConversationParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationParticipantCreateWithoutUserInput, ConversationParticipantUncheckedCreateWithoutUserInput> | ConversationParticipantCreateWithoutUserInput[] | ConversationParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutUserInput | ConversationParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ConversationParticipantUpsertWithWhereUniqueWithoutUserInput | ConversationParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationParticipantCreateManyUserInputEnvelope
    set?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    disconnect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    delete?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    update?: ConversationParticipantUpdateWithWhereUniqueWithoutUserInput | ConversationParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationParticipantUpdateManyWithWhereWithoutUserInput | ConversationParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationParticipantScalarWhereInput | ConversationParticipantScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type doctor_availability_detailsUpdateOneWithoutUsersNestedInput = {
    create?: XOR<doctor_availability_detailsCreateWithoutUsersInput, doctor_availability_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_availability_detailsCreateOrConnectWithoutUsersInput
    upsert?: doctor_availability_detailsUpsertWithoutUsersInput
    disconnect?: doctor_availability_detailsWhereInput | boolean
    delete?: doctor_availability_detailsWhereInput | boolean
    connect?: doctor_availability_detailsWhereUniqueInput
    update?: XOR<XOR<doctor_availability_detailsUpdateToOneWithWhereWithoutUsersInput, doctor_availability_detailsUpdateWithoutUsersInput>, doctor_availability_detailsUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_licensesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<doctor_licensesCreateWithoutUsersInput, doctor_licensesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_licensesCreateOrConnectWithoutUsersInput
    upsert?: doctor_licensesUpsertWithoutUsersInput
    disconnect?: doctor_licensesWhereInput | boolean
    delete?: doctor_licensesWhereInput | boolean
    connect?: doctor_licensesWhereUniqueInput
    update?: XOR<XOR<doctor_licensesUpdateToOneWithWhereWithoutUsersInput, doctor_licensesUpdateWithoutUsersInput>, doctor_licensesUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_profilesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<doctor_profilesCreateWithoutUsersInput, doctor_profilesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_profilesCreateOrConnectWithoutUsersInput
    upsert?: doctor_profilesUpsertWithoutUsersInput
    disconnect?: doctor_profilesWhereInput | boolean
    delete?: doctor_profilesWhereInput | boolean
    connect?: doctor_profilesWhereUniqueInput
    update?: XOR<XOR<doctor_profilesUpdateToOneWithWhereWithoutUsersInput, doctor_profilesUpdateWithoutUsersInput>, doctor_profilesUncheckedUpdateWithoutUsersInput>
  }

  export type reviewsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUsersInput | reviewsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUsersInput | reviewsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUsersInput | reviewsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationParticipantCreateWithoutUserInput, ConversationParticipantUncheckedCreateWithoutUserInput> | ConversationParticipantCreateWithoutUserInput[] | ConversationParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutUserInput | ConversationParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ConversationParticipantUpsertWithWhereUniqueWithoutUserInput | ConversationParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationParticipantCreateManyUserInputEnvelope
    set?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    disconnect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    delete?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    update?: ConversationParticipantUpdateWithWhereUniqueWithoutUserInput | ConversationParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationParticipantUpdateManyWithWhereWithoutUserInput | ConversationParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationParticipantScalarWhereInput | ConversationParticipantScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<doctor_availability_detailsCreateWithoutUsersInput, doctor_availability_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_availability_detailsCreateOrConnectWithoutUsersInput
    upsert?: doctor_availability_detailsUpsertWithoutUsersInput
    disconnect?: doctor_availability_detailsWhereInput | boolean
    delete?: doctor_availability_detailsWhereInput | boolean
    connect?: doctor_availability_detailsWhereUniqueInput
    update?: XOR<XOR<doctor_availability_detailsUpdateToOneWithWhereWithoutUsersInput, doctor_availability_detailsUpdateWithoutUsersInput>, doctor_availability_detailsUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<doctor_licensesCreateWithoutUsersInput, doctor_licensesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_licensesCreateOrConnectWithoutUsersInput
    upsert?: doctor_licensesUpsertWithoutUsersInput
    disconnect?: doctor_licensesWhereInput | boolean
    delete?: doctor_licensesWhereInput | boolean
    connect?: doctor_licensesWhereUniqueInput
    update?: XOR<XOR<doctor_licensesUpdateToOneWithWhereWithoutUsersInput, doctor_licensesUpdateWithoutUsersInput>, doctor_licensesUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<doctor_profilesCreateWithoutUsersInput, doctor_profilesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: doctor_profilesCreateOrConnectWithoutUsersInput
    upsert?: doctor_profilesUpsertWithoutUsersInput
    disconnect?: doctor_profilesWhereInput | boolean
    delete?: doctor_profilesWhereInput | boolean
    connect?: doctor_profilesWhereUniqueInput
    update?: XOR<XOR<doctor_profilesUpdateToOneWithWhereWithoutUsersInput, doctor_profilesUpdateWithoutUsersInput>, doctor_profilesUncheckedUpdateWithoutUsersInput>
  }

  export type reviewsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput> | reviewsCreateWithoutUsersInput[] | reviewsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUsersInput | reviewsCreateOrConnectWithoutUsersInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUsersInput | reviewsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reviewsCreateManyUsersInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUsersInput | reviewsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUsersInput | reviewsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OverviewCreatereportInput = {
    set: InputJsonValue[]
  }

  export type OverviewUpdatereportInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type HealthExpectedCreatereportInput = {
    set: InputJsonValue[]
  }

  export type HealthExpectedUpdatereportInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type SeenMessageCreateNestedManyWithoutMessageInput = {
    create?: XOR<SeenMessageCreateWithoutMessageInput, SeenMessageUncheckedCreateWithoutMessageInput> | SeenMessageCreateWithoutMessageInput[] | SeenMessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: SeenMessageCreateOrConnectWithoutMessageInput | SeenMessageCreateOrConnectWithoutMessageInput[]
    createMany?: SeenMessageCreateManyMessageInputEnvelope
    connect?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
  }

  export type SeenMessageUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<SeenMessageCreateWithoutMessageInput, SeenMessageUncheckedCreateWithoutMessageInput> | SeenMessageCreateWithoutMessageInput[] | SeenMessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: SeenMessageCreateOrConnectWithoutMessageInput | SeenMessageCreateOrConnectWithoutMessageInput[]
    createMany?: SeenMessageCreateManyMessageInputEnvelope
    connect?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
  }

  export type ConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    upsert?: ConversationUpsertWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutMessagesInput, ConversationUpdateWithoutMessagesInput>, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type SeenMessageUpdateManyWithoutMessageNestedInput = {
    create?: XOR<SeenMessageCreateWithoutMessageInput, SeenMessageUncheckedCreateWithoutMessageInput> | SeenMessageCreateWithoutMessageInput[] | SeenMessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: SeenMessageCreateOrConnectWithoutMessageInput | SeenMessageCreateOrConnectWithoutMessageInput[]
    upsert?: SeenMessageUpsertWithWhereUniqueWithoutMessageInput | SeenMessageUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: SeenMessageCreateManyMessageInputEnvelope
    set?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    disconnect?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    delete?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    connect?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    update?: SeenMessageUpdateWithWhereUniqueWithoutMessageInput | SeenMessageUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: SeenMessageUpdateManyWithWhereWithoutMessageInput | SeenMessageUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: SeenMessageScalarWhereInput | SeenMessageScalarWhereInput[]
  }

  export type SeenMessageUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<SeenMessageCreateWithoutMessageInput, SeenMessageUncheckedCreateWithoutMessageInput> | SeenMessageCreateWithoutMessageInput[] | SeenMessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: SeenMessageCreateOrConnectWithoutMessageInput | SeenMessageCreateOrConnectWithoutMessageInput[]
    upsert?: SeenMessageUpsertWithWhereUniqueWithoutMessageInput | SeenMessageUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: SeenMessageCreateManyMessageInputEnvelope
    set?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    disconnect?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    delete?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    connect?: SeenMessageWhereUniqueInput | SeenMessageWhereUniqueInput[]
    update?: SeenMessageUpdateWithWhereUniqueWithoutMessageInput | SeenMessageUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: SeenMessageUpdateManyWithWhereWithoutMessageInput | SeenMessageUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: SeenMessageScalarWhereInput | SeenMessageScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutSeenByInput = {
    create?: XOR<MessageCreateWithoutSeenByInput, MessageUncheckedCreateWithoutSeenByInput>
    connectOrCreate?: MessageCreateOrConnectWithoutSeenByInput
    connect?: MessageWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutSeenByNestedInput = {
    create?: XOR<MessageCreateWithoutSeenByInput, MessageUncheckedCreateWithoutSeenByInput>
    connectOrCreate?: MessageCreateOrConnectWithoutSeenByInput
    upsert?: MessageUpsertWithoutSeenByInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutSeenByInput, MessageUpdateWithoutSeenByInput>, MessageUncheckedUpdateWithoutSeenByInput>
  }

  export type ConversationParticipantCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationParticipantCreateWithoutConversationInput, ConversationParticipantUncheckedCreateWithoutConversationInput> | ConversationParticipantCreateWithoutConversationInput[] | ConversationParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutConversationInput | ConversationParticipantCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationParticipantCreateManyConversationInputEnvelope
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ConversationParticipantUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationParticipantCreateWithoutConversationInput, ConversationParticipantUncheckedCreateWithoutConversationInput> | ConversationParticipantCreateWithoutConversationInput[] | ConversationParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutConversationInput | ConversationParticipantCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationParticipantCreateManyConversationInputEnvelope
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumConversationTypeFieldUpdateOperationsInput = {
    set?: $Enums.ConversationType
  }

  export type ConversationParticipantUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationParticipantCreateWithoutConversationInput, ConversationParticipantUncheckedCreateWithoutConversationInput> | ConversationParticipantCreateWithoutConversationInput[] | ConversationParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutConversationInput | ConversationParticipantCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput | ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationParticipantCreateManyConversationInputEnvelope
    set?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    disconnect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    delete?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    update?: ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput | ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationParticipantUpdateManyWithWhereWithoutConversationInput | ConversationParticipantUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationParticipantScalarWhereInput | ConversationParticipantScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ConversationParticipantUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationParticipantCreateWithoutConversationInput, ConversationParticipantUncheckedCreateWithoutConversationInput> | ConversationParticipantCreateWithoutConversationInput[] | ConversationParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationParticipantCreateOrConnectWithoutConversationInput | ConversationParticipantCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput | ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationParticipantCreateManyConversationInputEnvelope
    set?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    disconnect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    delete?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    connect?: ConversationParticipantWhereUniqueInput | ConversationParticipantWhereUniqueInput[]
    update?: ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput | ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationParticipantUpdateManyWithWhereWithoutConversationInput | ConversationParticipantUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationParticipantScalarWhereInput | ConversationParticipantScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ConversationCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ConversationCreateWithoutParticipantsInput, ConversationUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipantsInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ConversationCreateWithoutParticipantsInput, ConversationUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipantsInput
    upsert?: ConversationUpsertWithoutParticipantsInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutParticipantsInput, ConversationUpdateWithoutParticipantsInput>, ConversationUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipantsInput
    upsert?: UserUpsertWithoutParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipantsInput, UserUpdateWithoutParticipantsInput>, UserUncheckedUpdateWithoutParticipantsInput>
  }

  export type doctor_availability_detailsCreatelanguagesInput = {
    set: string[]
  }

  export type doctor_availability_detailsCreateavailableDaysInput = {
    set: string[]
  }

  export type doctor_availability_detailsCreateavailableTimeSlotInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutDoctor_availability_detailsInput = {
    create?: XOR<UserCreateWithoutDoctor_availability_detailsInput, UserUncheckedCreateWithoutDoctor_availability_detailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctor_availability_detailsInput
    connect?: UserWhereUniqueInput
  }

  export type doctor_availability_detailsUpdatelanguagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type doctor_availability_detailsUpdateavailableDaysInput = {
    set?: string[]
    push?: string | string[]
  }

  export type doctor_availability_detailsUpdateavailableTimeSlotInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutDoctor_availability_detailsNestedInput = {
    create?: XOR<UserCreateWithoutDoctor_availability_detailsInput, UserUncheckedCreateWithoutDoctor_availability_detailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctor_availability_detailsInput
    upsert?: UserUpsertWithoutDoctor_availability_detailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctor_availability_detailsInput, UserUpdateWithoutDoctor_availability_detailsInput>, UserUncheckedUpdateWithoutDoctor_availability_detailsInput>
  }

  export type UserCreateNestedOneWithoutDoctor_licensesInput = {
    create?: XOR<UserCreateWithoutDoctor_licensesInput, UserUncheckedCreateWithoutDoctor_licensesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctor_licensesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDoctor_licensesNestedInput = {
    create?: XOR<UserCreateWithoutDoctor_licensesInput, UserUncheckedCreateWithoutDoctor_licensesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctor_licensesInput
    upsert?: UserUpsertWithoutDoctor_licensesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctor_licensesInput, UserUpdateWithoutDoctor_licensesInput>, UserUncheckedUpdateWithoutDoctor_licensesInput>
  }

  export type UserCreateNestedOneWithoutDoctor_profilesInput = {
    create?: XOR<UserCreateWithoutDoctor_profilesInput, UserUncheckedCreateWithoutDoctor_profilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctor_profilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDoctor_profilesNestedInput = {
    create?: XOR<UserCreateWithoutDoctor_profilesInput, UserUncheckedCreateWithoutDoctor_profilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctor_profilesInput
    upsert?: UserUpsertWithoutDoctor_profilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctor_profilesInput, UserUpdateWithoutDoctor_profilesInput>, UserUncheckedUpdateWithoutDoctor_profilesInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumConversationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationType | EnumConversationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationTypeFilter<$PrismaModel> | $Enums.ConversationType
  }

  export type NestedEnumConversationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationType | EnumConversationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationType[] | ListEnumConversationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationTypeWithAggregatesFilter<$PrismaModel> | $Enums.ConversationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConversationTypeFilter<$PrismaModel>
    _max?: NestedEnumConversationTypeFilter<$PrismaModel>
  }

  export type ConversationParticipantCreateWithoutUserInput = {
    joinedAt?: Date | string
    unreadCount?: number
    conversation: ConversationCreateNestedOneWithoutParticipantsInput
  }

  export type ConversationParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    conversationId: string
    joinedAt?: Date | string
    unreadCount?: number
  }

  export type ConversationParticipantCreateOrConnectWithoutUserInput = {
    where: ConversationParticipantWhereUniqueInput
    create: XOR<ConversationParticipantCreateWithoutUserInput, ConversationParticipantUncheckedCreateWithoutUserInput>
  }

  export type ConversationParticipantCreateManyUserInputEnvelope = {
    data: ConversationParticipantCreateManyUserInput | ConversationParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    content: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    conversation: ConversationCreateNestedOneWithoutMessagesInput
    seenBy?: SeenMessageCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: number
    content: string
    conversationId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    seenBy?: SeenMessageUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type doctor_availability_detailsCreateWithoutUsersInput = {
    sessionFees: string
    sessionLength: string
    languages?: doctor_availability_detailsCreatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsCreateavailableDaysInput | string[]
    availableTimeFrom: string
    availableTimeSlot?: doctor_availability_detailsCreateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsUncheckedCreateWithoutUsersInput = {
    id?: number
    sessionFees: string
    sessionLength: string
    languages?: doctor_availability_detailsCreatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsCreateavailableDaysInput | string[]
    availableTimeFrom: string
    availableTimeSlot?: doctor_availability_detailsCreateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsCreateOrConnectWithoutUsersInput = {
    where: doctor_availability_detailsWhereUniqueInput
    create: XOR<doctor_availability_detailsCreateWithoutUsersInput, doctor_availability_detailsUncheckedCreateWithoutUsersInput>
  }

  export type doctor_licensesCreateWithoutUsersInput = {
    imageUrl1: string
    imageUrl2: string
    registrationNumber1: string
    registrationNumber2: string
  }

  export type doctor_licensesUncheckedCreateWithoutUsersInput = {
    id?: number
    imageUrl1: string
    imageUrl2: string
    registrationNumber1: string
    registrationNumber2: string
  }

  export type doctor_licensesCreateOrConnectWithoutUsersInput = {
    where: doctor_licensesWhereUniqueInput
    create: XOR<doctor_licensesCreateWithoutUsersInput, doctor_licensesUncheckedCreateWithoutUsersInput>
  }

  export type doctor_profilesCreateWithoutUsersInput = {
    legalName: string
    gender: string
    dateOfBirth: string
    address: string
    country: string
    state: string
    city: string
    qualification: string
    bookedAppointment: number
    specialization: string
    subSpecialist: string
    experienceYears: string
    consultationFees: string
  }

  export type doctor_profilesUncheckedCreateWithoutUsersInput = {
    id?: number
    legalName: string
    gender: string
    dateOfBirth: string
    address: string
    country: string
    state: string
    city: string
    qualification: string
    bookedAppointment: number
    specialization: string
    subSpecialist: string
    experienceYears: string
    consultationFees: string
  }

  export type doctor_profilesCreateOrConnectWithoutUsersInput = {
    where: doctor_profilesWhereUniqueInput
    create: XOR<doctor_profilesCreateWithoutUsersInput, doctor_profilesUncheckedCreateWithoutUsersInput>
  }

  export type reviewsCreateWithoutUsersInput = {
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt?: Date | string
    appointmentId: number
  }

  export type reviewsUncheckedCreateWithoutUsersInput = {
    id?: number
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt?: Date | string
    appointmentId: number
  }

  export type reviewsCreateOrConnectWithoutUsersInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput>
  }

  export type reviewsCreateManyUsersInputEnvelope = {
    data: reviewsCreateManyUsersInput | reviewsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ConversationParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ConversationParticipantWhereUniqueInput
    update: XOR<ConversationParticipantUpdateWithoutUserInput, ConversationParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ConversationParticipantCreateWithoutUserInput, ConversationParticipantUncheckedCreateWithoutUserInput>
  }

  export type ConversationParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ConversationParticipantWhereUniqueInput
    data: XOR<ConversationParticipantUpdateWithoutUserInput, ConversationParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ConversationParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ConversationParticipantScalarWhereInput
    data: XOR<ConversationParticipantUpdateManyMutationInput, ConversationParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type ConversationParticipantScalarWhereInput = {
    AND?: ConversationParticipantScalarWhereInput | ConversationParticipantScalarWhereInput[]
    OR?: ConversationParticipantScalarWhereInput[]
    NOT?: ConversationParticipantScalarWhereInput | ConversationParticipantScalarWhereInput[]
    id?: IntFilter<"ConversationParticipant"> | number
    conversationId?: StringFilter<"ConversationParticipant"> | string
    userId?: StringFilter<"ConversationParticipant"> | string
    joinedAt?: DateTimeFilter<"ConversationParticipant"> | Date | string
    unreadCount?: IntFilter<"ConversationParticipant"> | number
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    fileName?: StringNullableFilter<"Message"> | string | null
    filePath?: StringNullableFilter<"Message"> | string | null
    fileType?: StringNullableFilter<"Message"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type doctor_availability_detailsUpsertWithoutUsersInput = {
    update: XOR<doctor_availability_detailsUpdateWithoutUsersInput, doctor_availability_detailsUncheckedUpdateWithoutUsersInput>
    create: XOR<doctor_availability_detailsCreateWithoutUsersInput, doctor_availability_detailsUncheckedCreateWithoutUsersInput>
    where?: doctor_availability_detailsWhereInput
  }

  export type doctor_availability_detailsUpdateToOneWithWhereWithoutUsersInput = {
    where?: doctor_availability_detailsWhereInput
    data: XOR<doctor_availability_detailsUpdateWithoutUsersInput, doctor_availability_detailsUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_availability_detailsUpdateWithoutUsersInput = {
    sessionFees?: StringFieldUpdateOperationsInput | string
    sessionLength?: StringFieldUpdateOperationsInput | string
    languages?: doctor_availability_detailsUpdatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsUpdateavailableDaysInput | string[]
    availableTimeFrom?: StringFieldUpdateOperationsInput | string
    availableTimeSlot?: doctor_availability_detailsUpdateavailableTimeSlotInput | string[]
  }

  export type doctor_availability_detailsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionFees?: StringFieldUpdateOperationsInput | string
    sessionLength?: StringFieldUpdateOperationsInput | string
    languages?: doctor_availability_detailsUpdatelanguagesInput | string[]
    availableDays?: doctor_availability_detailsUpdateavailableDaysInput | string[]
    availableTimeFrom?: StringFieldUpdateOperationsInput | string
    availableTimeSlot?: doctor_availability_detailsUpdateavailableTimeSlotInput | string[]
  }

  export type doctor_licensesUpsertWithoutUsersInput = {
    update: XOR<doctor_licensesUpdateWithoutUsersInput, doctor_licensesUncheckedUpdateWithoutUsersInput>
    create: XOR<doctor_licensesCreateWithoutUsersInput, doctor_licensesUncheckedCreateWithoutUsersInput>
    where?: doctor_licensesWhereInput
  }

  export type doctor_licensesUpdateToOneWithWhereWithoutUsersInput = {
    where?: doctor_licensesWhereInput
    data: XOR<doctor_licensesUpdateWithoutUsersInput, doctor_licensesUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_licensesUpdateWithoutUsersInput = {
    imageUrl1?: StringFieldUpdateOperationsInput | string
    imageUrl2?: StringFieldUpdateOperationsInput | string
    registrationNumber1?: StringFieldUpdateOperationsInput | string
    registrationNumber2?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_licensesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl1?: StringFieldUpdateOperationsInput | string
    imageUrl2?: StringFieldUpdateOperationsInput | string
    registrationNumber1?: StringFieldUpdateOperationsInput | string
    registrationNumber2?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_profilesUpsertWithoutUsersInput = {
    update: XOR<doctor_profilesUpdateWithoutUsersInput, doctor_profilesUncheckedUpdateWithoutUsersInput>
    create: XOR<doctor_profilesCreateWithoutUsersInput, doctor_profilesUncheckedCreateWithoutUsersInput>
    where?: doctor_profilesWhereInput
  }

  export type doctor_profilesUpdateToOneWithWhereWithoutUsersInput = {
    where?: doctor_profilesWhereInput
    data: XOR<doctor_profilesUpdateWithoutUsersInput, doctor_profilesUncheckedUpdateWithoutUsersInput>
  }

  export type doctor_profilesUpdateWithoutUsersInput = {
    legalName?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    qualification?: StringFieldUpdateOperationsInput | string
    bookedAppointment?: FloatFieldUpdateOperationsInput | number
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialist?: StringFieldUpdateOperationsInput | string
    experienceYears?: StringFieldUpdateOperationsInput | string
    consultationFees?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_profilesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    legalName?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    qualification?: StringFieldUpdateOperationsInput | string
    bookedAppointment?: FloatFieldUpdateOperationsInput | number
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialist?: StringFieldUpdateOperationsInput | string
    experienceYears?: StringFieldUpdateOperationsInput | string
    consultationFees?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpsertWithWhereUniqueWithoutUsersInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutUsersInput, reviewsUncheckedUpdateWithoutUsersInput>
    create: XOR<reviewsCreateWithoutUsersInput, reviewsUncheckedCreateWithoutUsersInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutUsersInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutUsersInput, reviewsUncheckedUpdateWithoutUsersInput>
  }

  export type reviewsUpdateManyWithWhereWithoutUsersInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutUsersInput>
  }

  export type reviewsScalarWhereInput = {
    AND?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    OR?: reviewsScalarWhereInput[]
    NOT?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    id?: IntFilter<"reviews"> | number
    userId?: StringFilter<"reviews"> | string
    rating?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    patientName?: StringFilter<"reviews"> | string
    patientId?: StringFilter<"reviews"> | string
    patientProfilePic?: StringFilter<"reviews"> | string
    createdAt?: DateTimeFilter<"reviews"> | Date | string
    appointmentId?: FloatFilter<"reviews"> | number
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ConversationCreateWithoutMessagesInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMessagesInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMessagesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type SeenMessageCreateWithoutMessageInput = {
    userId: string
    seenAt?: Date | string
  }

  export type SeenMessageUncheckedCreateWithoutMessageInput = {
    id?: number
    userId: string
    seenAt?: Date | string
  }

  export type SeenMessageCreateOrConnectWithoutMessageInput = {
    where: SeenMessageWhereUniqueInput
    create: XOR<SeenMessageCreateWithoutMessageInput, SeenMessageUncheckedCreateWithoutMessageInput>
  }

  export type SeenMessageCreateManyMessageInputEnvelope = {
    data: SeenMessageCreateManyMessageInput | SeenMessageCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type ConversationUpsertWithoutMessagesInput = {
    update: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type SeenMessageUpsertWithWhereUniqueWithoutMessageInput = {
    where: SeenMessageWhereUniqueInput
    update: XOR<SeenMessageUpdateWithoutMessageInput, SeenMessageUncheckedUpdateWithoutMessageInput>
    create: XOR<SeenMessageCreateWithoutMessageInput, SeenMessageUncheckedCreateWithoutMessageInput>
  }

  export type SeenMessageUpdateWithWhereUniqueWithoutMessageInput = {
    where: SeenMessageWhereUniqueInput
    data: XOR<SeenMessageUpdateWithoutMessageInput, SeenMessageUncheckedUpdateWithoutMessageInput>
  }

  export type SeenMessageUpdateManyWithWhereWithoutMessageInput = {
    where: SeenMessageScalarWhereInput
    data: XOR<SeenMessageUpdateManyMutationInput, SeenMessageUncheckedUpdateManyWithoutMessageInput>
  }

  export type SeenMessageScalarWhereInput = {
    AND?: SeenMessageScalarWhereInput | SeenMessageScalarWhereInput[]
    OR?: SeenMessageScalarWhereInput[]
    NOT?: SeenMessageScalarWhereInput | SeenMessageScalarWhereInput[]
    id?: IntFilter<"SeenMessage"> | number
    messageId?: IntFilter<"SeenMessage"> | number
    userId?: StringFilter<"SeenMessage"> | string
    seenAt?: DateTimeFilter<"SeenMessage"> | Date | string
  }

  export type MessageCreateWithoutSeenByInput = {
    content: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    conversation: ConversationCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSeenByInput = {
    id?: number
    content: string
    senderId: string
    conversationId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
  }

  export type MessageCreateOrConnectWithoutSeenByInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSeenByInput, MessageUncheckedCreateWithoutSeenByInput>
  }

  export type MessageUpsertWithoutSeenByInput = {
    update: XOR<MessageUpdateWithoutSeenByInput, MessageUncheckedUpdateWithoutSeenByInput>
    create: XOR<MessageCreateWithoutSeenByInput, MessageUncheckedCreateWithoutSeenByInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutSeenByInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutSeenByInput, MessageUncheckedUpdateWithoutSeenByInput>
  }

  export type MessageUpdateWithoutSeenByInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSeenByInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConversationParticipantCreateWithoutConversationInput = {
    joinedAt?: Date | string
    unreadCount?: number
    user: UserCreateNestedOneWithoutParticipantsInput
  }

  export type ConversationParticipantUncheckedCreateWithoutConversationInput = {
    id?: number
    userId: string
    joinedAt?: Date | string
    unreadCount?: number
  }

  export type ConversationParticipantCreateOrConnectWithoutConversationInput = {
    where: ConversationParticipantWhereUniqueInput
    create: XOR<ConversationParticipantCreateWithoutConversationInput, ConversationParticipantUncheckedCreateWithoutConversationInput>
  }

  export type ConversationParticipantCreateManyConversationInputEnvelope = {
    data: ConversationParticipantCreateManyConversationInput | ConversationParticipantCreateManyConversationInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutConversationInput = {
    content: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    sender: UserCreateNestedOneWithoutMessagesInput
    seenBy?: SeenMessageCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutConversationInput = {
    id?: number
    content: string
    senderId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
    seenBy?: SeenMessageUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutConversationInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateManyConversationInputEnvelope = {
    data: MessageCreateManyConversationInput | MessageCreateManyConversationInput[]
    skipDuplicates?: boolean
  }

  export type ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput = {
    where: ConversationParticipantWhereUniqueInput
    update: XOR<ConversationParticipantUpdateWithoutConversationInput, ConversationParticipantUncheckedUpdateWithoutConversationInput>
    create: XOR<ConversationParticipantCreateWithoutConversationInput, ConversationParticipantUncheckedCreateWithoutConversationInput>
  }

  export type ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput = {
    where: ConversationParticipantWhereUniqueInput
    data: XOR<ConversationParticipantUpdateWithoutConversationInput, ConversationParticipantUncheckedUpdateWithoutConversationInput>
  }

  export type ConversationParticipantUpdateManyWithWhereWithoutConversationInput = {
    where: ConversationParticipantScalarWhereInput
    data: XOR<ConversationParticipantUpdateManyMutationInput, ConversationParticipantUncheckedUpdateManyWithoutConversationInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithWhereWithoutConversationInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type ConversationCreateWithoutParticipantsInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutParticipantsInput = {
    id?: string
    createdAt?: Date | string
    type?: $Enums.ConversationType
    communityName?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutParticipantsInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutParticipantsInput, ConversationUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutParticipantsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutParticipantsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
  }

  export type ConversationUpsertWithoutParticipantsInput = {
    update: XOR<ConversationUpdateWithoutParticipantsInput, ConversationUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ConversationCreateWithoutParticipantsInput, ConversationUncheckedCreateWithoutParticipantsInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutParticipantsInput, ConversationUncheckedUpdateWithoutParticipantsInput>
  }

  export type ConversationUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumConversationTypeFieldUpdateOperationsInput | $Enums.ConversationType
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type UserUpsertWithoutParticipantsInput = {
    update: XOR<UserUpdateWithoutParticipantsInput, UserUncheckedUpdateWithoutParticipantsInput>
    create: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipantsInput, UserUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateWithoutDoctor_availability_detailsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutDoctor_availability_detailsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutDoctor_availability_detailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctor_availability_detailsInput, UserUncheckedCreateWithoutDoctor_availability_detailsInput>
  }

  export type UserUpsertWithoutDoctor_availability_detailsInput = {
    update: XOR<UserUpdateWithoutDoctor_availability_detailsInput, UserUncheckedUpdateWithoutDoctor_availability_detailsInput>
    create: XOR<UserCreateWithoutDoctor_availability_detailsInput, UserUncheckedCreateWithoutDoctor_availability_detailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctor_availability_detailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctor_availability_detailsInput, UserUncheckedUpdateWithoutDoctor_availability_detailsInput>
  }

  export type UserUpdateWithoutDoctor_availability_detailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctor_availability_detailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateWithoutDoctor_licensesInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutDoctor_licensesInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutDoctor_licensesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctor_licensesInput, UserUncheckedCreateWithoutDoctor_licensesInput>
  }

  export type UserUpsertWithoutDoctor_licensesInput = {
    update: XOR<UserUpdateWithoutDoctor_licensesInput, UserUncheckedUpdateWithoutDoctor_licensesInput>
    create: XOR<UserCreateWithoutDoctor_licensesInput, UserUncheckedCreateWithoutDoctor_licensesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctor_licensesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctor_licensesInput, UserUncheckedUpdateWithoutDoctor_licensesInput>
  }

  export type UserUpdateWithoutDoctor_licensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctor_licensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateWithoutDoctor_profilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    reviews?: reviewsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutDoctor_profilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutDoctor_profilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctor_profilesInput, UserUncheckedCreateWithoutDoctor_profilesInput>
  }

  export type UserUpsertWithoutDoctor_profilesInput = {
    update: XOR<UserUpdateWithoutDoctor_profilesInput, UserUncheckedUpdateWithoutDoctor_profilesInput>
    create: XOR<UserCreateWithoutDoctor_profilesInput, UserUncheckedCreateWithoutDoctor_profilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctor_profilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctor_profilesInput, UserUncheckedUpdateWithoutDoctor_profilesInput>
  }

  export type UserUpdateWithoutDoctor_profilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctor_profilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    name?: string | null
    email?: string | null
    password?: string | null
    role?: $Enums.UserRole
    phone?: string | null
    numberVerified?: boolean
    image?: string | null
    about?: string | null
    emailVerified?: Date | string | null
    socket_id?: string | null
    participants?: ConversationParticipantUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    doctor_availability_details?: doctor_availability_detailsUncheckedCreateNestedOneWithoutUsersInput
    doctor_licenses?: doctor_licensesUncheckedCreateNestedOneWithoutUsersInput
    doctor_profiles?: doctor_profilesUncheckedCreateNestedOneWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    numberVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    socket_id?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    doctor_availability_details?: doctor_availability_detailsUncheckedUpdateOneWithoutUsersNestedInput
    doctor_licenses?: doctor_licensesUncheckedUpdateOneWithoutUsersNestedInput
    doctor_profiles?: doctor_profilesUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type ConversationParticipantCreateManyUserInput = {
    id?: number
    conversationId: string
    joinedAt?: Date | string
    unreadCount?: number
  }

  export type MessageCreateManySenderInput = {
    id?: number
    content: string
    conversationId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type reviewsCreateManyUsersInput = {
    id?: number
    rating: string
    message: string
    patientName: string
    patientId: string
    patientProfilePic: string
    createdAt?: Date | string
    appointmentId: number
  }

  export type ConversationParticipantUpdateWithoutUserInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
    conversation?: ConversationUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ConversationParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutSenderInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
    seenBy?: SeenMessageUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    seenBy?: SeenMessageUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reviewsUpdateWithoutUsersInput = {
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
  }

  export type reviewsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
  }

  export type reviewsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    patientName?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    patientProfilePic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: FloatFieldUpdateOperationsInput | number
  }

  export type SeenMessageCreateManyMessageInput = {
    id?: number
    userId: string
    seenAt?: Date | string
  }

  export type SeenMessageUpdateWithoutMessageInput = {
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeenMessageUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeenMessageUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    seenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationParticipantCreateManyConversationInput = {
    id?: number
    userId: string
    joinedAt?: Date | string
    unreadCount?: number
  }

  export type MessageCreateManyConversationInput = {
    id?: number
    content: string
    senderId: string
    createdAt?: Date | string
    fileName?: string | null
    filePath?: string | null
    fileType?: string | null
  }

  export type ConversationParticipantUpdateWithoutConversationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ConversationParticipantUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationParticipantUncheckedUpdateManyWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unreadCount?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutConversationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    seenBy?: SeenMessageUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    seenBy?: SeenMessageUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationCountOutputTypeDefaultArgs instead
     */
    export type ConversationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PasswordResetDefaultArgs instead
     */
    export type PasswordResetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PasswordResetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrackerDefaultArgs instead
     */
    export type TrackerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrackerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OverviewDefaultArgs instead
     */
    export type OverviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OverviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HealthMonitoringDefaultArgs instead
     */
    export type HealthMonitoringArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HealthMonitoringDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HealthExpectedDefaultArgs instead
     */
    export type HealthExpectedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HealthExpectedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OtpDefaultArgs instead
     */
    export type OtpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OtpDefaultArgs<ExtArgs>
    /**
     * @deprecated Use emailOtpDefaultArgs instead
     */
    export type emailOtpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = emailOtpDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookedAppointmentDefaultArgs instead
     */
    export type BookedAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookedAppointmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeenMessageDefaultArgs instead
     */
    export type SeenMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeenMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationDefaultArgs instead
     */
    export type ConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationParticipantDefaultArgs instead
     */
    export type ConversationParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doctor_availability_detailsDefaultArgs instead
     */
    export type doctor_availability_detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = doctor_availability_detailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doctor_licensesDefaultArgs instead
     */
    export type doctor_licensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = doctor_licensesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doctor_profilesDefaultArgs instead
     */
    export type doctor_profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = doctor_profilesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reviewsDefaultArgs instead
     */
    export type reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reviewsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}