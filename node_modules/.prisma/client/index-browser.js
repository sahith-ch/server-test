
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.20.0
 * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
 */
Prisma.prismaVersion = {
  client: "5.20.0",
  engine: "06fc58a368dc7be9fbbbe894adf8d445d208c284"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  numberVerified: 'numberVerified',
  image: 'image',
  about: 'about',
  emailVerified: 'emailVerified',
  socket_id: 'socket_id'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TrackerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  activity: 'activity',
  sleep: 'sleep',
  wellness: 'wellness',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OverviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  report: 'report'
};

exports.Prisma.HealthMonitoringScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  monthly_monitoring: 'monthly_monitoring',
  weekly_monitoring: 'weekly_monitoring',
  daily_monitoring: 'daily_monitoring'
};

exports.Prisma.HealthExpectedScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  report: 'report'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  otp: 'otp',
  expiry: 'expiry'
};

exports.Prisma.EmailOtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  expiry: 'expiry'
};

exports.Prisma.BookedAppointmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  doctor_id: 'doctor_id',
  time: 'time',
  date: 'date',
  doctorName: 'doctorName',
  purpose: 'purpose',
  reschedule: 'reschedule',
  reviewed: 'reviewed',
  status: 'status',
  mode: 'mode',
  age: 'age',
  name: 'name',
  gender: 'gender'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  conversationId: 'conversationId',
  createdAt: 'createdAt',
  fileName: 'fileName',
  filePath: 'filePath',
  fileType: 'fileType'
};

exports.Prisma.SeenMessageScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  seenAt: 'seenAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  communityName: 'communityName'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  unreadCount: 'unreadCount'
};

exports.Prisma.Doctor_availability_detailsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionFees: 'sessionFees',
  sessionLength: 'sessionLength',
  languages: 'languages',
  availableDays: 'availableDays',
  availableTimeFrom: 'availableTimeFrom',
  availableTimeSlot: 'availableTimeSlot'
};

exports.Prisma.Doctor_licensesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  imageUrl1: 'imageUrl1',
  imageUrl2: 'imageUrl2',
  registrationNumber1: 'registrationNumber1',
  registrationNumber2: 'registrationNumber2'
};

exports.Prisma.Doctor_profilesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  legalName: 'legalName',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  address: 'address',
  country: 'country',
  state: 'state',
  city: 'city',
  qualification: 'qualification',
  bookedAppointment: 'bookedAppointment',
  specialization: 'specialization',
  subSpecialist: 'subSpecialist',
  experienceYears: 'experienceYears',
  consultationFees: 'consultationFees'
};

exports.Prisma.ReviewsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rating: 'rating',
  message: 'message',
  patientName: 'patientName',
  patientId: 'patientId',
  patientProfilePic: 'patientProfilePic',
  createdAt: 'createdAt',
  appointmentId: 'appointmentId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  DOCTOR: 'DOCTOR',
  ADMIN: 'ADMIN'
};

exports.ConversationType = exports.$Enums.ConversationType = {
  PRIVATE: 'PRIVATE',
  COMMUNITY: 'COMMUNITY',
  ADMIN_SUPPORT: 'ADMIN_SUPPORT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  VerificationToken: 'VerificationToken',
  PasswordReset: 'PasswordReset',
  Tracker: 'Tracker',
  Overview: 'Overview',
  HealthMonitoring: 'HealthMonitoring',
  HealthExpected: 'HealthExpected',
  Otp: 'Otp',
  emailOtp: 'emailOtp',
  BookedAppointment: 'BookedAppointment',
  Message: 'Message',
  SeenMessage: 'SeenMessage',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  doctor_availability_details: 'doctor_availability_details',
  doctor_licenses: 'doctor_licenses',
  doctor_profiles: 'doctor_profiles',
  reviews: 'reviews'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
